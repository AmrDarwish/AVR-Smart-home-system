
0033_Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000571a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e6  00800060  0000571a  000057ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800246  00800246  00005994  2**0
                  ALLOC
  3 .stab         000054e4  00000000  00000000  00005994  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002453  00000000  00000000  0000ae78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000d2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000d48b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000d69f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000fcb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001117f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001248c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0001266c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00012973  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001338d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 35       	cpi	r26, 0x51	; 81
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 25 	call	0x4a68	; 0x4a68 <main>
      8a:	0c 94 8b 2b 	jmp	0x5716	; 0x5716 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0f 2b 	jmp	0x561e	; 0x561e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e2       	ldi	r26, 0x28	; 40
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2b 2b 	jmp	0x5656	; 0x5656 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1b 2b 	jmp	0x5636	; 0x5636 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1b 2b 	jmp	0x5636	; 0x5636 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0f 2b 	jmp	0x561e	; 0x561e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e2       	ldi	r24, 0x28	; 40
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2b 2b 	jmp	0x5656	; 0x5656 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 2b 	jmp	0x562e	; 0x562e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e2       	ldi	r22, 0x28	; 40
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1b 2b 	jmp	0x5636	; 0x5636 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1b 2b 	jmp	0x5636	; 0x5636 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1b 2b 	jmp	0x5636	; 0x5636 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 18 2b 	jmp	0x5630	; 0x5630 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 34 2b 	jmp	0x5668	; 0x5668 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 1f 2b 	jmp	0x563e	; 0x563e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 3b 2b 	jmp	0x5676	; 0x5676 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 17 2b 	jmp	0x562e	; 0x562e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e0 5d       	subi	r30, 0xD0	; 208
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <EEPROM_voidWrite>:
#include "MTWI_interface.h"
#include "HEEPROM_interface.h"

#include "util/delay.h"

void EEPROM_voidWrite(u8 Copy_u8Data, u8 Copy_u7EEPROMAddress,u8 Copy_u8DataAddress){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <EEPROM_voidWrite+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	6a 83       	std	Y+2, r22	; 0x02
     efa:	4b 83       	std	Y+3, r20	; 0x03
	/*start condition*/
	MTWI_voidStart();
     efc:	0e 94 7f 23 	call	0x46fe	; 0x46fe <MTWI_voidStart>

	/* sending address 0b1010 000 with write*/
	MTWI_voidWriteAddressWithOrder(Copy_u7EEPROMAddress,MTWI_WRITE);
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	62 e0       	ldi	r22, 0x02	; 2
     f04:	0e 94 a0 23 	call	0x4740	; 0x4740 <MTWI_voidWriteAddressWithOrder>

	/* sending address data location inside eeprom*/
	MTWI_voidWriteData(Copy_u8DataAddress);
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <MTWI_voidWriteData>

	/* sending data inside eeprom*/
	MTWI_voidWriteData(Copy_u8Data);
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <MTWI_voidWriteData>

	/* stop condition */
	MTWI_voidStop();
     f14:	0e 94 3d 24 	call	0x487a	; 0x487a <MTWI_voidStop>
}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <EEPROM_voidRead>:

void EEPROM_voidRead(u8 Copy_u7EEPROMAddress,u8 Copy_u8DataAddress, s8* Copy_pt8Data){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <EEPROM_voidRead+0x6>
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <EEPROM_voidRead+0x8>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	6a 83       	std	Y+2, r22	; 0x02
     f34:	5c 83       	std	Y+4, r21	; 0x04
     f36:	4b 83       	std	Y+3, r20	; 0x03
	/*start condition*/
	MTWI_voidStart();
     f38:	0e 94 7f 23 	call	0x46fe	; 0x46fe <MTWI_voidStart>

	/* sending address 0b1010 0000 with write */
	MTWI_voidWriteAddressWithOrder(Copy_u7EEPROMAddress,MTWI_WRITE);
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	62 e0       	ldi	r22, 0x02	; 2
     f40:	0e 94 a0 23 	call	0x4740	; 0x4740 <MTWI_voidWriteAddressWithOrder>

	/* sending address mlocation inside eeprom*/
	MTWI_voidWriteData(Copy_u8DataAddress);
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <MTWI_voidWriteData>

	/* Send repeated start */
	MTWI_voidStart();
     f4a:	0e 94 7f 23 	call	0x46fe	; 0x46fe <MTWI_voidStart>

	/*repeated start condition with read*/
	MTWI_voidWriteAddressWithOrder(Copy_u7EEPROMAddress,MTWI_READ);
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	0e 94 a0 23 	call	0x4740	; 0x4740 <MTWI_voidWriteAddressWithOrder>

	/* NOW I'm reading one btpe from eeprom*/
	*Copy_pt8Data =  MTWI_u8ReadWithACK();
     f56:	0e 94 19 24 	call	0x4832	; 0x4832 <MTWI_u8ReadWithACK>
     f5a:	eb 81       	ldd	r30, Y+3	; 0x03
     f5c:	fc 81       	ldd	r31, Y+4	; 0x04
     f5e:	80 83       	st	Z, r24

	/* stop condition */
	MTWI_voidStop();
     f60:	0e 94 3d 24 	call	0x487a	; 0x487a <MTWI_voidStop>
}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <EEPROM_voidWriteString>:
void EEPROM_voidWriteString(u8* Copy_u8Data,u8 Copy_u8DataSize, u8 Copy_u7EEPROMAddress,u8 Copy_u8DataStartAddress){
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	63 97       	sbiw	r28, 0x13	; 19
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	98 8b       	std	Y+16, r25	; 0x10
     f88:	8f 87       	std	Y+15, r24	; 0x0f
     f8a:	69 8b       	std	Y+17, r22	; 0x11
     f8c:	4a 8b       	std	Y+18, r20	; 0x12
     f8e:	2b 8b       	std	Y+19, r18	; 0x13
     f90:	91 c0       	rjmp	.+290    	; 0x10b4 <EEPROM_voidWriteString+0x142>
	for ( ; Copy_u8DataSize > 0 ; Copy_u8DataSize--){
		/*start condition*/
		MTWI_voidStart();
     f92:	0e 94 7f 23 	call	0x46fe	; 0x46fe <MTWI_voidStart>

		/* sending address 0b1010 000 with write*/
		MTWI_voidWriteAddressWithOrder(Copy_u7EEPROMAddress,MTWI_WRITE);
     f96:	8a 89       	ldd	r24, Y+18	; 0x12
     f98:	62 e0       	ldi	r22, 0x02	; 2
     f9a:	0e 94 a0 23 	call	0x4740	; 0x4740 <MTWI_voidWriteAddressWithOrder>

		/* sending address data location inside eeprom*/
		/* startig from last data adders */
		MTWI_voidWriteData(Copy_u8DataStartAddress+Copy_u8DataSize-1);
     f9e:	9b 89       	ldd	r25, Y+19	; 0x13
     fa0:	89 89       	ldd	r24, Y+17	; 0x11
     fa2:	89 0f       	add	r24, r25
     fa4:	81 50       	subi	r24, 0x01	; 1
     fa6:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <MTWI_voidWriteData>

		/* sending data inside eeprom*/
		/* startig from last char in the string */
		MTWI_voidWriteData(Copy_u8Data[Copy_u8DataSize-1]);
     faa:	89 89       	ldd	r24, Y+17	; 0x11
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9c 01       	movw	r18, r24
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	30 40       	sbci	r19, 0x00	; 0
     fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb8:	98 89       	ldd	r25, Y+16	; 0x10
     fba:	fc 01       	movw	r30, r24
     fbc:	e2 0f       	add	r30, r18
     fbe:	f3 1f       	adc	r31, r19
     fc0:	80 81       	ld	r24, Z
     fc2:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <MTWI_voidWriteData>
		/* stop condition */
		MTWI_voidStop();
     fc6:	0e 94 3d 24 	call	0x487a	; 0x487a <MTWI_voidStop>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a0 e7       	ldi	r26, 0x70	; 112
     fd0:	b1 e4       	ldi	r27, 0x41	; 65
     fd2:	8b 87       	std	Y+11, r24	; 0x0b
     fd4:	9c 87       	std	Y+12, r25	; 0x0c
     fd6:	ad 87       	std	Y+13, r26	; 0x0d
     fd8:	be 87       	std	Y+14, r27	; 0x0e
     fda:	6b 85       	ldd	r22, Y+11	; 0x0b
     fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fde:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a ef       	ldi	r20, 0xFA	; 250
     fe8:	54 e4       	ldi	r21, 0x44	; 68
     fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8f 83       	std	Y+7, r24	; 0x07
     ff4:	98 87       	std	Y+8, r25	; 0x08
     ff6:	a9 87       	std	Y+9, r26	; 0x09
     ff8:	ba 87       	std	Y+10, r27	; 0x0a
     ffa:	6f 81       	ldd	r22, Y+7	; 0x07
     ffc:	78 85       	ldd	r23, Y+8	; 0x08
     ffe:	89 85       	ldd	r24, Y+9	; 0x09
    1000:	9a 85       	ldd	r25, Y+10	; 0x0a
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <EEPROM_voidWriteString+0xaa>
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	8d 83       	std	Y+5, r24	; 0x05
    101a:	3f c0       	rjmp	.+126    	; 0x109a <EEPROM_voidWriteString+0x128>
    101c:	6f 81       	ldd	r22, Y+7	; 0x07
    101e:	78 85       	ldd	r23, Y+8	; 0x08
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1030:	18 16       	cp	r1, r24
    1032:	4c f5       	brge	.+82     	; 0x1086 <EEPROM_voidWriteString+0x114>
    1034:	6b 85       	ldd	r22, Y+11	; 0x0b
    1036:	7c 85       	ldd	r23, Y+12	; 0x0c
    1038:	8d 85       	ldd	r24, Y+13	; 0x0d
    103a:	9e 85       	ldd	r25, Y+14	; 0x0e
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	0f c0       	rjmp	.+30     	; 0x107c <EEPROM_voidWriteString+0x10a>
    105e:	88 ec       	ldi	r24, 0xC8	; 200
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <EEPROM_voidWriteString+0xf8>
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	8d 83       	std	Y+5, r24	; 0x05
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f7       	brne	.-38     	; 0x105e <EEPROM_voidWriteString+0xec>
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <EEPROM_voidWriteString+0x13c>
    1086:	6f 81       	ldd	r22, Y+7	; 0x07
    1088:	78 85       	ldd	r23, Y+8	; 0x08
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <EEPROM_voidWriteString+0x134>
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01

	/* stop condition */
	MTWI_voidStop();
}
void EEPROM_voidWriteString(u8* Copy_u8Data,u8 Copy_u8DataSize, u8 Copy_u7EEPROMAddress,u8 Copy_u8DataStartAddress){
	for ( ; Copy_u8DataSize > 0 ; Copy_u8DataSize--){
    10ae:	89 89       	ldd	r24, Y+17	; 0x11
    10b0:	81 50       	subi	r24, 0x01	; 1
    10b2:	89 8b       	std	Y+17, r24	; 0x11
    10b4:	89 89       	ldd	r24, Y+17	; 0x11
    10b6:	88 23       	and	r24, r24
    10b8:	09 f0       	breq	.+2      	; 0x10bc <EEPROM_voidWriteString+0x14a>
    10ba:	6b cf       	rjmp	.-298    	; 0xf92 <EEPROM_voidWriteString+0x20>
		/* stop condition */
		MTWI_voidStop();
		_delay_ms(15);
	}

}
    10bc:	63 96       	adiw	r28, 0x13	; 19
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <EEPROM_voidReadString>:


void EEPROM_voidReadString(u8 Copy_u7EEPROMAddress,u8 Copy_u8DataStartAddress,u8 Copy_u8DataSize, u8* Copy_pt8Data){
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <EEPROM_voidReadString+0xa>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <EEPROM_voidReadString+0xc>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02
    10e4:	4b 83       	std	Y+3, r20	; 0x03
    10e6:	3d 83       	std	Y+5, r19	; 0x05
    10e8:	2c 83       	std	Y+4, r18	; 0x04
    10ea:	26 c0       	rjmp	.+76     	; 0x1138 <EEPROM_voidReadString+0x6a>

	for (;Copy_u8DataSize > 0 ; Copy_u8DataSize-- ){
		/*start condition*/
		MTWI_voidStart();
    10ec:	0e 94 7f 23 	call	0x46fe	; 0x46fe <MTWI_voidStart>

		/* sending address 0b1010 0000 with write */
		MTWI_voidWriteAddressWithOrder(Copy_u7EEPROMAddress,MTWI_WRITE);
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	62 e0       	ldi	r22, 0x02	; 2
    10f4:	0e 94 a0 23 	call	0x4740	; 0x4740 <MTWI_voidWriteAddressWithOrder>

		/* sending address mlocation inside eeprom */
		/* starting from the end of wanted data */
		MTWI_voidWriteData(Copy_u8DataStartAddress+Copy_u8DataSize-1);
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	89 0f       	add	r24, r25
    10fe:	81 50       	subi	r24, 0x01	; 1
    1100:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <MTWI_voidWriteData>

		/* Send repeated start */
		MTWI_voidStart();
    1104:	0e 94 7f 23 	call	0x46fe	; 0x46fe <MTWI_voidStart>

		/*repeated start condition with read*/
		MTWI_voidWriteAddressWithOrder(Copy_u7EEPROMAddress,MTWI_READ);
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	0e 94 a0 23 	call	0x4740	; 0x4740 <MTWI_voidWriteAddressWithOrder>

		/* NOW I'm reading one btpe from eeprom*/
		/* starting from the last byte of wanted data */
		Copy_pt8Data[Copy_u8DataSize-1] =  MTWI_u8ReadWithACK();
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	9c 01       	movw	r18, r24
    1118:	21 50       	subi	r18, 0x01	; 1
    111a:	30 40       	sbci	r19, 0x00	; 0
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	8c 01       	movw	r16, r24
    1122:	02 0f       	add	r16, r18
    1124:	13 1f       	adc	r17, r19
    1126:	0e 94 19 24 	call	0x4832	; 0x4832 <MTWI_u8ReadWithACK>
    112a:	f8 01       	movw	r30, r16
    112c:	80 83       	st	Z, r24

		/* stop condition */
		MTWI_voidStop();
    112e:	0e 94 3d 24 	call	0x487a	; 0x487a <MTWI_voidStop>
}


void EEPROM_voidReadString(u8 Copy_u7EEPROMAddress,u8 Copy_u8DataStartAddress,u8 Copy_u8DataSize, u8* Copy_pt8Data){

	for (;Copy_u8DataSize > 0 ; Copy_u8DataSize-- ){
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	8b 83       	std	Y+3, r24	; 0x03
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	88 23       	and	r24, r24
    113c:	b9 f6       	brne	.-82     	; 0x10ec <EEPROM_voidReadString+0x1e>
		Copy_pt8Data[Copy_u8DataSize-1] =  MTWI_u8ReadWithACK();

		/* stop condition */
		MTWI_voidStop();
	}
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <HKeyPad_u8GetKey>:
// loop on all ROWs > checking pins
// if one is pressed get its value
// else set the reseted column
// return the key
//
u8 HKeyPad_u8GetKey(void){
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	a2 97       	sbiw	r28, 0x22	; 34
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
	u8 flag = 0;
    1166:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8pressedKey 	= NO_KEY;
    1168:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8keyIspressed = NOT_PRESSED;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_u8ColIterator = 0;
    116e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowIterator = 0;
    1170:	19 82       	std	Y+1, r1	; 0x01
	u8 Col_arr[COL_SIZE] = {
				KEYPAD_C0,
				KEYPAD_C1,
				KEYPAD_C2,
				KEYPAD_C3
		};
    1172:	84 e0       	ldi	r24, 0x04	; 4
    1174:	8e 83       	std	Y+6, r24	; 0x06
    1176:	85 e0       	ldi	r24, 0x05	; 5
    1178:	8f 83       	std	Y+7, r24	; 0x07
    117a:	86 e0       	ldi	r24, 0x06	; 6
    117c:	88 87       	std	Y+8, r24	; 0x08
    117e:	87 e0       	ldi	r24, 0x07	; 7
    1180:	89 87       	std	Y+9, r24	; 0x09
	u8 Row_arr[ROW_SIZE] = {
				KEYPAD_R0,
				KEYPAD_R1,
				KEYPAD_R2,
				KEYPAD_R3
		};
    1182:	85 e0       	ldi	r24, 0x05	; 5
    1184:	8a 87       	std	Y+10, r24	; 0x0a
    1186:	84 e0       	ldi	r24, 0x04	; 4
    1188:	8b 87       	std	Y+11, r24	; 0x0b
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	8c 87       	std	Y+12, r24	; 0x0c
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	8d 87       	std	Y+13, r24	; 0x0d

	u8 KeyPad_arr[ROW_SIZE][COL_SIZE] = KEYPAD_TYPE;
    1192:	ce 01       	movw	r24, r28
    1194:	0e 96       	adiw	r24, 0x0e	; 14
    1196:	9f 8f       	std	Y+31, r25	; 0x1f
    1198:	8e 8f       	std	Y+30, r24	; 0x1e
    119a:	e5 e3       	ldi	r30, 0x35	; 53
    119c:	f2 e0       	ldi	r31, 0x02	; 2
    119e:	f9 a3       	std	Y+33, r31	; 0x21
    11a0:	e8 a3       	std	Y+32, r30	; 0x20
    11a2:	f0 e1       	ldi	r31, 0x10	; 16
    11a4:	fa a3       	std	Y+34, r31	; 0x22
    11a6:	e8 a1       	ldd	r30, Y+32	; 0x20
    11a8:	f9 a1       	ldd	r31, Y+33	; 0x21
    11aa:	00 80       	ld	r0, Z
    11ac:	88 a1       	ldd	r24, Y+32	; 0x20
    11ae:	99 a1       	ldd	r25, Y+33	; 0x21
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	99 a3       	std	Y+33, r25	; 0x21
    11b4:	88 a3       	std	Y+32, r24	; 0x20
    11b6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    11b8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    11ba:	00 82       	st	Z, r0
    11bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	9f 8f       	std	Y+31, r25	; 0x1f
    11c4:	8e 8f       	std	Y+30, r24	; 0x1e
    11c6:	9a a1       	ldd	r25, Y+34	; 0x22
    11c8:	91 50       	subi	r25, 0x01	; 1
    11ca:	9a a3       	std	Y+34, r25	; 0x22
    11cc:	ea a1       	ldd	r30, Y+34	; 0x22
    11ce:	ee 23       	and	r30, r30
    11d0:	51 f7       	brne	.-44     	; 0x11a6 <HKeyPad_u8GetKey+0x54>


	for (Local_u8ColIterator = 0 ; Local_u8ColIterator < COL_SIZE ; Local_u8ColIterator++){
    11d2:	1a 82       	std	Y+2, r1	; 0x02
    11d4:	95 c0       	rjmp	.+298    	; 0x1300 <HKeyPad_u8GetKey+0x1ae>

		MDIO_ErrorS_SetPinValue(KEYPAD_COL_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	ce 01       	movw	r24, r28
    11de:	06 96       	adiw	r24, 0x06	; 6
    11e0:	fc 01       	movw	r30, r24
    11e2:	e2 0f       	add	r30, r18
    11e4:	f3 1f       	adc	r31, r19
    11e6:	90 81       	ld	r25, Z
    11e8:	84 e0       	ldi	r24, 0x04	; 4
    11ea:	69 2f       	mov	r22, r25
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(KEYPAD_COL_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	ce 01       	movw	r24, r28
    11fa:	06 96       	adiw	r24, 0x06	; 6
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	90 81       	ld	r25, Z
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	69 2f       	mov	r22, r25
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(KEYPAD_COL_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	ce 01       	movw	r24, r28
    1216:	06 96       	adiw	r24, 0x06	; 6
    1218:	fc 01       	movw	r30, r24
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	90 81       	ld	r25, Z
    1220:	84 e0       	ldi	r24, 0x04	; 4
    1222:	69 2f       	mov	r22, r25
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(KEYPAD_COL_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	ce 01       	movw	r24, r28
    1232:	06 96       	adiw	r24, 0x06	; 6
    1234:	fc 01       	movw	r30, r24
    1236:	e2 0f       	add	r30, r18
    1238:	f3 1f       	adc	r31, r19
    123a:	90 81       	ld	r25, Z
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	69 2f       	mov	r22, r25
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

		for (Local_u8RowIterator = 0 ; Local_u8RowIterator < ROW_SIZE ; Local_u8RowIterator++){
    1246:	19 82       	std	Y+1, r1	; 0x01
    1248:	43 c0       	rjmp	.+134    	; 0x12d0 <HKeyPad_u8GetKey+0x17e>

			MDIO_ErrorS_GetPinValue(KEYPAD_ROW_PORT , Row_arr[Local_u8RowIterator] , &Local_u8keyIspressed);
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	ce 01       	movw	r24, r28
    1252:	0a 96       	adiw	r24, 0x0a	; 10
    1254:	fc 01       	movw	r30, r24
    1256:	e2 0f       	add	r30, r18
    1258:	f3 1f       	adc	r31, r19
    125a:	90 81       	ld	r25, Z
    125c:	9e 01       	movw	r18, r28
    125e:	2b 5f       	subi	r18, 0xFB	; 251
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	69 2f       	mov	r22, r25
    1266:	a9 01       	movw	r20, r18
    1268:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <MDIO_ErrorS_GetPinValue>

			if (!Local_u8keyIspressed){
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	88 23       	and	r24, r24
    1270:	61 f5       	brne	.+88     	; 0x12ca <HKeyPad_u8GetKey+0x178>
    1272:	11 c0       	rjmp	.+34     	; 0x1296 <HKeyPad_u8GetKey+0x144>
				while(!Local_u8keyIspressed){
					MDIO_ErrorS_GetPinValue(KEYPAD_ROW_PORT , Row_arr[Local_u8RowIterator] , &Local_u8keyIspressed);
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	ce 01       	movw	r24, r28
    127c:	0a 96       	adiw	r24, 0x0a	; 10
    127e:	fc 01       	movw	r30, r24
    1280:	e2 0f       	add	r30, r18
    1282:	f3 1f       	adc	r31, r19
    1284:	90 81       	ld	r25, Z
    1286:	9e 01       	movw	r18, r28
    1288:	2b 5f       	subi	r18, 0xFB	; 251
    128a:	3f 4f       	sbci	r19, 0xFF	; 255
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	69 2f       	mov	r22, r25
    1290:	a9 01       	movw	r20, r18
    1292:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <MDIO_ErrorS_GetPinValue>
		for (Local_u8RowIterator = 0 ; Local_u8RowIterator < ROW_SIZE ; Local_u8RowIterator++){

			MDIO_ErrorS_GetPinValue(KEYPAD_ROW_PORT , Row_arr[Local_u8RowIterator] , &Local_u8keyIspressed);

			if (!Local_u8keyIspressed){
				while(!Local_u8keyIspressed){
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	88 23       	and	r24, r24
    129a:	61 f3       	breq	.-40     	; 0x1274 <HKeyPad_u8GetKey+0x122>
					MDIO_ErrorS_GetPinValue(KEYPAD_ROW_PORT , Row_arr[Local_u8RowIterator] , &Local_u8keyIspressed);
				}
				Local_u8pressedKey = KeyPad_arr[Local_u8RowIterator][Local_u8ColIterator];
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	48 2f       	mov	r20, r24
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	ce 01       	movw	r24, r28
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	82 0f       	add	r24, r18
    12b6:	93 1f       	adc	r25, r19
    12b8:	84 0f       	add	r24, r20
    12ba:	95 1f       	adc	r25, r21
    12bc:	fc 01       	movw	r30, r24
    12be:	3d 96       	adiw	r30, 0x0d	; 13
    12c0:	80 81       	ld	r24, Z
    12c2:	8b 83       	std	Y+3, r24	; 0x03
				flag = 1;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	8c 83       	std	Y+4, r24	; 0x04
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <HKeyPad_u8GetKey+0x186>
		MDIO_ErrorS_SetPinValue(KEYPAD_COL_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);
		MDIO_ErrorS_SetPinValue(KEYPAD_COL_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);
		MDIO_ErrorS_SetPinValue(KEYPAD_COL_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);
		MDIO_ErrorS_SetPinValue(KEYPAD_COL_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);

		for (Local_u8RowIterator = 0 ; Local_u8RowIterator < ROW_SIZE ; Local_u8RowIterator++){
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	8f 5f       	subi	r24, 0xFF	; 255
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	84 30       	cpi	r24, 0x04	; 4
    12d4:	08 f4       	brcc	.+2      	; 0x12d8 <HKeyPad_u8GetKey+0x186>
    12d6:	b9 cf       	rjmp	.-142    	; 0x124a <HKeyPad_u8GetKey+0xf8>
			else {

			}
		}

		MDIO_ErrorS_SetPinValue(KEYPAD_COL_PORT,Col_arr[Local_u8ColIterator], DIO_HIGH);
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	ce 01       	movw	r24, r28
    12e0:	06 96       	adiw	r24, 0x06	; 6
    12e2:	fc 01       	movw	r30, r24
    12e4:	e2 0f       	add	r30, r18
    12e6:	f3 1f       	adc	r31, r19
    12e8:	90 81       	ld	r25, Z
    12ea:	84 e0       	ldi	r24, 0x04	; 4
    12ec:	69 2f       	mov	r22, r25
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
		if (flag){
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	88 23       	and	r24, r24
    12f8:	39 f4       	brne	.+14     	; 0x1308 <HKeyPad_u8GetKey+0x1b6>
		};

	u8 KeyPad_arr[ROW_SIZE][COL_SIZE] = KEYPAD_TYPE;


	for (Local_u8ColIterator = 0 ; Local_u8ColIterator < COL_SIZE ; Local_u8ColIterator++){
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	8f 5f       	subi	r24, 0xFF	; 255
    12fe:	8a 83       	std	Y+2, r24	; 0x02
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	84 30       	cpi	r24, 0x04	; 4
    1304:	08 f4       	brcc	.+2      	; 0x1308 <HKeyPad_u8GetKey+0x1b6>
    1306:	67 cf       	rjmp	.-306    	; 0x11d6 <HKeyPad_u8GetKey+0x84>
		else {

		}

	}
	return Local_u8pressedKey;
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
}
    130a:	a2 96       	adiw	r28, 0x22	; 34
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <HLCD_voidInit>:
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"


void HLCD_voidInit(){
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	c8 59       	subi	r28, 0x98	; 152
    132a:	d0 40       	sbci	r29, 0x00	; 0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	fe 01       	movw	r30, r28
    1338:	eb 56       	subi	r30, 0x6B	; 107
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a0 e2       	ldi	r26, 0x20	; 32
    1342:	b2 e4       	ldi	r27, 0x42	; 66
    1344:	80 83       	st	Z, r24
    1346:	91 83       	std	Z+1, r25	; 0x01
    1348:	a2 83       	std	Z+2, r26	; 0x02
    134a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134c:	8e 01       	movw	r16, r28
    134e:	0f 56       	subi	r16, 0x6F	; 111
    1350:	1f 4f       	sbci	r17, 0xFF	; 255
    1352:	fe 01       	movw	r30, r28
    1354:	eb 56       	subi	r30, 0x6B	; 107
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	60 81       	ld	r22, Z
    135a:	71 81       	ldd	r23, Z+1	; 0x01
    135c:	82 81       	ldd	r24, Z+2	; 0x02
    135e:	93 81       	ldd	r25, Z+3	; 0x03
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	4a ef       	ldi	r20, 0xFA	; 250
    1366:	54 e4       	ldi	r21, 0x44	; 68
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	f8 01       	movw	r30, r16
    1372:	80 83       	st	Z, r24
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	a2 83       	std	Z+2, r26	; 0x02
    1378:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    137a:	fe 01       	movw	r30, r28
    137c:	ef 56       	subi	r30, 0x6F	; 111
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e8       	ldi	r20, 0x80	; 128
    138e:	5f e3       	ldi	r21, 0x3F	; 63
    1390:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1394:	88 23       	and	r24, r24
    1396:	44 f4       	brge	.+16     	; 0x13a8 <HLCD_voidInit+0x8c>
		__ticks = 1;
    1398:	fe 01       	movw	r30, r28
    139a:	e1 57       	subi	r30, 0x71	; 113
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
    13a6:	64 c0       	rjmp	.+200    	; 0x1470 <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    13a8:	fe 01       	movw	r30, r28
    13aa:	ef 56       	subi	r30, 0x6F	; 111
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	60 81       	ld	r22, Z
    13b0:	71 81       	ldd	r23, Z+1	; 0x01
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	93 81       	ldd	r25, Z+3	; 0x03
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	0c f0       	brlt	.+2      	; 0x13c8 <HLCD_voidInit+0xac>
    13c6:	43 c0       	rjmp	.+134    	; 0x144e <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c8:	fe 01       	movw	r30, r28
    13ca:	eb 56       	subi	r30, 0x6B	; 107
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	60 81       	ld	r22, Z
    13d0:	71 81       	ldd	r23, Z+1	; 0x01
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e2       	ldi	r20, 0x20	; 32
    13dc:	51 e4       	ldi	r21, 0x41	; 65
    13de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	8e 01       	movw	r16, r28
    13e8:	01 57       	subi	r16, 0x71	; 113
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	f8 01       	movw	r30, r16
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	80 83       	st	Z, r24
    13fe:	1f c0       	rjmp	.+62     	; 0x143e <HLCD_voidInit+0x122>
    1400:	fe 01       	movw	r30, r28
    1402:	e3 57       	subi	r30, 0x73	; 115
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	88 ec       	ldi	r24, 0xC8	; 200
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    140e:	fe 01       	movw	r30, r28
    1410:	e3 57       	subi	r30, 0x73	; 115
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <HLCD_voidInit+0xfc>
    141c:	fe 01       	movw	r30, r28
    141e:	e3 57       	subi	r30, 0x73	; 115
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	91 83       	std	Z+1, r25	; 0x01
    1424:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	de 01       	movw	r26, r28
    1428:	a1 57       	subi	r26, 0x71	; 113
    142a:	bf 4f       	sbci	r27, 0xFF	; 255
    142c:	fe 01       	movw	r30, r28
    142e:	e1 57       	subi	r30, 0x71	; 113
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	80 81       	ld	r24, Z
    1434:	91 81       	ldd	r25, Z+1	; 0x01
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	11 96       	adiw	r26, 0x01	; 1
    143a:	9c 93       	st	X, r25
    143c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143e:	fe 01       	movw	r30, r28
    1440:	e1 57       	subi	r30, 0x71	; 113
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	d1 f6       	brne	.-76     	; 0x1400 <HLCD_voidInit+0xe4>
    144c:	27 c0       	rjmp	.+78     	; 0x149c <HLCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144e:	8e 01       	movw	r16, r28
    1450:	01 57       	subi	r16, 0x71	; 113
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	fe 01       	movw	r30, r28
    1456:	ef 56       	subi	r30, 0x6F	; 111
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	f8 01       	movw	r30, r16
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	80 83       	st	Z, r24
    1470:	de 01       	movw	r26, r28
    1472:	a5 57       	subi	r26, 0x75	; 117
    1474:	bf 4f       	sbci	r27, 0xFF	; 255
    1476:	fe 01       	movw	r30, r28
    1478:	e1 57       	subi	r30, 0x71	; 113
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	8d 93       	st	X+, r24
    1482:	9c 93       	st	X, r25
    1484:	fe 01       	movw	r30, r28
    1486:	e5 57       	subi	r30, 0x75	; 117
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <HLCD_voidInit+0x172>
    1492:	fe 01       	movw	r30, r28
    1494:	e5 57       	subi	r30, 0x75	; 117
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	80 83       	st	Z, r24
	_delay_ms(40);

	/* manual 4 bit initialization of LCD */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D4,DIO_HIGH);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	62 e0       	ldi	r22, 0x02	; 2
    14a0:	41 e0       	ldi	r20, 0x01	; 1
    14a2:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D5,DIO_HIGH);
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	63 e0       	ldi	r22, 0x03	; 3
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D6,DIO_LOW);
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	64 e0       	ldi	r22, 0x04	; 4
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D7,DIO_LOW);
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	65 e0       	ldi	r22, 0x05	; 5
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    14ce:	82 e0       	ldi	r24, 0x02	; 2
    14d0:	61 e0       	ldi	r22, 0x01	; 1
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	63 e0       	ldi	r22, 0x03	; 3
    14dc:	41 e0       	ldi	r20, 0x01	; 1
    14de:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    14e2:	fe 01       	movw	r30, r28
    14e4:	e9 57       	subi	r30, 0x79	; 121
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e8       	ldi	r26, 0x80	; 128
    14ee:	bf e3       	ldi	r27, 0x3F	; 63
    14f0:	80 83       	st	Z, r24
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	a2 83       	std	Z+2, r26	; 0x02
    14f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14f8:	8e 01       	movw	r16, r28
    14fa:	0d 57       	subi	r16, 0x7D	; 125
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	fe 01       	movw	r30, r28
    1500:	e9 57       	subi	r30, 0x79	; 121
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	2b ea       	ldi	r18, 0xAB	; 171
    150e:	3a ea       	ldi	r19, 0xAA	; 170
    1510:	4a e2       	ldi	r20, 0x2A	; 42
    1512:	50 e4       	ldi	r21, 0x40	; 64
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	f8 01       	movw	r30, r16
    151e:	80 83       	st	Z, r24
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	a2 83       	std	Z+2, r26	; 0x02
    1524:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1526:	fe 01       	movw	r30, r28
    1528:	ed 57       	subi	r30, 0x7D	; 125
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1540:	88 23       	and	r24, r24
    1542:	34 f4       	brge	.+12     	; 0x1550 <HLCD_voidInit+0x234>
		__ticks = 1;
    1544:	fe 01       	movw	r30, r28
    1546:	ee 57       	subi	r30, 0x7E	; 126
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 83       	st	Z, r24
    154e:	e0 c0       	rjmp	.+448    	; 0x1710 <HLCD_voidInit+0x3f4>
	else if (__tmp > 255)
    1550:	fe 01       	movw	r30, r28
    1552:	ed 57       	subi	r30, 0x7D	; 125
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	93 81       	ldd	r25, Z+3	; 0x03
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	4f e7       	ldi	r20, 0x7F	; 127
    1564:	53 e4       	ldi	r21, 0x43	; 67
    1566:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    156a:	18 16       	cp	r1, r24
    156c:	0c f0       	brlt	.+2      	; 0x1570 <HLCD_voidInit+0x254>
    156e:	c0 c0       	rjmp	.+384    	; 0x16f0 <HLCD_voidInit+0x3d4>
	{
		_delay_ms(__us / 1000.0);
    1570:	fe 01       	movw	r30, r28
    1572:	e9 57       	subi	r30, 0x79	; 121
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a e7       	ldi	r20, 0x7A	; 122
    1584:	54 e4       	ldi	r21, 0x44	; 68
    1586:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	fe 01       	movw	r30, r28
    1590:	e2 58       	subi	r30, 0x82	; 130
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	80 83       	st	Z, r24
    1596:	91 83       	std	Z+1, r25	; 0x01
    1598:	a2 83       	std	Z+2, r26	; 0x02
    159a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159c:	8e 01       	movw	r16, r28
    159e:	06 58       	subi	r16, 0x86	; 134
    15a0:	1f 4f       	sbci	r17, 0xFF	; 255
    15a2:	fe 01       	movw	r30, r28
    15a4:	e2 58       	subi	r30, 0x82	; 130
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	4a ef       	ldi	r20, 0xFA	; 250
    15b6:	54 e4       	ldi	r21, 0x44	; 68
    15b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	f8 01       	movw	r30, r16
    15c2:	80 83       	st	Z, r24
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	a2 83       	std	Z+2, r26	; 0x02
    15c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ca:	fe 01       	movw	r30, r28
    15cc:	e6 58       	subi	r30, 0x86	; 134
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	60 81       	ld	r22, Z
    15d2:	71 81       	ldd	r23, Z+1	; 0x01
    15d4:	82 81       	ldd	r24, Z+2	; 0x02
    15d6:	93 81       	ldd	r25, Z+3	; 0x03
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15e4:	88 23       	and	r24, r24
    15e6:	44 f4       	brge	.+16     	; 0x15f8 <HLCD_voidInit+0x2dc>
		__ticks = 1;
    15e8:	fe 01       	movw	r30, r28
    15ea:	e8 58       	subi	r30, 0x88	; 136
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	80 83       	st	Z, r24
    15f6:	64 c0       	rjmp	.+200    	; 0x16c0 <HLCD_voidInit+0x3a4>
	else if (__tmp > 65535)
    15f8:	fe 01       	movw	r30, r28
    15fa:	e6 58       	subi	r30, 0x86	; 134
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	60 81       	ld	r22, Z
    1600:	71 81       	ldd	r23, Z+1	; 0x01
    1602:	82 81       	ldd	r24, Z+2	; 0x02
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	57 e4       	ldi	r21, 0x47	; 71
    160e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1612:	18 16       	cp	r1, r24
    1614:	0c f0       	brlt	.+2      	; 0x1618 <HLCD_voidInit+0x2fc>
    1616:	43 c0       	rjmp	.+134    	; 0x169e <HLCD_voidInit+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1618:	fe 01       	movw	r30, r28
    161a:	e2 58       	subi	r30, 0x82	; 130
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	8e 01       	movw	r16, r28
    1638:	08 58       	subi	r16, 0x88	; 136
    163a:	1f 4f       	sbci	r17, 0xFF	; 255
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	f8 01       	movw	r30, r16
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	80 83       	st	Z, r24
    164e:	1f c0       	rjmp	.+62     	; 0x168e <HLCD_voidInit+0x372>
    1650:	fe 01       	movw	r30, r28
    1652:	ea 58       	subi	r30, 0x8A	; 138
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	88 ec       	ldi	r24, 0xC8	; 200
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
    165e:	fe 01       	movw	r30, r28
    1660:	ea 58       	subi	r30, 0x8A	; 138
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <HLCD_voidInit+0x34c>
    166c:	fe 01       	movw	r30, r28
    166e:	ea 58       	subi	r30, 0x8A	; 138
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	de 01       	movw	r26, r28
    1678:	a8 58       	subi	r26, 0x88	; 136
    167a:	bf 4f       	sbci	r27, 0xFF	; 255
    167c:	fe 01       	movw	r30, r28
    167e:	e8 58       	subi	r30, 0x88	; 136
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	11 96       	adiw	r26, 0x01	; 1
    168a:	9c 93       	st	X, r25
    168c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168e:	fe 01       	movw	r30, r28
    1690:	e8 58       	subi	r30, 0x88	; 136
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	d1 f6       	brne	.-76     	; 0x1650 <HLCD_voidInit+0x334>
    169c:	4b c0       	rjmp	.+150    	; 0x1734 <HLCD_voidInit+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169e:	8e 01       	movw	r16, r28
    16a0:	08 58       	subi	r16, 0x88	; 136
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	fe 01       	movw	r30, r28
    16a6:	e6 58       	subi	r30, 0x86	; 134
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	f8 01       	movw	r30, r16
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	80 83       	st	Z, r24
    16c0:	de 01       	movw	r26, r28
    16c2:	ac 58       	subi	r26, 0x8C	; 140
    16c4:	bf 4f       	sbci	r27, 0xFF	; 255
    16c6:	fe 01       	movw	r30, r28
    16c8:	e8 58       	subi	r30, 0x88	; 136
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	11 96       	adiw	r26, 0x01	; 1
    16d2:	9c 93       	st	X, r25
    16d4:	8e 93       	st	-X, r24
    16d6:	fe 01       	movw	r30, r28
    16d8:	ec 58       	subi	r30, 0x8C	; 140
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <HLCD_voidInit+0x3c4>
    16e4:	fe 01       	movw	r30, r28
    16e6:	ec 58       	subi	r30, 0x8C	; 140
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
    16ee:	22 c0       	rjmp	.+68     	; 0x1734 <HLCD_voidInit+0x418>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16f0:	8e 01       	movw	r16, r28
    16f2:	0e 57       	subi	r16, 0x7E	; 126
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	fe 01       	movw	r30, r28
    16f8:	ed 57       	subi	r30, 0x7D	; 125
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	60 81       	ld	r22, Z
    16fe:	71 81       	ldd	r23, Z+1	; 0x01
    1700:	82 81       	ldd	r24, Z+2	; 0x02
    1702:	93 81       	ldd	r25, Z+3	; 0x03
    1704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	f8 01       	movw	r30, r16
    170e:	80 83       	st	Z, r24
    1710:	de 01       	movw	r26, r28
    1712:	ad 58       	subi	r26, 0x8D	; 141
    1714:	bf 4f       	sbci	r27, 0xFF	; 255
    1716:	fe 01       	movw	r30, r28
    1718:	ee 57       	subi	r30, 0x7E	; 126
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 81       	ld	r24, Z
    171e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1720:	fe 01       	movw	r30, r28
    1722:	ed 58       	subi	r30, 0x8D	; 141
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	8a 95       	dec	r24
    172a:	f1 f7       	brne	.-4      	; 0x1728 <HLCD_voidInit+0x40c>
    172c:	fe 01       	movw	r30, r28
    172e:	ed 58       	subi	r30, 0x8D	; 141
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 83       	st	Z, r24
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	63 e0       	ldi	r22, 0x03	; 3
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    173e:	fe 01       	movw	r30, r28
    1740:	e1 59       	subi	r30, 0x91	; 145
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 ea       	ldi	r26, 0xA0	; 160
    174a:	b0 e4       	ldi	r27, 0x40	; 64
    174c:	80 83       	st	Z, r24
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	a2 83       	std	Z+2, r26	; 0x02
    1752:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1754:	8e 01       	movw	r16, r28
    1756:	05 59       	subi	r16, 0x95	; 149
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	fe 01       	movw	r30, r28
    175c:	e1 59       	subi	r30, 0x91	; 145
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	4a ef       	ldi	r20, 0xFA	; 250
    176e:	54 e4       	ldi	r21, 0x44	; 68
    1770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	f8 01       	movw	r30, r16
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	a2 83       	std	Z+2, r26	; 0x02
    1780:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1782:	fe 01       	movw	r30, r28
    1784:	e5 59       	subi	r30, 0x95	; 149
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	44 f4       	brge	.+16     	; 0x17b0 <HLCD_voidInit+0x494>
		__ticks = 1;
    17a0:	fe 01       	movw	r30, r28
    17a2:	e7 59       	subi	r30, 0x97	; 151
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	80 83       	st	Z, r24
    17ae:	64 c0       	rjmp	.+200    	; 0x1878 <HLCD_voidInit+0x55c>
	else if (__tmp > 65535)
    17b0:	fe 01       	movw	r30, r28
    17b2:	e5 59       	subi	r30, 0x95	; 149
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	0c f0       	brlt	.+2      	; 0x17d0 <HLCD_voidInit+0x4b4>
    17ce:	43 c0       	rjmp	.+134    	; 0x1856 <HLCD_voidInit+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	fe 01       	movw	r30, r28
    17d2:	e1 59       	subi	r30, 0x91	; 145
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	8e 01       	movw	r16, r28
    17f0:	07 59       	subi	r16, 0x97	; 151
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	f8 01       	movw	r30, r16
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	80 83       	st	Z, r24
    1806:	1f c0       	rjmp	.+62     	; 0x1846 <HLCD_voidInit+0x52a>
    1808:	fe 01       	movw	r30, r28
    180a:	e9 59       	subi	r30, 0x99	; 153
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	88 ec       	ldi	r24, 0xC8	; 200
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1816:	fe 01       	movw	r30, r28
    1818:	e9 59       	subi	r30, 0x99	; 153
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	80 81       	ld	r24, Z
    181e:	91 81       	ldd	r25, Z+1	; 0x01
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <HLCD_voidInit+0x504>
    1824:	fe 01       	movw	r30, r28
    1826:	e9 59       	subi	r30, 0x99	; 153
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182e:	de 01       	movw	r26, r28
    1830:	a7 59       	subi	r26, 0x97	; 151
    1832:	bf 4f       	sbci	r27, 0xFF	; 255
    1834:	fe 01       	movw	r30, r28
    1836:	e7 59       	subi	r30, 0x97	; 151
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	91 81       	ldd	r25, Z+1	; 0x01
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	9c 93       	st	X, r25
    1844:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	fe 01       	movw	r30, r28
    1848:	e7 59       	subi	r30, 0x97	; 151
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	d1 f6       	brne	.-76     	; 0x1808 <HLCD_voidInit+0x4ec>
    1854:	27 c0       	rjmp	.+78     	; 0x18a4 <HLCD_voidInit+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	8e 01       	movw	r16, r28
    1858:	07 59       	subi	r16, 0x97	; 151
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	fe 01       	movw	r30, r28
    185e:	e5 59       	subi	r30, 0x95	; 149
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	f8 01       	movw	r30, r16
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	de 01       	movw	r26, r28
    187a:	ab 59       	subi	r26, 0x9B	; 155
    187c:	bf 4f       	sbci	r27, 0xFF	; 255
    187e:	fe 01       	movw	r30, r28
    1880:	e7 59       	subi	r30, 0x97	; 151
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	8d 93       	st	X+, r24
    188a:	9c 93       	st	X, r25
    188c:	fe 01       	movw	r30, r28
    188e:	eb 59       	subi	r30, 0x9B	; 155
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	91 81       	ldd	r25, Z+1	; 0x01
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <HLCD_voidInit+0x57a>
    189a:	fe 01       	movw	r30, r28
    189c:	eb 59       	subi	r30, 0x9B	; 155
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	80 83       	st	Z, r24

	_delay_ms(5); /* min 4.1ms */

	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D4,DIO_HIGH);
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	62 e0       	ldi	r22, 0x02	; 2
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D5,DIO_HIGH);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	63 e0       	ldi	r22, 0x03	; 3
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D6,DIO_LOW);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	64 e0       	ldi	r22, 0x04	; 4
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D7,DIO_LOW);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	65 e0       	ldi	r22, 0x05	; 5
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    18cc:	82 e0       	ldi	r24, 0x02	; 2
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	63 e0       	ldi	r22, 0x03	; 3
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    18ea:	fe 01       	movw	r30, r28
    18ec:	ef 59       	subi	r30, 0x9F	; 159
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	80 83       	st	Z, r24
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	a2 83       	std	Z+2, r26	; 0x02
    18fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1900:	8e 01       	movw	r16, r28
    1902:	03 5a       	subi	r16, 0xA3	; 163
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	ef 59       	subi	r30, 0x9F	; 159
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	2b ea       	ldi	r18, 0xAB	; 171
    1916:	3a ea       	ldi	r19, 0xAA	; 170
    1918:	4a e2       	ldi	r20, 0x2A	; 42
    191a:	50 e4       	ldi	r21, 0x40	; 64
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	80 83       	st	Z, r24
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    192e:	fe 01       	movw	r30, r28
    1930:	e3 5a       	subi	r30, 0xA3	; 163
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	34 f4       	brge	.+12     	; 0x1958 <HLCD_voidInit+0x63c>
		__ticks = 1;
    194c:	fe 01       	movw	r30, r28
    194e:	e4 5a       	subi	r30, 0xA4	; 164
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	80 83       	st	Z, r24
    1956:	e0 c0       	rjmp	.+448    	; 0x1b18 <HLCD_voidInit+0x7fc>
	else if (__tmp > 255)
    1958:	fe 01       	movw	r30, r28
    195a:	e3 5a       	subi	r30, 0xA3	; 163
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	53 e4       	ldi	r21, 0x43	; 67
    196e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	0c f0       	brlt	.+2      	; 0x1978 <HLCD_voidInit+0x65c>
    1976:	c0 c0       	rjmp	.+384    	; 0x1af8 <HLCD_voidInit+0x7dc>
	{
		_delay_ms(__us / 1000.0);
    1978:	fe 01       	movw	r30, r28
    197a:	ef 59       	subi	r30, 0x9F	; 159
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a e7       	ldi	r20, 0x7A	; 122
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	fe 01       	movw	r30, r28
    1998:	e8 5a       	subi	r30, 0xA8	; 168
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 83       	st	Z, r24
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	a2 83       	std	Z+2, r26	; 0x02
    19a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	8e 01       	movw	r16, r28
    19a6:	0c 5a       	subi	r16, 0xAC	; 172
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
    19aa:	fe 01       	movw	r30, r28
    19ac:	e8 5a       	subi	r30, 0xA8	; 168
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	4a ef       	ldi	r20, 0xFA	; 250
    19be:	54 e4       	ldi	r21, 0x44	; 68
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	f8 01       	movw	r30, r16
    19ca:	80 83       	st	Z, r24
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	a2 83       	std	Z+2, r26	; 0x02
    19d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d2:	fe 01       	movw	r30, r28
    19d4:	ec 5a       	subi	r30, 0xAC	; 172
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e8       	ldi	r20, 0x80	; 128
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ec:	88 23       	and	r24, r24
    19ee:	44 f4       	brge	.+16     	; 0x1a00 <HLCD_voidInit+0x6e4>
		__ticks = 1;
    19f0:	fe 01       	movw	r30, r28
    19f2:	ee 5a       	subi	r30, 0xAE	; 174
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	91 83       	std	Z+1, r25	; 0x01
    19fc:	80 83       	st	Z, r24
    19fe:	64 c0       	rjmp	.+200    	; 0x1ac8 <HLCD_voidInit+0x7ac>
	else if (__tmp > 65535)
    1a00:	fe 01       	movw	r30, r28
    1a02:	ec 5a       	subi	r30, 0xAC	; 172
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	0c f0       	brlt	.+2      	; 0x1a20 <HLCD_voidInit+0x704>
    1a1e:	43 c0       	rjmp	.+134    	; 0x1aa6 <HLCD_voidInit+0x78a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	fe 01       	movw	r30, r28
    1a22:	e8 5a       	subi	r30, 0xA8	; 168
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8e 01       	movw	r16, r28
    1a40:	0e 5a       	subi	r16, 0xAE	; 174
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	f8 01       	movw	r30, r16
    1a52:	91 83       	std	Z+1, r25	; 0x01
    1a54:	80 83       	st	Z, r24
    1a56:	1f c0       	rjmp	.+62     	; 0x1a96 <HLCD_voidInit+0x77a>
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e0 5b       	subi	r30, 0xB0	; 176
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	88 ec       	ldi	r24, 0xC8	; 200
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
    1a66:	fe 01       	movw	r30, r28
    1a68:	e0 5b       	subi	r30, 0xB0	; 176
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <HLCD_voidInit+0x754>
    1a74:	fe 01       	movw	r30, r28
    1a76:	e0 5b       	subi	r30, 0xB0	; 176
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	de 01       	movw	r26, r28
    1a80:	ae 5a       	subi	r26, 0xAE	; 174
    1a82:	bf 4f       	sbci	r27, 0xFF	; 255
    1a84:	fe 01       	movw	r30, r28
    1a86:	ee 5a       	subi	r30, 0xAE	; 174
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	11 96       	adiw	r26, 0x01	; 1
    1a92:	9c 93       	st	X, r25
    1a94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	fe 01       	movw	r30, r28
    1a98:	ee 5a       	subi	r30, 0xAE	; 174
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	d1 f6       	brne	.-76     	; 0x1a58 <HLCD_voidInit+0x73c>
    1aa4:	4b c0       	rjmp	.+150    	; 0x1b3c <HLCD_voidInit+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa6:	8e 01       	movw	r16, r28
    1aa8:	0e 5a       	subi	r16, 0xAE	; 174
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	fe 01       	movw	r30, r28
    1aae:	ec 5a       	subi	r30, 0xAC	; 172
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
    1ac8:	de 01       	movw	r26, r28
    1aca:	a2 5b       	subi	r26, 0xB2	; 178
    1acc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ee 5a       	subi	r30, 0xAE	; 174
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	11 96       	adiw	r26, 0x01	; 1
    1ada:	9c 93       	st	X, r25
    1adc:	8e 93       	st	-X, r24
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e2 5b       	subi	r30, 0xB2	; 178
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <HLCD_voidInit+0x7cc>
    1aec:	fe 01       	movw	r30, r28
    1aee:	e2 5b       	subi	r30, 0xB2	; 178
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	80 83       	st	Z, r24
    1af6:	22 c0       	rjmp	.+68     	; 0x1b3c <HLCD_voidInit+0x820>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1af8:	8e 01       	movw	r16, r28
    1afa:	04 5a       	subi	r16, 0xA4	; 164
    1afc:	1f 4f       	sbci	r17, 0xFF	; 255
    1afe:	fe 01       	movw	r30, r28
    1b00:	e3 5a       	subi	r30, 0xA3	; 163
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	f8 01       	movw	r30, r16
    1b16:	80 83       	st	Z, r24
    1b18:	de 01       	movw	r26, r28
    1b1a:	a3 5b       	subi	r26, 0xB3	; 179
    1b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e4 5a       	subi	r30, 0xA4	; 164
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e3 5b       	subi	r30, 0xB3	; 179
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	8a 95       	dec	r24
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <HLCD_voidInit+0x814>
    1b34:	fe 01       	movw	r30, r28
    1b36:	e3 5b       	subi	r30, 0xB3	; 179
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	80 83       	st	Z, r24
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    1b3c:	82 e0       	ldi	r24, 0x02	; 2
    1b3e:	63 e0       	ldi	r22, 0x03	; 3
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    1b46:	fe 01       	movw	r30, r28
    1b48:	e7 5b       	subi	r30, 0xB7	; 183
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e8       	ldi	r26, 0x80	; 128
    1b52:	bf e3       	ldi	r27, 0x3F	; 63
    1b54:	80 83       	st	Z, r24
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	a2 83       	std	Z+2, r26	; 0x02
    1b5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	8e 01       	movw	r16, r28
    1b5e:	0b 5b       	subi	r16, 0xBB	; 187
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	fe 01       	movw	r30, r28
    1b64:	e7 5b       	subi	r30, 0xB7	; 183
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a ef       	ldi	r20, 0xFA	; 250
    1b76:	54 e4       	ldi	r21, 0x44	; 68
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	f8 01       	movw	r30, r16
    1b82:	80 83       	st	Z, r24
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	a2 83       	std	Z+2, r26	; 0x02
    1b88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	eb 5b       	subi	r30, 0xBB	; 187
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	60 81       	ld	r22, Z
    1b92:	71 81       	ldd	r23, Z+1	; 0x01
    1b94:	82 81       	ldd	r24, Z+2	; 0x02
    1b96:	93 81       	ldd	r25, Z+3	; 0x03
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	44 f4       	brge	.+16     	; 0x1bb8 <HLCD_voidInit+0x89c>
		__ticks = 1;
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ed 5b       	subi	r30, 0xBD	; 189
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	80 83       	st	Z, r24
    1bb6:	64 c0       	rjmp	.+200    	; 0x1c80 <HLCD_voidInit+0x964>
	else if (__tmp > 65535)
    1bb8:	fe 01       	movw	r30, r28
    1bba:	eb 5b       	subi	r30, 0xBB	; 187
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	57 e4       	ldi	r21, 0x47	; 71
    1bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	0c f0       	brlt	.+2      	; 0x1bd8 <HLCD_voidInit+0x8bc>
    1bd6:	43 c0       	rjmp	.+134    	; 0x1c5e <HLCD_voidInit+0x942>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e7 5b       	subi	r30, 0xB7	; 183
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e2       	ldi	r20, 0x20	; 32
    1bec:	51 e4       	ldi	r21, 0x41	; 65
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	8e 01       	movw	r16, r28
    1bf8:	0d 5b       	subi	r16, 0xBD	; 189
    1bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	f8 01       	movw	r30, r16
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	80 83       	st	Z, r24
    1c0e:	1f c0       	rjmp	.+62     	; 0x1c4e <HLCD_voidInit+0x932>
    1c10:	fe 01       	movw	r30, r28
    1c12:	ef 5b       	subi	r30, 0xBF	; 191
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	88 ec       	ldi	r24, 0xC8	; 200
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ef 5b       	subi	r30, 0xBF	; 191
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <HLCD_voidInit+0x90c>
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	ef 5b       	subi	r30, 0xBF	; 191
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c36:	de 01       	movw	r26, r28
    1c38:	ad 5b       	subi	r26, 0xBD	; 189
    1c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	ed 5b       	subi	r30, 0xBD	; 189
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	11 96       	adiw	r26, 0x01	; 1
    1c4a:	9c 93       	st	X, r25
    1c4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ed 5b       	subi	r30, 0xBD	; 189
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 81       	ld	r24, Z
    1c56:	91 81       	ldd	r25, Z+1	; 0x01
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	d1 f6       	brne	.-76     	; 0x1c10 <HLCD_voidInit+0x8f4>
    1c5c:	24 c0       	rjmp	.+72     	; 0x1ca6 <HLCD_voidInit+0x98a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5e:	8e 01       	movw	r16, r28
    1c60:	0d 5b       	subi	r16, 0xBD	; 189
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	fe 01       	movw	r30, r28
    1c66:	eb 5b       	subi	r30, 0xBB	; 187
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	fe 01       	movw	r30, r28
    1c82:	ed 5b       	subi	r30, 0xBD	; 189
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	ff 96       	adiw	r30, 0x3f	; 63
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
    1c92:	fe 01       	movw	r30, r28
    1c94:	ff 96       	adiw	r30, 0x3f	; 63
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <HLCD_voidInit+0x97e>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ff 96       	adiw	r30, 0x3f	; 63
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24

	_delay_ms(1);

	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D4,DIO_HIGH);
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	62 e0       	ldi	r22, 0x02	; 2
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D5,DIO_HIGH);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	63 e0       	ldi	r22, 0x03	; 3
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D6,DIO_LOW);
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	64 e0       	ldi	r22, 0x04	; 4
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D7,DIO_LOW);
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	65 e0       	ldi	r22, 0x05	; 5
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	63 e0       	ldi	r22, 0x03	; 3
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a0 e8       	ldi	r26, 0x80	; 128
    1cf2:	bf e3       	ldi	r27, 0x3F	; 63
    1cf4:	8b af       	std	Y+59, r24	; 0x3b
    1cf6:	9c af       	std	Y+60, r25	; 0x3c
    1cf8:	ad af       	std	Y+61, r26	; 0x3d
    1cfa:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cfc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cfe:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d04:	2b ea       	ldi	r18, 0xAB	; 171
    1d06:	3a ea       	ldi	r19, 0xAA	; 170
    1d08:	4a e2       	ldi	r20, 0x2A	; 42
    1d0a:	50 e4       	ldi	r21, 0x40	; 64
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8f ab       	std	Y+55, r24	; 0x37
    1d16:	98 af       	std	Y+56, r25	; 0x38
    1d18:	a9 af       	std	Y+57, r26	; 0x39
    1d1a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1d1c:	6f a9       	ldd	r22, Y+55	; 0x37
    1d1e:	78 ad       	ldd	r23, Y+56	; 0x38
    1d20:	89 ad       	ldd	r24, Y+57	; 0x39
    1d22:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	1c f4       	brge	.+6      	; 0x1d3a <HLCD_voidInit+0xa1e>
		__ticks = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	8e ab       	std	Y+54, r24	; 0x36
    1d38:	91 c0       	rjmp	.+290    	; 0x1e5c <HLCD_voidInit+0xb40>
	else if (__tmp > 255)
    1d3a:	6f a9       	ldd	r22, Y+55	; 0x37
    1d3c:	78 ad       	ldd	r23, Y+56	; 0x38
    1d3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d40:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	53 e4       	ldi	r21, 0x43	; 67
    1d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	0c f0       	brlt	.+2      	; 0x1d54 <HLCD_voidInit+0xa38>
    1d52:	7b c0       	rjmp	.+246    	; 0x1e4a <HLCD_voidInit+0xb2e>
	{
		_delay_ms(__us / 1000.0);
    1d54:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d56:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a e7       	ldi	r20, 0x7A	; 122
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8a ab       	std	Y+50, r24	; 0x32
    1d6e:	9b ab       	std	Y+51, r25	; 0x33
    1d70:	ac ab       	std	Y+52, r26	; 0x34
    1d72:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	6a a9       	ldd	r22, Y+50	; 0x32
    1d76:	7b a9       	ldd	r23, Y+51	; 0x33
    1d78:	8c a9       	ldd	r24, Y+52	; 0x34
    1d7a:	9d a9       	ldd	r25, Y+53	; 0x35
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a ef       	ldi	r20, 0xFA	; 250
    1d82:	54 e4       	ldi	r21, 0x44	; 68
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8e a7       	std	Y+46, r24	; 0x2e
    1d8e:	9f a7       	std	Y+47, r25	; 0x2f
    1d90:	a8 ab       	std	Y+48, r26	; 0x30
    1d92:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1d94:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d96:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d98:	88 a9       	ldd	r24, Y+48	; 0x30
    1d9a:	99 a9       	ldd	r25, Y+49	; 0x31
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <HLCD_voidInit+0xa9a>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9d a7       	std	Y+45, r25	; 0x2d
    1db2:	8c a7       	std	Y+44, r24	; 0x2c
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <HLCD_voidInit+0xb18>
	else if (__tmp > 65535)
    1db6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1db8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1dba:	88 a9       	ldd	r24, Y+48	; 0x30
    1dbc:	99 a9       	ldd	r25, Y+49	; 0x31
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <HLCD_voidInit+0xb04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	6a a9       	ldd	r22, Y+50	; 0x32
    1dd0:	7b a9       	ldd	r23, Y+51	; 0x33
    1dd2:	8c a9       	ldd	r24, Y+52	; 0x34
    1dd4:	9d a9       	ldd	r25, Y+53	; 0x35
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9d a7       	std	Y+45, r25	; 0x2d
    1df4:	8c a7       	std	Y+44, r24	; 0x2c
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <HLCD_voidInit+0xafa>
    1df8:	88 ec       	ldi	r24, 0xC8	; 200
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9b a7       	std	Y+43, r25	; 0x2b
    1dfe:	8a a7       	std	Y+42, r24	; 0x2a
    1e00:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e02:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <HLCD_voidInit+0xae8>
    1e08:	9b a7       	std	Y+43, r25	; 0x2b
    1e0a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e0e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9d a7       	std	Y+45, r25	; 0x2d
    1e14:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e18:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <HLCD_voidInit+0xadc>
    1e1e:	24 c0       	rjmp	.+72     	; 0x1e68 <HLCD_voidInit+0xb4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e22:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e24:	88 a9       	ldd	r24, Y+48	; 0x30
    1e26:	99 a9       	ldd	r25, Y+49	; 0x31
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9d a7       	std	Y+45, r25	; 0x2d
    1e32:	8c a7       	std	Y+44, r24	; 0x2c
    1e34:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e36:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e38:	99 a7       	std	Y+41, r25	; 0x29
    1e3a:	88 a7       	std	Y+40, r24	; 0x28
    1e3c:	88 a5       	ldd	r24, Y+40	; 0x28
    1e3e:	99 a5       	ldd	r25, Y+41	; 0x29
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <HLCD_voidInit+0xb24>
    1e44:	99 a7       	std	Y+41, r25	; 0x29
    1e46:	88 a7       	std	Y+40, r24	; 0x28
    1e48:	0f c0       	rjmp	.+30     	; 0x1e68 <HLCD_voidInit+0xb4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e4a:	6f a9       	ldd	r22, Y+55	; 0x37
    1e4c:	78 ad       	ldd	r23, Y+56	; 0x38
    1e4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	8e ab       	std	Y+54, r24	; 0x36
    1e5c:	8e a9       	ldd	r24, Y+54	; 0x36
    1e5e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e60:	8f a1       	ldd	r24, Y+39	; 0x27
    1e62:	8a 95       	dec	r24
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <HLCD_voidInit+0xb46>
    1e66:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	63 e0       	ldi	r22, 0x03	; 3
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>


	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D4,DIO_LOW);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D5,DIO_HIGH);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	63 e0       	ldi	r22, 0x03	; 3
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D6,DIO_LOW);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	64 e0       	ldi	r22, 0x04	; 4
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D7,DIO_LOW);
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	65 e0       	ldi	r22, 0x05	; 5
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW); 	/* RS=0, command  */
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW); 	/* RW=0, command Write */
    1ea4:	82 e0       	ldi	r24, 0x02	; 2
    1ea6:	61 e0       	ldi	r22, 0x01	; 1
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	63 e0       	ldi	r22, 0x03	; 3
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e8       	ldi	r26, 0x80	; 128
    1ebe:	bf e3       	ldi	r27, 0x3F	; 63
    1ec0:	8b a3       	std	Y+35, r24	; 0x23
    1ec2:	9c a3       	std	Y+36, r25	; 0x24
    1ec4:	ad a3       	std	Y+37, r26	; 0x25
    1ec6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ec8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ecc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ece:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed0:	2b ea       	ldi	r18, 0xAB	; 171
    1ed2:	3a ea       	ldi	r19, 0xAA	; 170
    1ed4:	4a e2       	ldi	r20, 0x2A	; 42
    1ed6:	50 e4       	ldi	r21, 0x40	; 64
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ee2:	98 a3       	std	Y+32, r25	; 0x20
    1ee4:	a9 a3       	std	Y+33, r26	; 0x21
    1ee6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ee8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1eea:	78 a1       	ldd	r23, Y+32	; 0x20
    1eec:	89 a1       	ldd	r24, Y+33	; 0x21
    1eee:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	1c f4       	brge	.+6      	; 0x1f06 <HLCD_voidInit+0xbea>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	8e 8f       	std	Y+30, r24	; 0x1e
    1f04:	91 c0       	rjmp	.+290    	; 0x2028 <HLCD_voidInit+0xd0c>
	else if (__tmp > 255)
    1f06:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f08:	78 a1       	ldd	r23, Y+32	; 0x20
    1f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	53 e4       	ldi	r21, 0x43	; 67
    1f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	0c f0       	brlt	.+2      	; 0x1f20 <HLCD_voidInit+0xc04>
    1f1e:	7b c0       	rjmp	.+246    	; 0x2016 <HLCD_voidInit+0xcfa>
	{
		_delay_ms(__us / 1000.0);
    1f20:	6b a1       	ldd	r22, Y+35	; 0x23
    1f22:	7c a1       	ldd	r23, Y+36	; 0x24
    1f24:	8d a1       	ldd	r24, Y+37	; 0x25
    1f26:	9e a1       	ldd	r25, Y+38	; 0x26
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a e7       	ldi	r20, 0x7A	; 122
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8a 8f       	std	Y+26, r24	; 0x1a
    1f3a:	9b 8f       	std	Y+27, r25	; 0x1b
    1f3c:	ac 8f       	std	Y+28, r26	; 0x1c
    1f3e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f42:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f46:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a ef       	ldi	r20, 0xFA	; 250
    1f4e:	54 e4       	ldi	r21, 0x44	; 68
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8e 8b       	std	Y+22, r24	; 0x16
    1f5a:	9f 8b       	std	Y+23, r25	; 0x17
    1f5c:	a8 8f       	std	Y+24, r26	; 0x18
    1f5e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1f60:	6e 89       	ldd	r22, Y+22	; 0x16
    1f62:	7f 89       	ldd	r23, Y+23	; 0x17
    1f64:	88 8d       	ldd	r24, Y+24	; 0x18
    1f66:	99 8d       	ldd	r25, Y+25	; 0x19
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <HLCD_voidInit+0xc66>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9d 8b       	std	Y+21, r25	; 0x15
    1f7e:	8c 8b       	std	Y+20, r24	; 0x14
    1f80:	3f c0       	rjmp	.+126    	; 0x2000 <HLCD_voidInit+0xce4>
	else if (__tmp > 65535)
    1f82:	6e 89       	ldd	r22, Y+22	; 0x16
    1f84:	7f 89       	ldd	r23, Y+23	; 0x17
    1f86:	88 8d       	ldd	r24, Y+24	; 0x18
    1f88:	99 8d       	ldd	r25, Y+25	; 0x19
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	4c f5       	brge	.+82     	; 0x1fec <HLCD_voidInit+0xcd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f9c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fa0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9d 8b       	std	Y+21, r25	; 0x15
    1fc0:	8c 8b       	std	Y+20, r24	; 0x14
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <HLCD_voidInit+0xcc6>
    1fc4:	88 ec       	ldi	r24, 0xC8	; 200
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9b 8b       	std	Y+19, r25	; 0x13
    1fca:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fcc:	8a 89       	ldd	r24, Y+18	; 0x12
    1fce:	9b 89       	ldd	r25, Y+19	; 0x13
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <HLCD_voidInit+0xcb4>
    1fd4:	9b 8b       	std	Y+19, r25	; 0x13
    1fd6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	8c 89       	ldd	r24, Y+20	; 0x14
    1fda:	9d 89       	ldd	r25, Y+21	; 0x15
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	9d 8b       	std	Y+21, r25	; 0x15
    1fe0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	8c 89       	ldd	r24, Y+20	; 0x14
    1fe4:	9d 89       	ldd	r25, Y+21	; 0x15
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <HLCD_voidInit+0xca8>
    1fea:	24 c0       	rjmp	.+72     	; 0x2034 <HLCD_voidInit+0xd18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	6e 89       	ldd	r22, Y+22	; 0x16
    1fee:	7f 89       	ldd	r23, Y+23	; 0x17
    1ff0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ff2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9d 8b       	std	Y+21, r25	; 0x15
    1ffe:	8c 8b       	std	Y+20, r24	; 0x14
    2000:	8c 89       	ldd	r24, Y+20	; 0x14
    2002:	9d 89       	ldd	r25, Y+21	; 0x15
    2004:	99 8b       	std	Y+17, r25	; 0x11
    2006:	88 8b       	std	Y+16, r24	; 0x10
    2008:	88 89       	ldd	r24, Y+16	; 0x10
    200a:	99 89       	ldd	r25, Y+17	; 0x11
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <HLCD_voidInit+0xcf0>
    2010:	99 8b       	std	Y+17, r25	; 0x11
    2012:	88 8b       	std	Y+16, r24	; 0x10
    2014:	0f c0       	rjmp	.+30     	; 0x2034 <HLCD_voidInit+0xd18>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2016:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2018:	78 a1       	ldd	r23, Y+32	; 0x20
    201a:	89 a1       	ldd	r24, Y+33	; 0x21
    201c:	9a a1       	ldd	r25, Y+34	; 0x22
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8e 8f       	std	Y+30, r24	; 0x1e
    2028:	8e 8d       	ldd	r24, Y+30	; 0x1e
    202a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    202c:	8f 85       	ldd	r24, Y+15	; 0x0f
    202e:	8a 95       	dec	r24
    2030:	f1 f7       	brne	.-4      	; 0x202e <HLCD_voidInit+0xd12>
    2032:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	63 e0       	ldi	r22, 0x03	; 3
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	HLCD_voidSendCommand(0x02); 	/*CMD for 4bit		*/
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	0e 94 5e 14 	call	0x28bc	; 0x28bc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);		/* Enabling 2lies 5*7   */
    2044:	88 e2       	ldi	r24, 0x28	; 40
    2046:	0e 94 5e 14 	call	0x28bc	; 0x28bc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x0c); 	/* setting cursor on and off */
    204a:	8c e0       	ldi	r24, 0x0C	; 12
    204c:	0e 94 5e 14 	call	0x28bc	; 0x28bc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);		/* Increment cursor (shift cursor to right)	*/
    2050:	86 e0       	ldi	r24, 0x06	; 6
    2052:	0e 94 5e 14 	call	0x28bc	; 0x28bc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);		/* Clear display screen */
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	0e 94 5e 14 	call	0x28bc	; 0x28bc <HLCD_voidSendCommand>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	b0 e4       	ldi	r27, 0x40	; 64
    2064:	8b 87       	std	Y+11, r24	; 0x0b
    2066:	9c 87       	std	Y+12, r25	; 0x0c
    2068:	ad 87       	std	Y+13, r26	; 0x0d
    206a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206c:	6b 85       	ldd	r22, Y+11	; 0x0b
    206e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2070:	8d 85       	ldd	r24, Y+13	; 0x0d
    2072:	9e 85       	ldd	r25, Y+14	; 0x0e
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a ef       	ldi	r20, 0xFA	; 250
    207a:	54 e4       	ldi	r21, 0x44	; 68
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	8f 83       	std	Y+7, r24	; 0x07
    2086:	98 87       	std	Y+8, r25	; 0x08
    2088:	a9 87       	std	Y+9, r26	; 0x09
    208a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    208c:	6f 81       	ldd	r22, Y+7	; 0x07
    208e:	78 85       	ldd	r23, Y+8	; 0x08
    2090:	89 85       	ldd	r24, Y+9	; 0x09
    2092:	9a 85       	ldd	r25, Y+10	; 0x0a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	2c f4       	brge	.+10     	; 0x20ae <HLCD_voidInit+0xd92>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	3f c0       	rjmp	.+126    	; 0x212c <HLCD_voidInit+0xe10>
	else if (__tmp > 65535)
    20ae:	6f 81       	ldd	r22, Y+7	; 0x07
    20b0:	78 85       	ldd	r23, Y+8	; 0x08
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	4c f5       	brge	.+82     	; 0x2118 <HLCD_voidInit+0xdfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	9e 83       	std	Y+6, r25	; 0x06
    20ec:	8d 83       	std	Y+5, r24	; 0x05
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <HLCD_voidInit+0xdf2>
    20f0:	88 ec       	ldi	r24, 0xC8	; 200
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9c 83       	std	Y+4, r25	; 0x04
    20f6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <HLCD_voidInit+0xde0>
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	69 f7       	brne	.-38     	; 0x20f0 <HLCD_voidInit+0xdd4>
    2116:	14 c0       	rjmp	.+40     	; 0x2140 <HLCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2118:	6f 81       	ldd	r22, Y+7	; 0x07
    211a:	78 85       	ldd	r23, Y+8	; 0x08
    211c:	89 85       	ldd	r24, Y+9	; 0x09
    211e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	9a 81       	ldd	r25, Y+2	; 0x02
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <HLCD_voidInit+0xe1c>
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    2140:	c8 56       	subi	r28, 0x68	; 104
    2142:	df 4f       	sbci	r29, 0xFF	; 255
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	08 95       	ret

00002158 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 Copy_u8Data){
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	c7 55       	subi	r28, 0x57	; 87
    2166:	d0 40       	sbci	r29, 0x00	; 0
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	fe 01       	movw	r30, r28
    2174:	e9 5a       	subi	r30, 0xA9	; 169
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 83       	st	Z, r24

	/*Sending Data upper nibble*/
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D4,((Copy_u8Data>>4)&1));
    217a:	fe 01       	movw	r30, r28
    217c:	e9 5a       	subi	r30, 0xA9	; 169
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 81       	ld	r24, Z
    2182:	82 95       	swap	r24
    2184:	8f 70       	andi	r24, 0x0F	; 15
    2186:	98 2f       	mov	r25, r24
    2188:	91 70       	andi	r25, 0x01	; 1
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	62 e0       	ldi	r22, 0x02	; 2
    218e:	49 2f       	mov	r20, r25
    2190:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D5,((Copy_u8Data>>5)&1));
    2194:	fe 01       	movw	r30, r28
    2196:	e9 5a       	subi	r30, 0xA9	; 169
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	82 95       	swap	r24
    219e:	86 95       	lsr	r24
    21a0:	87 70       	andi	r24, 0x07	; 7
    21a2:	98 2f       	mov	r25, r24
    21a4:	91 70       	andi	r25, 0x01	; 1
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	63 e0       	ldi	r22, 0x03	; 3
    21aa:	49 2f       	mov	r20, r25
    21ac:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D6,((Copy_u8Data>>6)&1));
    21b0:	fe 01       	movw	r30, r28
    21b2:	e9 5a       	subi	r30, 0xA9	; 169
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	82 95       	swap	r24
    21ba:	86 95       	lsr	r24
    21bc:	86 95       	lsr	r24
    21be:	83 70       	andi	r24, 0x03	; 3
    21c0:	98 2f       	mov	r25, r24
    21c2:	91 70       	andi	r25, 0x01	; 1
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	64 e0       	ldi	r22, 0x04	; 4
    21c8:	49 2f       	mov	r20, r25
    21ca:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D7,((Copy_u8Data>>7)&1));
    21ce:	fe 01       	movw	r30, r28
    21d0:	e9 5a       	subi	r30, 0xA9	; 169
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 81       	ld	r24, Z
    21d6:	98 2f       	mov	r25, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	99 27       	eor	r25, r25
    21dc:	99 1f       	adc	r25, r25
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	65 e0       	ldi	r22, 0x05	; 5
    21e2:	49 2f       	mov	r20, r25
    21e4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_HIGH);	/*	SET RS to send data */
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);	/*	CLR RW to Enable write */
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	/* set EN for 2ms to make LCD CPU reads the data  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	63 e0       	ldi	r22, 0x03	; 3
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    2206:	fe 01       	movw	r30, r28
    2208:	ed 5a       	subi	r30, 0xAD	; 173
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	a0 e8       	ldi	r26, 0x80	; 128
    2212:	bf e3       	ldi	r27, 0x3F	; 63
    2214:	80 83       	st	Z, r24
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	a2 83       	std	Z+2, r26	; 0x02
    221a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    221c:	8e 01       	movw	r16, r28
    221e:	01 5b       	subi	r16, 0xB1	; 177
    2220:	1f 4f       	sbci	r17, 0xFF	; 255
    2222:	fe 01       	movw	r30, r28
    2224:	ed 5a       	subi	r30, 0xAD	; 173
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	60 81       	ld	r22, Z
    222a:	71 81       	ldd	r23, Z+1	; 0x01
    222c:	82 81       	ldd	r24, Z+2	; 0x02
    222e:	93 81       	ldd	r25, Z+3	; 0x03
    2230:	2b ea       	ldi	r18, 0xAB	; 171
    2232:	3a ea       	ldi	r19, 0xAA	; 170
    2234:	4a e2       	ldi	r20, 0x2A	; 42
    2236:	50 e4       	ldi	r21, 0x40	; 64
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	f8 01       	movw	r30, r16
    2242:	80 83       	st	Z, r24
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	a2 83       	std	Z+2, r26	; 0x02
    2248:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    224a:	fe 01       	movw	r30, r28
    224c:	e1 5b       	subi	r30, 0xB1	; 177
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	60 81       	ld	r22, Z
    2252:	71 81       	ldd	r23, Z+1	; 0x01
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	34 f4       	brge	.+12     	; 0x2274 <HLCD_voidSendData+0x11c>
		__ticks = 1;
    2268:	fe 01       	movw	r30, r28
    226a:	e2 5b       	subi	r30, 0xB2	; 178
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	80 83       	st	Z, r24
    2272:	e0 c0       	rjmp	.+448    	; 0x2434 <HLCD_voidSendData+0x2dc>
	else if (__tmp > 255)
    2274:	fe 01       	movw	r30, r28
    2276:	e1 5b       	subi	r30, 0xB1	; 177
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	53 e4       	ldi	r21, 0x43	; 67
    228a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	0c f0       	brlt	.+2      	; 0x2294 <HLCD_voidSendData+0x13c>
    2292:	c0 c0       	rjmp	.+384    	; 0x2414 <HLCD_voidSendData+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    2294:	fe 01       	movw	r30, r28
    2296:	ed 5a       	subi	r30, 0xAD	; 173
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	60 81       	ld	r22, Z
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	93 81       	ldd	r25, Z+3	; 0x03
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a e7       	ldi	r20, 0x7A	; 122
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	fe 01       	movw	r30, r28
    22b4:	e6 5b       	subi	r30, 0xB6	; 182
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 83       	st	Z, r24
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	a2 83       	std	Z+2, r26	; 0x02
    22be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	8e 01       	movw	r16, r28
    22c2:	0a 5b       	subi	r16, 0xBA	; 186
    22c4:	1f 4f       	sbci	r17, 0xFF	; 255
    22c6:	fe 01       	movw	r30, r28
    22c8:	e6 5b       	subi	r30, 0xB6	; 182
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a ef       	ldi	r20, 0xFA	; 250
    22da:	54 e4       	ldi	r21, 0x44	; 68
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	f8 01       	movw	r30, r16
    22e6:	80 83       	st	Z, r24
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	a2 83       	std	Z+2, r26	; 0x02
    22ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ee:	fe 01       	movw	r30, r28
    22f0:	ea 5b       	subi	r30, 0xBA	; 186
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	60 81       	ld	r22, Z
    22f6:	71 81       	ldd	r23, Z+1	; 0x01
    22f8:	82 81       	ldd	r24, Z+2	; 0x02
    22fa:	93 81       	ldd	r25, Z+3	; 0x03
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e8       	ldi	r20, 0x80	; 128
    2302:	5f e3       	ldi	r21, 0x3F	; 63
    2304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2308:	88 23       	and	r24, r24
    230a:	44 f4       	brge	.+16     	; 0x231c <HLCD_voidSendData+0x1c4>
		__ticks = 1;
    230c:	fe 01       	movw	r30, r28
    230e:	ec 5b       	subi	r30, 0xBC	; 188
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	91 83       	std	Z+1, r25	; 0x01
    2318:	80 83       	st	Z, r24
    231a:	64 c0       	rjmp	.+200    	; 0x23e4 <HLCD_voidSendData+0x28c>
	else if (__tmp > 65535)
    231c:	fe 01       	movw	r30, r28
    231e:	ea 5b       	subi	r30, 0xBA	; 186
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	60 81       	ld	r22, Z
    2324:	71 81       	ldd	r23, Z+1	; 0x01
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	3f ef       	ldi	r19, 0xFF	; 255
    232e:	4f e7       	ldi	r20, 0x7F	; 127
    2330:	57 e4       	ldi	r21, 0x47	; 71
    2332:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2336:	18 16       	cp	r1, r24
    2338:	0c f0       	brlt	.+2      	; 0x233c <HLCD_voidSendData+0x1e4>
    233a:	43 c0       	rjmp	.+134    	; 0x23c2 <HLCD_voidSendData+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233c:	fe 01       	movw	r30, r28
    233e:	e6 5b       	subi	r30, 0xB6	; 182
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	8e 01       	movw	r16, r28
    235c:	0c 5b       	subi	r16, 0xBC	; 188
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	f8 01       	movw	r30, r16
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
    2372:	1f c0       	rjmp	.+62     	; 0x23b2 <HLCD_voidSendData+0x25a>
    2374:	fe 01       	movw	r30, r28
    2376:	ee 5b       	subi	r30, 0xBE	; 190
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	88 ec       	ldi	r24, 0xC8	; 200
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	80 83       	st	Z, r24
    2382:	fe 01       	movw	r30, r28
    2384:	ee 5b       	subi	r30, 0xBE	; 190
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <HLCD_voidSendData+0x234>
    2390:	fe 01       	movw	r30, r28
    2392:	ee 5b       	subi	r30, 0xBE	; 190
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	de 01       	movw	r26, r28
    239c:	ac 5b       	subi	r26, 0xBC	; 188
    239e:	bf 4f       	sbci	r27, 0xFF	; 255
    23a0:	fe 01       	movw	r30, r28
    23a2:	ec 5b       	subi	r30, 0xBC	; 188
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 81       	ld	r24, Z
    23a8:	91 81       	ldd	r25, Z+1	; 0x01
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	11 96       	adiw	r26, 0x01	; 1
    23ae:	9c 93       	st	X, r25
    23b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	fe 01       	movw	r30, r28
    23b4:	ec 5b       	subi	r30, 0xBC	; 188
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	d1 f6       	brne	.-76     	; 0x2374 <HLCD_voidSendData+0x21c>
    23c0:	42 c0       	rjmp	.+132    	; 0x2446 <HLCD_voidSendData+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	8e 01       	movw	r16, r28
    23c4:	0c 5b       	subi	r16, 0xBC	; 188
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	fe 01       	movw	r30, r28
    23ca:	ea 5b       	subi	r30, 0xBA	; 186
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	f8 01       	movw	r30, r16
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	80 83       	st	Z, r24
    23e4:	de 01       	movw	r26, r28
    23e6:	a0 5c       	subi	r26, 0xC0	; 192
    23e8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ea:	fe 01       	movw	r30, r28
    23ec:	ec 5b       	subi	r30, 0xBC	; 188
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 81       	ld	r24, Z
    23f2:	91 81       	ldd	r25, Z+1	; 0x01
    23f4:	11 96       	adiw	r26, 0x01	; 1
    23f6:	9c 93       	st	X, r25
    23f8:	8e 93       	st	-X, r24
    23fa:	fe 01       	movw	r30, r28
    23fc:	e0 5c       	subi	r30, 0xC0	; 192
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	91 81       	ldd	r25, Z+1	; 0x01
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <HLCD_voidSendData+0x2ac>
    2408:	fe 01       	movw	r30, r28
    240a:	e0 5c       	subi	r30, 0xC0	; 192
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	80 83       	st	Z, r24
    2412:	19 c0       	rjmp	.+50     	; 0x2446 <HLCD_voidSendData+0x2ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2414:	8e 01       	movw	r16, r28
    2416:	02 5b       	subi	r16, 0xB2	; 178
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	fe 01       	movw	r30, r28
    241c:	e1 5b       	subi	r30, 0xB1	; 177
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	f8 01       	movw	r30, r16
    2432:	80 83       	st	Z, r24
    2434:	fe 01       	movw	r30, r28
    2436:	e2 5b       	subi	r30, 0xB2	; 178
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    243e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2440:	8a 95       	dec	r24
    2442:	f1 f7       	brne	.-4      	; 0x2440 <HLCD_voidSendData+0x2e8>
    2444:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	63 e0       	ldi	r22, 0x03	; 3
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	a8 e4       	ldi	r26, 0x48	; 72
    2456:	b3 e4       	ldi	r27, 0x43	; 67
    2458:	8b af       	std	Y+59, r24	; 0x3b
    245a:	9c af       	std	Y+60, r25	; 0x3c
    245c:	ad af       	std	Y+61, r26	; 0x3d
    245e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2460:	6b ad       	ldd	r22, Y+59	; 0x3b
    2462:	7c ad       	ldd	r23, Y+60	; 0x3c
    2464:	8d ad       	ldd	r24, Y+61	; 0x3d
    2466:	9e ad       	ldd	r25, Y+62	; 0x3e
    2468:	2b ea       	ldi	r18, 0xAB	; 171
    246a:	3a ea       	ldi	r19, 0xAA	; 170
    246c:	4a e2       	ldi	r20, 0x2A	; 42
    246e:	50 e4       	ldi	r21, 0x40	; 64
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	8f ab       	std	Y+55, r24	; 0x37
    247a:	98 af       	std	Y+56, r25	; 0x38
    247c:	a9 af       	std	Y+57, r26	; 0x39
    247e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2480:	6f a9       	ldd	r22, Y+55	; 0x37
    2482:	78 ad       	ldd	r23, Y+56	; 0x38
    2484:	89 ad       	ldd	r24, Y+57	; 0x39
    2486:	9a ad       	ldd	r25, Y+58	; 0x3a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	1c f4       	brge	.+6      	; 0x249e <HLCD_voidSendData+0x346>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	8e ab       	std	Y+54, r24	; 0x36
    249c:	91 c0       	rjmp	.+290    	; 0x25c0 <HLCD_voidSendData+0x468>
	else if (__tmp > 255)
    249e:	6f a9       	ldd	r22, Y+55	; 0x37
    24a0:	78 ad       	ldd	r23, Y+56	; 0x38
    24a2:	89 ad       	ldd	r24, Y+57	; 0x39
    24a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	53 e4       	ldi	r21, 0x43	; 67
    24ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	0c f0       	brlt	.+2      	; 0x24b8 <HLCD_voidSendData+0x360>
    24b6:	7b c0       	rjmp	.+246    	; 0x25ae <HLCD_voidSendData+0x456>
	{
		_delay_ms(__us / 1000.0);
    24b8:	6b ad       	ldd	r22, Y+59	; 0x3b
    24ba:	7c ad       	ldd	r23, Y+60	; 0x3c
    24bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    24be:	9e ad       	ldd	r25, Y+62	; 0x3e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a e7       	ldi	r20, 0x7A	; 122
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8a ab       	std	Y+50, r24	; 0x32
    24d2:	9b ab       	std	Y+51, r25	; 0x33
    24d4:	ac ab       	std	Y+52, r26	; 0x34
    24d6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	6a a9       	ldd	r22, Y+50	; 0x32
    24da:	7b a9       	ldd	r23, Y+51	; 0x33
    24dc:	8c a9       	ldd	r24, Y+52	; 0x34
    24de:	9d a9       	ldd	r25, Y+53	; 0x35
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4a ef       	ldi	r20, 0xFA	; 250
    24e6:	54 e4       	ldi	r21, 0x44	; 68
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8e a7       	std	Y+46, r24	; 0x2e
    24f2:	9f a7       	std	Y+47, r25	; 0x2f
    24f4:	a8 ab       	std	Y+48, r26	; 0x30
    24f6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    24f8:	6e a5       	ldd	r22, Y+46	; 0x2e
    24fa:	7f a5       	ldd	r23, Y+47	; 0x2f
    24fc:	88 a9       	ldd	r24, Y+48	; 0x30
    24fe:	99 a9       	ldd	r25, Y+49	; 0x31
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <HLCD_voidSendData+0x3c2>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9d a7       	std	Y+45, r25	; 0x2d
    2516:	8c a7       	std	Y+44, r24	; 0x2c
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <HLCD_voidSendData+0x440>
	else if (__tmp > 65535)
    251a:	6e a5       	ldd	r22, Y+46	; 0x2e
    251c:	7f a5       	ldd	r23, Y+47	; 0x2f
    251e:	88 a9       	ldd	r24, Y+48	; 0x30
    2520:	99 a9       	ldd	r25, Y+49	; 0x31
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	4c f5       	brge	.+82     	; 0x2584 <HLCD_voidSendData+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	6a a9       	ldd	r22, Y+50	; 0x32
    2534:	7b a9       	ldd	r23, Y+51	; 0x33
    2536:	8c a9       	ldd	r24, Y+52	; 0x34
    2538:	9d a9       	ldd	r25, Y+53	; 0x35
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9d a7       	std	Y+45, r25	; 0x2d
    2558:	8c a7       	std	Y+44, r24	; 0x2c
    255a:	0f c0       	rjmp	.+30     	; 0x257a <HLCD_voidSendData+0x422>
    255c:	88 ec       	ldi	r24, 0xC8	; 200
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9b a7       	std	Y+43, r25	; 0x2b
    2562:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2564:	8a a5       	ldd	r24, Y+42	; 0x2a
    2566:	9b a5       	ldd	r25, Y+43	; 0x2b
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <HLCD_voidSendData+0x410>
    256c:	9b a7       	std	Y+43, r25	; 0x2b
    256e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	8c a5       	ldd	r24, Y+44	; 0x2c
    2572:	9d a5       	ldd	r25, Y+45	; 0x2d
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9d a7       	std	Y+45, r25	; 0x2d
    2578:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	8c a5       	ldd	r24, Y+44	; 0x2c
    257c:	9d a5       	ldd	r25, Y+45	; 0x2d
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <HLCD_voidSendData+0x404>
    2582:	24 c0       	rjmp	.+72     	; 0x25cc <HLCD_voidSendData+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	6e a5       	ldd	r22, Y+46	; 0x2e
    2586:	7f a5       	ldd	r23, Y+47	; 0x2f
    2588:	88 a9       	ldd	r24, Y+48	; 0x30
    258a:	99 a9       	ldd	r25, Y+49	; 0x31
    258c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9d a7       	std	Y+45, r25	; 0x2d
    2596:	8c a7       	std	Y+44, r24	; 0x2c
    2598:	8c a5       	ldd	r24, Y+44	; 0x2c
    259a:	9d a5       	ldd	r25, Y+45	; 0x2d
    259c:	99 a7       	std	Y+41, r25	; 0x29
    259e:	88 a7       	std	Y+40, r24	; 0x28
    25a0:	88 a5       	ldd	r24, Y+40	; 0x28
    25a2:	99 a5       	ldd	r25, Y+41	; 0x29
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <HLCD_voidSendData+0x44c>
    25a8:	99 a7       	std	Y+41, r25	; 0x29
    25aa:	88 a7       	std	Y+40, r24	; 0x28
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <HLCD_voidSendData+0x474>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25ae:	6f a9       	ldd	r22, Y+55	; 0x37
    25b0:	78 ad       	ldd	r23, Y+56	; 0x38
    25b2:	89 ad       	ldd	r24, Y+57	; 0x39
    25b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	8e ab       	std	Y+54, r24	; 0x36
    25c0:	8e a9       	ldd	r24, Y+54	; 0x36
    25c2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25c4:	8f a1       	ldd	r24, Y+39	; 0x27
    25c6:	8a 95       	dec	r24
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <HLCD_voidSendData+0x46e>
    25ca:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	/*Sending Data LOWER nibble */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D4,((Copy_u8Data>>0)&1));
    25cc:	fe 01       	movw	r30, r28
    25ce:	e9 5a       	subi	r30, 0xA9	; 169
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	98 2f       	mov	r25, r24
    25d6:	91 70       	andi	r25, 0x01	; 1
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	49 2f       	mov	r20, r25
    25de:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D5,((Copy_u8Data>>1)&1));
    25e2:	fe 01       	movw	r30, r28
    25e4:	e9 5a       	subi	r30, 0xA9	; 169
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	86 95       	lsr	r24
    25ec:	98 2f       	mov	r25, r24
    25ee:	91 70       	andi	r25, 0x01	; 1
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	63 e0       	ldi	r22, 0x03	; 3
    25f4:	49 2f       	mov	r20, r25
    25f6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D6,((Copy_u8Data>>2)&1));
    25fa:	fe 01       	movw	r30, r28
    25fc:	e9 5a       	subi	r30, 0xA9	; 169
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	86 95       	lsr	r24
    2604:	86 95       	lsr	r24
    2606:	98 2f       	mov	r25, r24
    2608:	91 70       	andi	r25, 0x01	; 1
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	64 e0       	ldi	r22, 0x04	; 4
    260e:	49 2f       	mov	r20, r25
    2610:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D7,((Copy_u8Data>>3)&1));
    2614:	fe 01       	movw	r30, r28
    2616:	e9 5a       	subi	r30, 0xA9	; 169
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	86 95       	lsr	r24
    261e:	86 95       	lsr	r24
    2620:	86 95       	lsr	r24
    2622:	98 2f       	mov	r25, r24
    2624:	91 70       	andi	r25, 0x01	; 1
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	65 e0       	ldi	r22, 0x05	; 5
    262a:	49 2f       	mov	r20, r25
    262c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	63 e0       	ldi	r22, 0x03	; 3
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	a0 e8       	ldi	r26, 0x80	; 128
    2640:	bf e3       	ldi	r27, 0x3F	; 63
    2642:	8b a3       	std	Y+35, r24	; 0x23
    2644:	9c a3       	std	Y+36, r25	; 0x24
    2646:	ad a3       	std	Y+37, r26	; 0x25
    2648:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    264a:	6b a1       	ldd	r22, Y+35	; 0x23
    264c:	7c a1       	ldd	r23, Y+36	; 0x24
    264e:	8d a1       	ldd	r24, Y+37	; 0x25
    2650:	9e a1       	ldd	r25, Y+38	; 0x26
    2652:	2b ea       	ldi	r18, 0xAB	; 171
    2654:	3a ea       	ldi	r19, 0xAA	; 170
    2656:	4a e2       	ldi	r20, 0x2A	; 42
    2658:	50 e4       	ldi	r21, 0x40	; 64
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	8f 8f       	std	Y+31, r24	; 0x1f
    2664:	98 a3       	std	Y+32, r25	; 0x20
    2666:	a9 a3       	std	Y+33, r26	; 0x21
    2668:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    266a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    266c:	78 a1       	ldd	r23, Y+32	; 0x20
    266e:	89 a1       	ldd	r24, Y+33	; 0x21
    2670:	9a a1       	ldd	r25, Y+34	; 0x22
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	1c f4       	brge	.+6      	; 0x2688 <HLCD_voidSendData+0x530>
		__ticks = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	8e 8f       	std	Y+30, r24	; 0x1e
    2686:	91 c0       	rjmp	.+290    	; 0x27aa <HLCD_voidSendData+0x652>
	else if (__tmp > 255)
    2688:	6f 8d       	ldd	r22, Y+31	; 0x1f
    268a:	78 a1       	ldd	r23, Y+32	; 0x20
    268c:	89 a1       	ldd	r24, Y+33	; 0x21
    268e:	9a a1       	ldd	r25, Y+34	; 0x22
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	53 e4       	ldi	r21, 0x43	; 67
    2698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	0c f0       	brlt	.+2      	; 0x26a2 <HLCD_voidSendData+0x54a>
    26a0:	7b c0       	rjmp	.+246    	; 0x2798 <HLCD_voidSendData+0x640>
	{
		_delay_ms(__us / 1000.0);
    26a2:	6b a1       	ldd	r22, Y+35	; 0x23
    26a4:	7c a1       	ldd	r23, Y+36	; 0x24
    26a6:	8d a1       	ldd	r24, Y+37	; 0x25
    26a8:	9e a1       	ldd	r25, Y+38	; 0x26
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4a e7       	ldi	r20, 0x7A	; 122
    26b0:	54 e4       	ldi	r21, 0x44	; 68
    26b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	8a 8f       	std	Y+26, r24	; 0x1a
    26bc:	9b 8f       	std	Y+27, r25	; 0x1b
    26be:	ac 8f       	std	Y+28, r26	; 0x1c
    26c0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26c4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a ef       	ldi	r20, 0xFA	; 250
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8e 8b       	std	Y+22, r24	; 0x16
    26dc:	9f 8b       	std	Y+23, r25	; 0x17
    26de:	a8 8f       	std	Y+24, r26	; 0x18
    26e0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    26e2:	6e 89       	ldd	r22, Y+22	; 0x16
    26e4:	7f 89       	ldd	r23, Y+23	; 0x17
    26e6:	88 8d       	ldd	r24, Y+24	; 0x18
    26e8:	99 8d       	ldd	r25, Y+25	; 0x19
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <HLCD_voidSendData+0x5ac>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9d 8b       	std	Y+21, r25	; 0x15
    2700:	8c 8b       	std	Y+20, r24	; 0x14
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <HLCD_voidSendData+0x62a>
	else if (__tmp > 65535)
    2704:	6e 89       	ldd	r22, Y+22	; 0x16
    2706:	7f 89       	ldd	r23, Y+23	; 0x17
    2708:	88 8d       	ldd	r24, Y+24	; 0x18
    270a:	99 8d       	ldd	r25, Y+25	; 0x19
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <HLCD_voidSendData+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    271e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2720:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2722:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9d 8b       	std	Y+21, r25	; 0x15
    2742:	8c 8b       	std	Y+20, r24	; 0x14
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <HLCD_voidSendData+0x60c>
    2746:	88 ec       	ldi	r24, 0xC8	; 200
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9b 8b       	std	Y+19, r25	; 0x13
    274c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    274e:	8a 89       	ldd	r24, Y+18	; 0x12
    2750:	9b 89       	ldd	r25, Y+19	; 0x13
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <HLCD_voidSendData+0x5fa>
    2756:	9b 8b       	std	Y+19, r25	; 0x13
    2758:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	8c 89       	ldd	r24, Y+20	; 0x14
    275c:	9d 89       	ldd	r25, Y+21	; 0x15
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9d 8b       	std	Y+21, r25	; 0x15
    2762:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	8c 89       	ldd	r24, Y+20	; 0x14
    2766:	9d 89       	ldd	r25, Y+21	; 0x15
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <HLCD_voidSendData+0x5ee>
    276c:	24 c0       	rjmp	.+72     	; 0x27b6 <HLCD_voidSendData+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6e 89       	ldd	r22, Y+22	; 0x16
    2770:	7f 89       	ldd	r23, Y+23	; 0x17
    2772:	88 8d       	ldd	r24, Y+24	; 0x18
    2774:	99 8d       	ldd	r25, Y+25	; 0x19
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9d 8b       	std	Y+21, r25	; 0x15
    2780:	8c 8b       	std	Y+20, r24	; 0x14
    2782:	8c 89       	ldd	r24, Y+20	; 0x14
    2784:	9d 89       	ldd	r25, Y+21	; 0x15
    2786:	99 8b       	std	Y+17, r25	; 0x11
    2788:	88 8b       	std	Y+16, r24	; 0x10
    278a:	88 89       	ldd	r24, Y+16	; 0x10
    278c:	99 89       	ldd	r25, Y+17	; 0x11
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <HLCD_voidSendData+0x636>
    2792:	99 8b       	std	Y+17, r25	; 0x11
    2794:	88 8b       	std	Y+16, r24	; 0x10
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <HLCD_voidSendData+0x65e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2798:	6f 8d       	ldd	r22, Y+31	; 0x1f
    279a:	78 a1       	ldd	r23, Y+32	; 0x20
    279c:	89 a1       	ldd	r24, Y+33	; 0x21
    279e:	9a a1       	ldd	r25, Y+34	; 0x22
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	8e 8f       	std	Y+30, r24	; 0x1e
    27aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ac:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b0:	8a 95       	dec	r24
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <HLCD_voidSendData+0x658>
    27b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	63 e0       	ldi	r22, 0x03	; 3
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	a0 e0       	ldi	r26, 0x00	; 0
    27c6:	b0 e4       	ldi	r27, 0x40	; 64
    27c8:	8b 87       	std	Y+11, r24	; 0x0b
    27ca:	9c 87       	std	Y+12, r25	; 0x0c
    27cc:	ad 87       	std	Y+13, r26	; 0x0d
    27ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a ef       	ldi	r20, 0xFA	; 250
    27de:	54 e4       	ldi	r21, 0x44	; 68
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	8f 83       	std	Y+7, r24	; 0x07
    27ea:	98 87       	std	Y+8, r25	; 0x08
    27ec:	a9 87       	std	Y+9, r26	; 0x09
    27ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f0:	6f 81       	ldd	r22, Y+7	; 0x07
    27f2:	78 85       	ldd	r23, Y+8	; 0x08
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <HLCD_voidSendData+0x6ba>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	3f c0       	rjmp	.+126    	; 0x2890 <HLCD_voidSendData+0x738>
	else if (__tmp > 65535)
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	4c f5       	brge	.+82     	; 0x287c <HLCD_voidSendData+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	6b 85       	ldd	r22, Y+11	; 0x0b
    282c:	7c 85       	ldd	r23, Y+12	; 0x0c
    282e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2830:	9e 85       	ldd	r25, Y+14	; 0x0e
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	8d 83       	std	Y+5, r24	; 0x05
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <HLCD_voidSendData+0x71a>
    2854:	88 ec       	ldi	r24, 0xC8	; 200
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9c 81       	ldd	r25, Y+4	; 0x04
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <HLCD_voidSendData+0x708>
    2864:	9c 83       	std	Y+4, r25	; 0x04
    2866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	69 f7       	brne	.-38     	; 0x2854 <HLCD_voidSendData+0x6fc>
    287a:	14 c0       	rjmp	.+40     	; 0x28a4 <HLCD_voidSendData+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	9a 83       	std	Y+2, r25	; 0x02
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <HLCD_voidSendData+0x744>
    28a0:	9a 83       	std	Y+2, r25	; 0x02
    28a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    28a4:	c9 5a       	subi	r28, 0xA9	; 169
    28a6:	df 4f       	sbci	r29, 0xFF	; 255
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	1f 91       	pop	r17
    28b8:	0f 91       	pop	r16
    28ba:	08 95       	ret

000028bc <HLCD_voidSendCommand>:


void HLCD_voidSendCommand(u8 Copy_u8Command){
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	c7 55       	subi	r28, 0x57	; 87
    28ca:	d0 40       	sbci	r29, 0x00	; 0
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	fe 01       	movw	r30, r28
    28d8:	e9 5a       	subi	r30, 0xA9	; 169
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 83       	st	Z, r24
	/*Sending UPPER Nibble of the command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D4,((Copy_u8Command>>4)&1));
    28de:	fe 01       	movw	r30, r28
    28e0:	e9 5a       	subi	r30, 0xA9	; 169
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 81       	ld	r24, Z
    28e6:	82 95       	swap	r24
    28e8:	8f 70       	andi	r24, 0x0F	; 15
    28ea:	98 2f       	mov	r25, r24
    28ec:	91 70       	andi	r25, 0x01	; 1
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	62 e0       	ldi	r22, 0x02	; 2
    28f2:	49 2f       	mov	r20, r25
    28f4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D5,((Copy_u8Command>>5)&1));
    28f8:	fe 01       	movw	r30, r28
    28fa:	e9 5a       	subi	r30, 0xA9	; 169
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	80 81       	ld	r24, Z
    2900:	82 95       	swap	r24
    2902:	86 95       	lsr	r24
    2904:	87 70       	andi	r24, 0x07	; 7
    2906:	98 2f       	mov	r25, r24
    2908:	91 70       	andi	r25, 0x01	; 1
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	63 e0       	ldi	r22, 0x03	; 3
    290e:	49 2f       	mov	r20, r25
    2910:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D6,((Copy_u8Command>>6)&1));
    2914:	fe 01       	movw	r30, r28
    2916:	e9 5a       	subi	r30, 0xA9	; 169
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	82 95       	swap	r24
    291e:	86 95       	lsr	r24
    2920:	86 95       	lsr	r24
    2922:	83 70       	andi	r24, 0x03	; 3
    2924:	98 2f       	mov	r25, r24
    2926:	91 70       	andi	r25, 0x01	; 1
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	64 e0       	ldi	r22, 0x04	; 4
    292c:	49 2f       	mov	r20, r25
    292e:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D7,((Copy_u8Command>>7)&1));
    2932:	fe 01       	movw	r30, r28
    2934:	e9 5a       	subi	r30, 0xA9	; 169
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	98 2f       	mov	r25, r24
    293c:	99 1f       	adc	r25, r25
    293e:	99 27       	eor	r25, r25
    2940:	99 1f       	adc	r25, r25
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	65 e0       	ldi	r22, 0x05	; 5
    2946:	49 2f       	mov	r20, r25
    2948:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	/*	CLR RS to send command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW);
    294c:	82 e0       	ldi	r24, 0x02	; 2
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	40 e0       	ldi	r20, 0x00	; 0
    2952:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	/*	CLR RS to Enable write */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);
    2956:	82 e0       	ldi	r24, 0x02	; 2
    2958:	61 e0       	ldi	r22, 0x01	; 1
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>


	/* set EN for 2ms to make LCD CPU reads the command  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    2960:	82 e0       	ldi	r24, 0x02	; 2
    2962:	63 e0       	ldi	r22, 0x03	; 3
    2964:	41 e0       	ldi	r20, 0x01	; 1
    2966:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    296a:	fe 01       	movw	r30, r28
    296c:	ed 5a       	subi	r30, 0xAD	; 173
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e8       	ldi	r26, 0x80	; 128
    2976:	bf e3       	ldi	r27, 0x3F	; 63
    2978:	80 83       	st	Z, r24
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	a2 83       	std	Z+2, r26	; 0x02
    297e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2980:	8e 01       	movw	r16, r28
    2982:	01 5b       	subi	r16, 0xB1	; 177
    2984:	1f 4f       	sbci	r17, 0xFF	; 255
    2986:	fe 01       	movw	r30, r28
    2988:	ed 5a       	subi	r30, 0xAD	; 173
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	2b ea       	ldi	r18, 0xAB	; 171
    2996:	3a ea       	ldi	r19, 0xAA	; 170
    2998:	4a e2       	ldi	r20, 0x2A	; 42
    299a:	50 e4       	ldi	r21, 0x40	; 64
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	f8 01       	movw	r30, r16
    29a6:	80 83       	st	Z, r24
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	a2 83       	std	Z+2, r26	; 0x02
    29ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ae:	fe 01       	movw	r30, r28
    29b0:	e1 5b       	subi	r30, 0xB1	; 177
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e8       	ldi	r20, 0x80	; 128
    29c2:	5f e3       	ldi	r21, 0x3F	; 63
    29c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c8:	88 23       	and	r24, r24
    29ca:	34 f4       	brge	.+12     	; 0x29d8 <HLCD_voidSendCommand+0x11c>
		__ticks = 1;
    29cc:	fe 01       	movw	r30, r28
    29ce:	e2 5b       	subi	r30, 0xB2	; 178
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	80 83       	st	Z, r24
    29d6:	e0 c0       	rjmp	.+448    	; 0x2b98 <HLCD_voidSendCommand+0x2dc>
	else if (__tmp > 255)
    29d8:	fe 01       	movw	r30, r28
    29da:	e1 5b       	subi	r30, 0xB1	; 177
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	60 81       	ld	r22, Z
    29e0:	71 81       	ldd	r23, Z+1	; 0x01
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	53 e4       	ldi	r21, 0x43	; 67
    29ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	0c f0       	brlt	.+2      	; 0x29f8 <HLCD_voidSendCommand+0x13c>
    29f6:	c0 c0       	rjmp	.+384    	; 0x2b78 <HLCD_voidSendCommand+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    29f8:	fe 01       	movw	r30, r28
    29fa:	ed 5a       	subi	r30, 0xAD	; 173
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a e7       	ldi	r20, 0x7A	; 122
    2a0c:	54 e4       	ldi	r21, 0x44	; 68
    2a0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	fe 01       	movw	r30, r28
    2a18:	e6 5b       	subi	r30, 0xB6	; 182
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	80 83       	st	Z, r24
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	a2 83       	std	Z+2, r26	; 0x02
    2a22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a24:	8e 01       	movw	r16, r28
    2a26:	0a 5b       	subi	r16, 0xBA	; 186
    2a28:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e6 5b       	subi	r30, 0xB6	; 182
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a ef       	ldi	r20, 0xFA	; 250
    2a3e:	54 e4       	ldi	r21, 0x44	; 68
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	f8 01       	movw	r30, r16
    2a4a:	80 83       	st	Z, r24
    2a4c:	91 83       	std	Z+1, r25	; 0x01
    2a4e:	a2 83       	std	Z+2, r26	; 0x02
    2a50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a52:	fe 01       	movw	r30, r28
    2a54:	ea 5b       	subi	r30, 0xBA	; 186
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e8       	ldi	r20, 0x80	; 128
    2a66:	5f e3       	ldi	r21, 0x3F	; 63
    2a68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a6c:	88 23       	and	r24, r24
    2a6e:	44 f4       	brge	.+16     	; 0x2a80 <HLCD_voidSendCommand+0x1c4>
		__ticks = 1;
    2a70:	fe 01       	movw	r30, r28
    2a72:	ec 5b       	subi	r30, 0xBC	; 188
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	80 83       	st	Z, r24
    2a7e:	64 c0       	rjmp	.+200    	; 0x2b48 <HLCD_voidSendCommand+0x28c>
	else if (__tmp > 65535)
    2a80:	fe 01       	movw	r30, r28
    2a82:	ea 5b       	subi	r30, 0xBA	; 186
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	4f e7       	ldi	r20, 0x7F	; 127
    2a94:	57 e4       	ldi	r21, 0x47	; 71
    2a96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9a:	18 16       	cp	r1, r24
    2a9c:	0c f0       	brlt	.+2      	; 0x2aa0 <HLCD_voidSendCommand+0x1e4>
    2a9e:	43 c0       	rjmp	.+134    	; 0x2b26 <HLCD_voidSendCommand+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e6 5b       	subi	r30, 0xB6	; 182
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e2       	ldi	r20, 0x20	; 32
    2ab4:	51 e4       	ldi	r21, 0x41	; 65
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8e 01       	movw	r16, r28
    2ac0:	0c 5b       	subi	r16, 0xBC	; 188
    2ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	f8 01       	movw	r30, r16
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	80 83       	st	Z, r24
    2ad6:	1f c0       	rjmp	.+62     	; 0x2b16 <HLCD_voidSendCommand+0x25a>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	ee 5b       	subi	r30, 0xBE	; 190
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	88 ec       	ldi	r24, 0xC8	; 200
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	80 83       	st	Z, r24
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ee 5b       	subi	r30, 0xBE	; 190
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	80 81       	ld	r24, Z
    2aee:	91 81       	ldd	r25, Z+1	; 0x01
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <HLCD_voidSendCommand+0x234>
    2af4:	fe 01       	movw	r30, r28
    2af6:	ee 5b       	subi	r30, 0xBE	; 190
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	91 83       	std	Z+1, r25	; 0x01
    2afc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afe:	de 01       	movw	r26, r28
    2b00:	ac 5b       	subi	r26, 0xBC	; 188
    2b02:	bf 4f       	sbci	r27, 0xFF	; 255
    2b04:	fe 01       	movw	r30, r28
    2b06:	ec 5b       	subi	r30, 0xBC	; 188
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 81       	ld	r24, Z
    2b0c:	91 81       	ldd	r25, Z+1	; 0x01
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	11 96       	adiw	r26, 0x01	; 1
    2b12:	9c 93       	st	X, r25
    2b14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b16:	fe 01       	movw	r30, r28
    2b18:	ec 5b       	subi	r30, 0xBC	; 188
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	d1 f6       	brne	.-76     	; 0x2ad8 <HLCD_voidSendCommand+0x21c>
    2b24:	42 c0       	rjmp	.+132    	; 0x2baa <HLCD_voidSendCommand+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b26:	8e 01       	movw	r16, r28
    2b28:	0c 5b       	subi	r16, 0xBC	; 188
    2b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ea 5b       	subi	r30, 0xBA	; 186
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	f8 01       	movw	r30, r16
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
    2b48:	de 01       	movw	r26, r28
    2b4a:	a0 5c       	subi	r26, 0xC0	; 192
    2b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ec 5b       	subi	r30, 0xBC	; 188
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	91 81       	ldd	r25, Z+1	; 0x01
    2b58:	11 96       	adiw	r26, 0x01	; 1
    2b5a:	9c 93       	st	X, r25
    2b5c:	8e 93       	st	-X, r24
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e0 5c       	subi	r30, 0xC0	; 192
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	80 81       	ld	r24, Z
    2b66:	91 81       	ldd	r25, Z+1	; 0x01
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <HLCD_voidSendCommand+0x2ac>
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e0 5c       	subi	r30, 0xC0	; 192
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	80 83       	st	Z, r24
    2b76:	19 c0       	rjmp	.+50     	; 0x2baa <HLCD_voidSendCommand+0x2ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b78:	8e 01       	movw	r16, r28
    2b7a:	02 5b       	subi	r16, 0xB2	; 178
    2b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e1 5b       	subi	r30, 0xB1	; 177
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	60 81       	ld	r22, Z
    2b86:	71 81       	ldd	r23, Z+1	; 0x01
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	f8 01       	movw	r30, r16
    2b96:	80 83       	st	Z, r24
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e2 5b       	subi	r30, 0xB2	; 178
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ba2:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ba4:	8a 95       	dec	r24
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <HLCD_voidSendCommand+0x2e8>
    2ba8:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    2baa:	82 e0       	ldi	r24, 0x02	; 2
    2bac:	63 e0       	ldi	r22, 0x03	; 3
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	a8 e4       	ldi	r26, 0x48	; 72
    2bba:	b3 e4       	ldi	r27, 0x43	; 67
    2bbc:	8b af       	std	Y+59, r24	; 0x3b
    2bbe:	9c af       	std	Y+60, r25	; 0x3c
    2bc0:	ad af       	std	Y+61, r26	; 0x3d
    2bc2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bc4:	6b ad       	ldd	r22, Y+59	; 0x3b
    2bc6:	7c ad       	ldd	r23, Y+60	; 0x3c
    2bc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bca:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bcc:	2b ea       	ldi	r18, 0xAB	; 171
    2bce:	3a ea       	ldi	r19, 0xAA	; 170
    2bd0:	4a e2       	ldi	r20, 0x2A	; 42
    2bd2:	50 e4       	ldi	r21, 0x40	; 64
    2bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	8f ab       	std	Y+55, r24	; 0x37
    2bde:	98 af       	std	Y+56, r25	; 0x38
    2be0:	a9 af       	std	Y+57, r26	; 0x39
    2be2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2be4:	6f a9       	ldd	r22, Y+55	; 0x37
    2be6:	78 ad       	ldd	r23, Y+56	; 0x38
    2be8:	89 ad       	ldd	r24, Y+57	; 0x39
    2bea:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e8       	ldi	r20, 0x80	; 128
    2bf2:	5f e3       	ldi	r21, 0x3F	; 63
    2bf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf8:	88 23       	and	r24, r24
    2bfa:	1c f4       	brge	.+6      	; 0x2c02 <HLCD_voidSendCommand+0x346>
		__ticks = 1;
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	8e ab       	std	Y+54, r24	; 0x36
    2c00:	91 c0       	rjmp	.+290    	; 0x2d24 <HLCD_voidSendCommand+0x468>
	else if (__tmp > 255)
    2c02:	6f a9       	ldd	r22, Y+55	; 0x37
    2c04:	78 ad       	ldd	r23, Y+56	; 0x38
    2c06:	89 ad       	ldd	r24, Y+57	; 0x39
    2c08:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	4f e7       	ldi	r20, 0x7F	; 127
    2c10:	53 e4       	ldi	r21, 0x43	; 67
    2c12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c16:	18 16       	cp	r1, r24
    2c18:	0c f0       	brlt	.+2      	; 0x2c1c <HLCD_voidSendCommand+0x360>
    2c1a:	7b c0       	rjmp	.+246    	; 0x2d12 <HLCD_voidSendCommand+0x456>
	{
		_delay_ms(__us / 1000.0);
    2c1c:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c1e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c20:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c22:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4a e7       	ldi	r20, 0x7A	; 122
    2c2a:	54 e4       	ldi	r21, 0x44	; 68
    2c2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	8a ab       	std	Y+50, r24	; 0x32
    2c36:	9b ab       	std	Y+51, r25	; 0x33
    2c38:	ac ab       	std	Y+52, r26	; 0x34
    2c3a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3c:	6a a9       	ldd	r22, Y+50	; 0x32
    2c3e:	7b a9       	ldd	r23, Y+51	; 0x33
    2c40:	8c a9       	ldd	r24, Y+52	; 0x34
    2c42:	9d a9       	ldd	r25, Y+53	; 0x35
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	4a ef       	ldi	r20, 0xFA	; 250
    2c4a:	54 e4       	ldi	r21, 0x44	; 68
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	8e a7       	std	Y+46, r24	; 0x2e
    2c56:	9f a7       	std	Y+47, r25	; 0x2f
    2c58:	a8 ab       	std	Y+48, r26	; 0x30
    2c5a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c5c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c5e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c60:	88 a9       	ldd	r24, Y+48	; 0x30
    2c62:	99 a9       	ldd	r25, Y+49	; 0x31
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e8       	ldi	r20, 0x80	; 128
    2c6a:	5f e3       	ldi	r21, 0x3F	; 63
    2c6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c70:	88 23       	and	r24, r24
    2c72:	2c f4       	brge	.+10     	; 0x2c7e <HLCD_voidSendCommand+0x3c2>
		__ticks = 1;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	9d a7       	std	Y+45, r25	; 0x2d
    2c7a:	8c a7       	std	Y+44, r24	; 0x2c
    2c7c:	3f c0       	rjmp	.+126    	; 0x2cfc <HLCD_voidSendCommand+0x440>
	else if (__tmp > 65535)
    2c7e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c80:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c82:	88 a9       	ldd	r24, Y+48	; 0x30
    2c84:	99 a9       	ldd	r25, Y+49	; 0x31
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	3f ef       	ldi	r19, 0xFF	; 255
    2c8a:	4f e7       	ldi	r20, 0x7F	; 127
    2c8c:	57 e4       	ldi	r21, 0x47	; 71
    2c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c92:	18 16       	cp	r1, r24
    2c94:	4c f5       	brge	.+82     	; 0x2ce8 <HLCD_voidSendCommand+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c96:	6a a9       	ldd	r22, Y+50	; 0x32
    2c98:	7b a9       	ldd	r23, Y+51	; 0x33
    2c9a:	8c a9       	ldd	r24, Y+52	; 0x34
    2c9c:	9d a9       	ldd	r25, Y+53	; 0x35
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e2       	ldi	r20, 0x20	; 32
    2ca4:	51 e4       	ldi	r21, 0x41	; 65
    2ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	bc 01       	movw	r22, r24
    2cb0:	cd 01       	movw	r24, r26
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	9d a7       	std	Y+45, r25	; 0x2d
    2cbc:	8c a7       	std	Y+44, r24	; 0x2c
    2cbe:	0f c0       	rjmp	.+30     	; 0x2cde <HLCD_voidSendCommand+0x422>
    2cc0:	88 ec       	ldi	r24, 0xC8	; 200
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9b a7       	std	Y+43, r25	; 0x2b
    2cc6:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cc8:	8a a5       	ldd	r24, Y+42	; 0x2a
    2cca:	9b a5       	ldd	r25, Y+43	; 0x2b
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <HLCD_voidSendCommand+0x410>
    2cd0:	9b a7       	std	Y+43, r25	; 0x2b
    2cd2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cd6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	9d a7       	std	Y+45, r25	; 0x2d
    2cdc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cde:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ce0:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ce2:	00 97       	sbiw	r24, 0x00	; 0
    2ce4:	69 f7       	brne	.-38     	; 0x2cc0 <HLCD_voidSendCommand+0x404>
    2ce6:	24 c0       	rjmp	.+72     	; 0x2d30 <HLCD_voidSendCommand+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce8:	6e a5       	ldd	r22, Y+46	; 0x2e
    2cea:	7f a5       	ldd	r23, Y+47	; 0x2f
    2cec:	88 a9       	ldd	r24, Y+48	; 0x30
    2cee:	99 a9       	ldd	r25, Y+49	; 0x31
    2cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	9d a7       	std	Y+45, r25	; 0x2d
    2cfa:	8c a7       	std	Y+44, r24	; 0x2c
    2cfc:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cfe:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d00:	99 a7       	std	Y+41, r25	; 0x29
    2d02:	88 a7       	std	Y+40, r24	; 0x28
    2d04:	88 a5       	ldd	r24, Y+40	; 0x28
    2d06:	99 a5       	ldd	r25, Y+41	; 0x29
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	f1 f7       	brne	.-4      	; 0x2d08 <HLCD_voidSendCommand+0x44c>
    2d0c:	99 a7       	std	Y+41, r25	; 0x29
    2d0e:	88 a7       	std	Y+40, r24	; 0x28
    2d10:	0f c0       	rjmp	.+30     	; 0x2d30 <HLCD_voidSendCommand+0x474>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d12:	6f a9       	ldd	r22, Y+55	; 0x37
    2d14:	78 ad       	ldd	r23, Y+56	; 0x38
    2d16:	89 ad       	ldd	r24, Y+57	; 0x39
    2d18:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	8e ab       	std	Y+54, r24	; 0x36
    2d24:	8e a9       	ldd	r24, Y+54	; 0x36
    2d26:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d28:	8f a1       	ldd	r24, Y+39	; 0x27
    2d2a:	8a 95       	dec	r24
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <HLCD_voidSendCommand+0x46e>
    2d2e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	/*Sending LAST Nibble of the command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D4,((Copy_u8Command>>0)&1));
    2d30:	fe 01       	movw	r30, r28
    2d32:	e9 5a       	subi	r30, 0xA9	; 169
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	98 2f       	mov	r25, r24
    2d3a:	91 70       	andi	r25, 0x01	; 1
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	62 e0       	ldi	r22, 0x02	; 2
    2d40:	49 2f       	mov	r20, r25
    2d42:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D5,((Copy_u8Command>>1)&1));
    2d46:	fe 01       	movw	r30, r28
    2d48:	e9 5a       	subi	r30, 0xA9	; 169
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	86 95       	lsr	r24
    2d50:	98 2f       	mov	r25, r24
    2d52:	91 70       	andi	r25, 0x01	; 1
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	63 e0       	ldi	r22, 0x03	; 3
    2d58:	49 2f       	mov	r20, r25
    2d5a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D6,((Copy_u8Command>>2)&1));
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e9 5a       	subi	r30, 0xA9	; 169
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 81       	ld	r24, Z
    2d66:	86 95       	lsr	r24
    2d68:	86 95       	lsr	r24
    2d6a:	98 2f       	mov	r25, r24
    2d6c:	91 70       	andi	r25, 0x01	; 1
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	64 e0       	ldi	r22, 0x04	; 4
    2d72:	49 2f       	mov	r20, r25
    2d74:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(LCD_PORT_DATA,LCD_D7,((Copy_u8Command>>3)&1));
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e9 5a       	subi	r30, 0xA9	; 169
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	86 95       	lsr	r24
    2d82:	86 95       	lsr	r24
    2d84:	86 95       	lsr	r24
    2d86:	98 2f       	mov	r25, r24
    2d88:	91 70       	andi	r25, 0x01	; 1
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	65 e0       	ldi	r22, 0x05	; 5
    2d8e:	49 2f       	mov	r20, r25
    2d90:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>

	/* set EN for 2ms to make LCD CPU reads the command  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    2d94:	82 e0       	ldi	r24, 0x02	; 2
    2d96:	63 e0       	ldi	r22, 0x03	; 3
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	a0 e8       	ldi	r26, 0x80	; 128
    2da4:	bf e3       	ldi	r27, 0x3F	; 63
    2da6:	8b a3       	std	Y+35, r24	; 0x23
    2da8:	9c a3       	std	Y+36, r25	; 0x24
    2daa:	ad a3       	std	Y+37, r26	; 0x25
    2dac:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dae:	6b a1       	ldd	r22, Y+35	; 0x23
    2db0:	7c a1       	ldd	r23, Y+36	; 0x24
    2db2:	8d a1       	ldd	r24, Y+37	; 0x25
    2db4:	9e a1       	ldd	r25, Y+38	; 0x26
    2db6:	2b ea       	ldi	r18, 0xAB	; 171
    2db8:	3a ea       	ldi	r19, 0xAA	; 170
    2dba:	4a e2       	ldi	r20, 0x2A	; 42
    2dbc:	50 e4       	ldi	r21, 0x40	; 64
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	8f 8f       	std	Y+31, r24	; 0x1f
    2dc8:	98 a3       	std	Y+32, r25	; 0x20
    2dca:	a9 a3       	std	Y+33, r26	; 0x21
    2dcc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2dce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2dd0:	78 a1       	ldd	r23, Y+32	; 0x20
    2dd2:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd4:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	1c f4       	brge	.+6      	; 0x2dec <HLCD_voidSendCommand+0x530>
		__ticks = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	8e 8f       	std	Y+30, r24	; 0x1e
    2dea:	91 c0       	rjmp	.+290    	; 0x2f0e <HLCD_voidSendCommand+0x652>
	else if (__tmp > 255)
    2dec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2dee:	78 a1       	ldd	r23, Y+32	; 0x20
    2df0:	89 a1       	ldd	r24, Y+33	; 0x21
    2df2:	9a a1       	ldd	r25, Y+34	; 0x22
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	4f e7       	ldi	r20, 0x7F	; 127
    2dfa:	53 e4       	ldi	r21, 0x43	; 67
    2dfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e00:	18 16       	cp	r1, r24
    2e02:	0c f0       	brlt	.+2      	; 0x2e06 <HLCD_voidSendCommand+0x54a>
    2e04:	7b c0       	rjmp	.+246    	; 0x2efc <HLCD_voidSendCommand+0x640>
	{
		_delay_ms(__us / 1000.0);
    2e06:	6b a1       	ldd	r22, Y+35	; 0x23
    2e08:	7c a1       	ldd	r23, Y+36	; 0x24
    2e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	4a e7       	ldi	r20, 0x7A	; 122
    2e14:	54 e4       	ldi	r21, 0x44	; 68
    2e16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	8a 8f       	std	Y+26, r24	; 0x1a
    2e20:	9b 8f       	std	Y+27, r25	; 0x1b
    2e22:	ac 8f       	std	Y+28, r26	; 0x1c
    2e24:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e26:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e28:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	4a ef       	ldi	r20, 0xFA	; 250
    2e34:	54 e4       	ldi	r21, 0x44	; 68
    2e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	8e 8b       	std	Y+22, r24	; 0x16
    2e40:	9f 8b       	std	Y+23, r25	; 0x17
    2e42:	a8 8f       	std	Y+24, r26	; 0x18
    2e44:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2e46:	6e 89       	ldd	r22, Y+22	; 0x16
    2e48:	7f 89       	ldd	r23, Y+23	; 0x17
    2e4a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e4c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e8       	ldi	r20, 0x80	; 128
    2e54:	5f e3       	ldi	r21, 0x3F	; 63
    2e56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e5a:	88 23       	and	r24, r24
    2e5c:	2c f4       	brge	.+10     	; 0x2e68 <HLCD_voidSendCommand+0x5ac>
		__ticks = 1;
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	9d 8b       	std	Y+21, r25	; 0x15
    2e64:	8c 8b       	std	Y+20, r24	; 0x14
    2e66:	3f c0       	rjmp	.+126    	; 0x2ee6 <HLCD_voidSendCommand+0x62a>
	else if (__tmp > 65535)
    2e68:	6e 89       	ldd	r22, Y+22	; 0x16
    2e6a:	7f 89       	ldd	r23, Y+23	; 0x17
    2e6c:	88 8d       	ldd	r24, Y+24	; 0x18
    2e6e:	99 8d       	ldd	r25, Y+25	; 0x19
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	3f ef       	ldi	r19, 0xFF	; 255
    2e74:	4f e7       	ldi	r20, 0x7F	; 127
    2e76:	57 e4       	ldi	r21, 0x47	; 71
    2e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e7c:	18 16       	cp	r1, r24
    2e7e:	4c f5       	brge	.+82     	; 0x2ed2 <HLCD_voidSendCommand+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e80:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e82:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e2       	ldi	r20, 0x20	; 32
    2e8e:	51 e4       	ldi	r21, 0x41	; 65
    2e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	bc 01       	movw	r22, r24
    2e9a:	cd 01       	movw	r24, r26
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	9d 8b       	std	Y+21, r25	; 0x15
    2ea6:	8c 8b       	std	Y+20, r24	; 0x14
    2ea8:	0f c0       	rjmp	.+30     	; 0x2ec8 <HLCD_voidSendCommand+0x60c>
    2eaa:	88 ec       	ldi	r24, 0xC8	; 200
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	9b 8b       	std	Y+19, r25	; 0x13
    2eb0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eb2:	8a 89       	ldd	r24, Y+18	; 0x12
    2eb4:	9b 89       	ldd	r25, Y+19	; 0x13
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	f1 f7       	brne	.-4      	; 0x2eb6 <HLCD_voidSendCommand+0x5fa>
    2eba:	9b 8b       	std	Y+19, r25	; 0x13
    2ebc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebe:	8c 89       	ldd	r24, Y+20	; 0x14
    2ec0:	9d 89       	ldd	r25, Y+21	; 0x15
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	9d 8b       	std	Y+21, r25	; 0x15
    2ec6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec8:	8c 89       	ldd	r24, Y+20	; 0x14
    2eca:	9d 89       	ldd	r25, Y+21	; 0x15
    2ecc:	00 97       	sbiw	r24, 0x00	; 0
    2ece:	69 f7       	brne	.-38     	; 0x2eaa <HLCD_voidSendCommand+0x5ee>
    2ed0:	24 c0       	rjmp	.+72     	; 0x2f1a <HLCD_voidSendCommand+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed2:	6e 89       	ldd	r22, Y+22	; 0x16
    2ed4:	7f 89       	ldd	r23, Y+23	; 0x17
    2ed6:	88 8d       	ldd	r24, Y+24	; 0x18
    2ed8:	99 8d       	ldd	r25, Y+25	; 0x19
    2eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	9d 8b       	std	Y+21, r25	; 0x15
    2ee4:	8c 8b       	std	Y+20, r24	; 0x14
    2ee6:	8c 89       	ldd	r24, Y+20	; 0x14
    2ee8:	9d 89       	ldd	r25, Y+21	; 0x15
    2eea:	99 8b       	std	Y+17, r25	; 0x11
    2eec:	88 8b       	std	Y+16, r24	; 0x10
    2eee:	88 89       	ldd	r24, Y+16	; 0x10
    2ef0:	99 89       	ldd	r25, Y+17	; 0x11
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	f1 f7       	brne	.-4      	; 0x2ef2 <HLCD_voidSendCommand+0x636>
    2ef6:	99 8b       	std	Y+17, r25	; 0x11
    2ef8:	88 8b       	std	Y+16, r24	; 0x10
    2efa:	0f c0       	rjmp	.+30     	; 0x2f1a <HLCD_voidSendCommand+0x65e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2efc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2efe:	78 a1       	ldd	r23, Y+32	; 0x20
    2f00:	89 a1       	ldd	r24, Y+33	; 0x21
    2f02:	9a a1       	ldd	r25, Y+34	; 0x22
    2f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8e 8f       	std	Y+30, r24	; 0x1e
    2f0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f10:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f14:	8a 95       	dec	r24
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <HLCD_voidSendCommand+0x658>
    2f18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	63 e0       	ldi	r22, 0x03	; 3
    2f1e:	40 e0       	ldi	r20, 0x00	; 0
    2f20:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <MDIO_ErrorS_SetPinValue>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 e0       	ldi	r26, 0x00	; 0
    2f2a:	b0 e4       	ldi	r27, 0x40	; 64
    2f2c:	8b 87       	std	Y+11, r24	; 0x0b
    2f2e:	9c 87       	std	Y+12, r25	; 0x0c
    2f30:	ad 87       	std	Y+13, r26	; 0x0d
    2f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a ef       	ldi	r20, 0xFA	; 250
    2f42:	54 e4       	ldi	r21, 0x44	; 68
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	8f 83       	std	Y+7, r24	; 0x07
    2f4e:	98 87       	std	Y+8, r25	; 0x08
    2f50:	a9 87       	std	Y+9, r26	; 0x09
    2f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e8       	ldi	r20, 0x80	; 128
    2f62:	5f e3       	ldi	r21, 0x3F	; 63
    2f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f68:	88 23       	and	r24, r24
    2f6a:	2c f4       	brge	.+10     	; 0x2f76 <HLCD_voidSendCommand+0x6ba>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	3f c0       	rjmp	.+126    	; 0x2ff4 <HLCD_voidSendCommand+0x738>
	else if (__tmp > 65535)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	3f ef       	ldi	r19, 0xFF	; 255
    2f82:	4f e7       	ldi	r20, 0x7F	; 127
    2f84:	57 e4       	ldi	r21, 0x47	; 71
    2f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	4c f5       	brge	.+82     	; 0x2fe0 <HLCD_voidSendCommand+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <HLCD_voidSendCommand+0x71a>
    2fb8:	88 ec       	ldi	r24, 0xC8	; 200
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9c 83       	std	Y+4, r25	; 0x04
    2fbe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <HLCD_voidSendCommand+0x708>
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <HLCD_voidSendCommand+0x6fc>
    2fde:	14 c0       	rjmp	.+40     	; 0x3008 <HLCD_voidSendCommand+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe2:	78 85       	ldd	r23, Y+8	; 0x08
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <HLCD_voidSendCommand+0x744>
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3008:	c9 5a       	subi	r28, 0xA9	; 169
    300a:	df 4f       	sbci	r29, 0xFF	; 255
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	08 95       	ret

00003020 <HLCD_voidSendString>:


void HLCD_voidSendString(s8 Copy_u8Data[]){
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	00 d0       	rcall	.+0      	; 0x3026 <HLCD_voidSendString+0x6>
    3026:	00 d0       	rcall	.+0      	; 0x3028 <HLCD_voidSendString+0x8>
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	9c 83       	std	Y+4, r25	; 0x04
    302e:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0 ;
    3030:	1a 82       	std	Y+2, r1	; 0x02
    3032:	19 82       	std	Y+1, r1	; 0x01
    3034:	0f c0       	rjmp	.+30     	; 0x3054 <HLCD_voidSendString+0x34>
	while (Copy_u8Data[i]!='\0'){
		HLCD_voidSendData(Copy_u8Data[i]);
    3036:	29 81       	ldd	r18, Y+1	; 0x01
    3038:	3a 81       	ldd	r19, Y+2	; 0x02
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	9c 81       	ldd	r25, Y+4	; 0x04
    303e:	fc 01       	movw	r30, r24
    3040:	e2 0f       	add	r30, r18
    3042:	f3 1f       	adc	r31, r19
    3044:	80 81       	ld	r24, Z
    3046:	0e 94 ac 10 	call	0x2158	; 0x2158 <HLCD_voidSendData>
		i++;
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
    304e:	01 96       	adiw	r24, 0x01	; 1
    3050:	9a 83       	std	Y+2, r25	; 0x02
    3052:	89 83       	std	Y+1, r24	; 0x01
}


void HLCD_voidSendString(s8 Copy_u8Data[]){
	int i = 0 ;
	while (Copy_u8Data[i]!='\0'){
    3054:	29 81       	ldd	r18, Y+1	; 0x01
    3056:	3a 81       	ldd	r19, Y+2	; 0x02
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	9c 81       	ldd	r25, Y+4	; 0x04
    305c:	fc 01       	movw	r30, r24
    305e:	e2 0f       	add	r30, r18
    3060:	f3 1f       	adc	r31, r19
    3062:	80 81       	ld	r24, Z
    3064:	88 23       	and	r24, r24
    3066:	39 f7       	brne	.-50     	; 0x3036 <HLCD_voidSendString+0x16>
		HLCD_voidSendData(Copy_u8Data[i]);
		i++;
	}
}
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	cf 91       	pop	r28
    3072:	df 91       	pop	r29
    3074:	08 95       	ret

00003076 <HLCD_voidSendInt>:

void HLCD_voidSendInt(s32 Copy_u32Data){
    3076:	df 93       	push	r29
    3078:	cf 93       	push	r28
    307a:	cd b7       	in	r28, 0x3d	; 61
    307c:	de b7       	in	r29, 0x3e	; 62
    307e:	68 97       	sbiw	r28, 0x18	; 24
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	6d 8b       	std	Y+21, r22	; 0x15
    308c:	7e 8b       	std	Y+22, r23	; 0x16
    308e:	8f 8b       	std	Y+23, r24	; 0x17
    3090:	98 8f       	std	Y+24, r25	; 0x18
	s8 s[20];
	itoa(Copy_u32Data, s, 10);
    3092:	8d 89       	ldd	r24, Y+21	; 0x15
    3094:	9e 89       	ldd	r25, Y+22	; 0x16
    3096:	9e 01       	movw	r18, r28
    3098:	2f 5f       	subi	r18, 0xFF	; 255
    309a:	3f 4f       	sbci	r19, 0xFF	; 255
    309c:	b9 01       	movw	r22, r18
    309e:	4a e0       	ldi	r20, 0x0A	; 10
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	0e 94 46 2b 	call	0x568c	; 0x568c <itoa>
	HLCD_voidSendString(s);
    30a6:	ce 01       	movw	r24, r28
    30a8:	01 96       	adiw	r24, 0x01	; 1
    30aa:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
}
    30ae:	68 96       	adiw	r28, 0x18	; 24
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	cf 91       	pop	r28
    30bc:	df 91       	pop	r29
    30be:	08 95       	ret

000030c0 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(){
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000001);
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	0e 94 5e 14 	call	0x28bc	; 0x28bc <HLCD_voidSendCommand>

}
    30ce:	cf 91       	pop	r28
    30d0:	df 91       	pop	r29
    30d2:	08 95       	ret

000030d4 <HLCD_voidReturnHome>:

void HLCD_voidReturnHome(){
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000010);
    30dc:	82 e0       	ldi	r24, 0x02	; 2
    30de:	0e 94 5e 14 	call	0x28bc	; 0x28bc <HLCD_voidSendCommand>
}
    30e2:	cf 91       	pop	r28
    30e4:	df 91       	pop	r29
    30e6:	08 95       	ret

000030e8 <HLCD_voidSetCursorPosition>:

void HLCD_voidSetCursorPosition(u8 x , u8 y){
    30e8:	df 93       	push	r29
    30ea:	cf 93       	push	r28
    30ec:	00 d0       	rcall	.+0      	; 0x30ee <HLCD_voidSetCursorPosition+0x6>
    30ee:	0f 92       	push	r0
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	8a 83       	std	Y+2, r24	; 0x02
    30f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 command = 0b10000000;
    30f8:	80 e8       	ldi	r24, 0x80	; 128
    30fa:	89 83       	std	Y+1, r24	; 0x01
	if (x == 2) command  |=0x40 ;
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	82 30       	cpi	r24, 0x02	; 2
    3100:	19 f4       	brne	.+6      	; 0x3108 <HLCD_voidSetCursorPosition+0x20>
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	80 64       	ori	r24, 0x40	; 64
    3106:	89 83       	std	Y+1, r24	; 0x01
	command  +=y ;
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	9b 81       	ldd	r25, Y+3	; 0x03
    310c:	89 0f       	add	r24, r25
    310e:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(command);
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	0e 94 5e 14 	call	0x28bc	; 0x28bc <HLCD_voidSendCommand>
}
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <HLDR_u16GetRead>:
#include "MADC_interface.h"
#include "HLDR_interface.h"
#include "HLDR_private.h"
#include "HLDR_config.h"

u16 HLDR_u16GetRead(void){
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	00 d0       	rcall	.+0      	; 0x3134 <HLDR_u16GetRead+0x12>
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62

	u16 Lux = MADC_u16GetValue(HLDR_ADC_ChANNEL);
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <MADC_u16GetValue>
    313e:	9a 83       	std	Y+2, r25	; 0x02
    3140:	89 83       	std	Y+1, r24	; 0x01
    Lux		= MADC_s32Mapping(HLDR_MAX_LUX,HLDR_MINI_LUX,HLDR_MAX_DIGIT_VAL,HLDR_MINI_DIGIT_VAL,Lux);
    3142:	e9 81       	ldd	r30, Y+1	; 0x01
    3144:	fa 81       	ldd	r31, Y+2	; 0x02
    3146:	60 e1       	ldi	r22, 0x10	; 16
    3148:	77 e2       	ldi	r23, 0x27	; 39
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	0f ef       	ldi	r16, 0xFF	; 255
    3158:	13 e0       	ldi	r17, 0x03	; 3
    315a:	ee 24       	eor	r14, r14
    315c:	ff 24       	eor	r15, r15
    315e:	6f 01       	movw	r12, r30
    3160:	0e 94 b5 1a 	call	0x356a	; 0x356a <MADC_s32Mapping>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	9a 83       	std	Y+2, r25	; 0x02
    316a:	89 83       	std	Y+1, r24	; 0x01
	return Lux;
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	df 90       	pop	r13
    3182:	cf 90       	pop	r12
    3184:	08 95       	ret

00003186 <HLM35_s16GetRead>:
#include "MADC_interface.h"
#include "HLM53_interface.h"
#include "HLM53_private.h"
#include "HLM53_config.h"

s16 HLM35_s16GetRead(void){
    3186:	cf 92       	push	r12
    3188:	df 92       	push	r13
    318a:	ef 92       	push	r14
    318c:	ff 92       	push	r15
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	00 d0       	rcall	.+0      	; 0x3198 <HLM35_s16GetRead+0x12>
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62

	s16 temp 	= (s16)MADC_u16GetValue(HLM35_ADC_ChANNEL);
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <MADC_u16GetValue>
    31a2:	9a 83       	std	Y+2, r25	; 0x02
    31a4:	89 83       	std	Y+1, r24	; 0x01
	temp		= MADC_s32Mapping(HLM35_MAX_TEMP,HLM35_MINI_TEMP,HLM35_MAX_DIGIT_VAL,HLM35_MINI_DIGIT_VAL,temp);
    31a6:	e9 81       	ldd	r30, Y+1	; 0x01
    31a8:	fa 81       	ldd	r31, Y+2	; 0x02
    31aa:	66 e9       	ldi	r22, 0x96	; 150
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	22 e0       	ldi	r18, 0x02	; 2
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e0       	ldi	r20, 0x00	; 0
    31b8:	50 e0       	ldi	r21, 0x00	; 0
    31ba:	0e e2       	ldi	r16, 0x2E	; 46
    31bc:	11 e0       	ldi	r17, 0x01	; 1
    31be:	ee 24       	eor	r14, r14
    31c0:	ff 24       	eor	r15, r15
    31c2:	6f 01       	movw	r12, r30
    31c4:	0e 94 b5 1a 	call	0x356a	; 0x356a <MADC_s32Mapping>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	9a 83       	std	Y+2, r25	; 0x02
    31ce:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	1f 91       	pop	r17
    31de:	0f 91       	pop	r16
    31e0:	ff 90       	pop	r15
    31e2:	ef 90       	pop	r14
    31e4:	df 90       	pop	r13
    31e6:	cf 90       	pop	r12
    31e8:	08 95       	ret

000031ea <MADC_ErrorStateInit>:
#include "util/delay.h"
#include "MADC_interface.h"
#include "MADC_register.h"
#include "MADC_private.h"
#include "MADC_config.h"
Error_State_t MADC_ErrorStateInit(u8 Copy_u8VReferencetype,u8 Copy_u8Prescale, u8 Copy_u8Adjastment){
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	2a 97       	sbiw	r28, 0x0a	; 10
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	f8 94       	cli
    31f8:	de bf       	out	0x3e, r29	; 62
    31fa:	0f be       	out	0x3f, r0	; 63
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	8a 83       	std	Y+2, r24	; 0x02
    3200:	6b 83       	std	Y+3, r22	; 0x03
    3202:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    3204:	19 82       	std	Y+1, r1	; 0x01
	//setting refrence volt
	switch (Copy_u8VReferencetype) {
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	3a 87       	std	Y+10, r19	; 0x0a
    320e:	29 87       	std	Y+9, r18	; 0x09
    3210:	89 85       	ldd	r24, Y+9	; 0x09
    3212:	9a 85       	ldd	r25, Y+10	; 0x0a
    3214:	81 30       	cpi	r24, 0x01	; 1
    3216:	91 05       	cpc	r25, r1
    3218:	c1 f0       	breq	.+48     	; 0x324a <MADC_ErrorStateInit+0x60>
    321a:	29 85       	ldd	r18, Y+9	; 0x09
    321c:	3a 85       	ldd	r19, Y+10	; 0x0a
    321e:	23 30       	cpi	r18, 0x03	; 3
    3220:	31 05       	cpc	r19, r1
    3222:	11 f1       	breq	.+68     	; 0x3268 <MADC_ErrorStateInit+0x7e>
    3224:	89 85       	ldd	r24, Y+9	; 0x09
    3226:	9a 85       	ldd	r25, Y+10	; 0x0a
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	69 f5       	brne	.+90     	; 0x3286 <MADC_ErrorStateInit+0x9c>
	case ADC_AREF :
			//AREF and turned off Internal Vref
			CLR_BIT(ADMUX,ADMUX_REFS1);
    322c:	a7 e2       	ldi	r26, 0x27	; 39
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	e7 e2       	ldi	r30, 0x27	; 39
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	8f 77       	andi	r24, 0x7F	; 127
    3238:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,ADMUX_REFS0);
    323a:	a7 e2       	ldi	r26, 0x27	; 39
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e7 e2       	ldi	r30, 0x27	; 39
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	8f 7b       	andi	r24, 0xBF	; 191
    3246:	8c 93       	st	X, r24
    3248:	20 c0       	rjmp	.+64     	; 0x328a <MADC_ErrorStateInit+0xa0>
			break;
	case ADC_VREF_VCC :
			// AVCC with capacitor at AREF pin
	 		CLR_BIT(ADMUX,ADMUX_REFS1);
    324a:	a7 e2       	ldi	r26, 0x27	; 39
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	e7 e2       	ldi	r30, 0x27	; 39
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	8f 77       	andi	r24, 0x7F	; 127
    3256:	8c 93       	st	X, r24
			SET_BIT(ADMUX,ADMUX_REFS0);
    3258:	a7 e2       	ldi	r26, 0x27	; 39
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e7 e2       	ldi	r30, 0x27	; 39
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	80 64       	ori	r24, 0x40	; 64
    3264:	8c 93       	st	X, r24
    3266:	11 c0       	rjmp	.+34     	; 0x328a <MADC_ErrorStateInit+0xa0>
			break;
	case ADC_INTERNAL_256mv :
			// Internal 2.56V Voltage Reference with external capacitor at AREF pin
			SET_BIT(ADMUX,ADMUX_REFS1);
    3268:	a7 e2       	ldi	r26, 0x27	; 39
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e7 e2       	ldi	r30, 0x27	; 39
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	80 68       	ori	r24, 0x80	; 128
    3274:	8c 93       	st	X, r24
			SET_BIT(ADMUX,ADMUX_REFS0);
    3276:	a7 e2       	ldi	r26, 0x27	; 39
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	e7 e2       	ldi	r30, 0x27	; 39
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	80 64       	ori	r24, 0x40	; 64
    3282:	8c 93       	st	X, r24
    3284:	02 c0       	rjmp	.+4      	; 0x328a <MADC_ErrorStateInit+0xa0>
			break;
	default : errorState = return_Nok;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
		switch (Copy_u8Adjastment) {
    328a:	8c 81       	ldd	r24, Y+4	; 0x04
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	38 87       	std	Y+8, r19	; 0x08
    3292:	2f 83       	std	Y+7, r18	; 0x07
    3294:	8f 81       	ldd	r24, Y+7	; 0x07
    3296:	98 85       	ldd	r25, Y+8	; 0x08
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	31 f0       	breq	.+12     	; 0x32a8 <MADC_ErrorStateInit+0xbe>
    329c:	2f 81       	ldd	r18, Y+7	; 0x07
    329e:	38 85       	ldd	r19, Y+8	; 0x08
    32a0:	21 30       	cpi	r18, 0x01	; 1
    32a2:	31 05       	cpc	r19, r1
    32a4:	49 f0       	breq	.+18     	; 0x32b8 <MADC_ErrorStateInit+0xce>
    32a6:	10 c0       	rjmp	.+32     	; 0x32c8 <MADC_ErrorStateInit+0xde>
		case ADC_RIGHT_ADJUSTMENT : 	CLR_BIT(ADMUX,ADMUX_ADLAR);	break;
    32a8:	a7 e2       	ldi	r26, 0x27	; 39
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	e7 e2       	ldi	r30, 0x27	; 39
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	8f 7d       	andi	r24, 0xDF	; 223
    32b4:	8c 93       	st	X, r24
    32b6:	0a c0       	rjmp	.+20     	; 0x32cc <MADC_ErrorStateInit+0xe2>
		case ADC_LEFT_ADJUSTMENT  :		SET_BIT(ADMUX,ADMUX_ADLAR);	break;
    32b8:	a7 e2       	ldi	r26, 0x27	; 39
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	e7 e2       	ldi	r30, 0x27	; 39
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	80 62       	ori	r24, 0x20	; 32
    32c4:	8c 93       	st	X, r24
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <MADC_ErrorStateInit+0xe2>
		default: errorState = return_Nok;							break;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	89 83       	std	Y+1, r24	; 0x01
			ADC_PRESCALER_DIV32		5
			ADC_PRESCALER_DIV64		6
			ADC_PRESCALER_DIV128	7
		 * */
		//prescaler devetion by 32
		switch(Copy_u8Prescale){
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	3e 83       	std	Y+6, r19	; 0x06
    32d4:	2d 83       	std	Y+5, r18	; 0x05
    32d6:	8d 81       	ldd	r24, Y+5	; 0x05
    32d8:	9e 81       	ldd	r25, Y+6	; 0x06
    32da:	84 30       	cpi	r24, 0x04	; 4
    32dc:	91 05       	cpc	r25, r1
    32de:	09 f4       	brne	.+2      	; 0x32e2 <MADC_ErrorStateInit+0xf8>
    32e0:	6b c0       	rjmp	.+214    	; 0x33b8 <MADC_ErrorStateInit+0x1ce>
    32e2:	2d 81       	ldd	r18, Y+5	; 0x05
    32e4:	3e 81       	ldd	r19, Y+6	; 0x06
    32e6:	25 30       	cpi	r18, 0x05	; 5
    32e8:	31 05       	cpc	r19, r1
    32ea:	8c f4       	brge	.+34     	; 0x330e <MADC_ErrorStateInit+0x124>
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	9e 81       	ldd	r25, Y+6	; 0x06
    32f0:	82 30       	cpi	r24, 0x02	; 2
    32f2:	91 05       	cpc	r25, r1
    32f4:	a9 f1       	breq	.+106    	; 0x3360 <MADC_ErrorStateInit+0x176>
    32f6:	2d 81       	ldd	r18, Y+5	; 0x05
    32f8:	3e 81       	ldd	r19, Y+6	; 0x06
    32fa:	23 30       	cpi	r18, 0x03	; 3
    32fc:	31 05       	cpc	r19, r1
    32fe:	0c f0       	brlt	.+2      	; 0x3302 <MADC_ErrorStateInit+0x118>
    3300:	45 c0       	rjmp	.+138    	; 0x338c <MADC_ErrorStateInit+0x1a2>
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	81 30       	cpi	r24, 0x01	; 1
    3308:	91 05       	cpc	r25, r1
    330a:	a1 f0       	breq	.+40     	; 0x3334 <MADC_ErrorStateInit+0x14a>
    330c:	ad c0       	rjmp	.+346    	; 0x3468 <MADC_ErrorStateInit+0x27e>
    330e:	2d 81       	ldd	r18, Y+5	; 0x05
    3310:	3e 81       	ldd	r19, Y+6	; 0x06
    3312:	26 30       	cpi	r18, 0x06	; 6
    3314:	31 05       	cpc	r19, r1
    3316:	09 f4       	brne	.+2      	; 0x331a <MADC_ErrorStateInit+0x130>
    3318:	7b c0       	rjmp	.+246    	; 0x3410 <MADC_ErrorStateInit+0x226>
    331a:	8d 81       	ldd	r24, Y+5	; 0x05
    331c:	9e 81       	ldd	r25, Y+6	; 0x06
    331e:	86 30       	cpi	r24, 0x06	; 6
    3320:	91 05       	cpc	r25, r1
    3322:	0c f4       	brge	.+2      	; 0x3326 <MADC_ErrorStateInit+0x13c>
    3324:	5f c0       	rjmp	.+190    	; 0x33e4 <MADC_ErrorStateInit+0x1fa>
    3326:	2d 81       	ldd	r18, Y+5	; 0x05
    3328:	3e 81       	ldd	r19, Y+6	; 0x06
    332a:	27 30       	cpi	r18, 0x07	; 7
    332c:	31 05       	cpc	r19, r1
    332e:	09 f4       	brne	.+2      	; 0x3332 <MADC_ErrorStateInit+0x148>
    3330:	85 c0       	rjmp	.+266    	; 0x343c <MADC_ErrorStateInit+0x252>
    3332:	9a c0       	rjmp	.+308    	; 0x3468 <MADC_ErrorStateInit+0x27e>
		case ADC_PRESCALER_DIV2:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    3334:	a6 e2       	ldi	r26, 0x26	; 38
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	e6 e2       	ldi	r30, 0x26	; 38
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	81 60       	ori	r24, 0x01	; 1
    3340:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    3342:	a6 e2       	ldi	r26, 0x26	; 38
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e6 e2       	ldi	r30, 0x26	; 38
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	8d 7f       	andi	r24, 0xFD	; 253
    334e:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    3350:	a6 e2       	ldi	r26, 0x26	; 38
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e6 e2       	ldi	r30, 0x26	; 38
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	8b 7f       	andi	r24, 0xFB	; 251
    335c:	8c 93       	st	X, r24
    335e:	86 c0       	rjmp	.+268    	; 0x346c <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV4:
			CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    3360:	a6 e2       	ldi	r26, 0x26	; 38
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	e6 e2       	ldi	r30, 0x26	; 38
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	8e 7f       	andi	r24, 0xFE	; 254
    336c:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    336e:	a6 e2       	ldi	r26, 0x26	; 38
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e6 e2       	ldi	r30, 0x26	; 38
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	82 60       	ori	r24, 0x02	; 2
    337a:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    337c:	a6 e2       	ldi	r26, 0x26	; 38
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	e6 e2       	ldi	r30, 0x26	; 38
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	8b 7f       	andi	r24, 0xFB	; 251
    3388:	8c 93       	st	X, r24
    338a:	70 c0       	rjmp	.+224    	; 0x346c <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV8:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    338c:	a6 e2       	ldi	r26, 0x26	; 38
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e6 e2       	ldi	r30, 0x26	; 38
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	81 60       	ori	r24, 0x01	; 1
    3398:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    339a:	a6 e2       	ldi	r26, 0x26	; 38
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	e6 e2       	ldi	r30, 0x26	; 38
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	80 81       	ld	r24, Z
    33a4:	82 60       	ori	r24, 0x02	; 2
    33a6:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    33a8:	a6 e2       	ldi	r26, 0x26	; 38
    33aa:	b0 e0       	ldi	r27, 0x00	; 0
    33ac:	e6 e2       	ldi	r30, 0x26	; 38
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	80 81       	ld	r24, Z
    33b2:	8b 7f       	andi	r24, 0xFB	; 251
    33b4:	8c 93       	st	X, r24
    33b6:	5a c0       	rjmp	.+180    	; 0x346c <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV16:
			CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    33b8:	a6 e2       	ldi	r26, 0x26	; 38
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	e6 e2       	ldi	r30, 0x26	; 38
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	8e 7f       	andi	r24, 0xFE	; 254
    33c4:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    33c6:	a6 e2       	ldi	r26, 0x26	; 38
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	e6 e2       	ldi	r30, 0x26	; 38
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	80 81       	ld	r24, Z
    33d0:	8d 7f       	andi	r24, 0xFD	; 253
    33d2:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    33d4:	a6 e2       	ldi	r26, 0x26	; 38
    33d6:	b0 e0       	ldi	r27, 0x00	; 0
    33d8:	e6 e2       	ldi	r30, 0x26	; 38
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	80 81       	ld	r24, Z
    33de:	84 60       	ori	r24, 0x04	; 4
    33e0:	8c 93       	st	X, r24
    33e2:	44 c0       	rjmp	.+136    	; 0x346c <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV32:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    33e4:	a6 e2       	ldi	r26, 0x26	; 38
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	e6 e2       	ldi	r30, 0x26	; 38
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	81 60       	ori	r24, 0x01	; 1
    33f0:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    33f2:	a6 e2       	ldi	r26, 0x26	; 38
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	e6 e2       	ldi	r30, 0x26	; 38
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	8d 7f       	andi	r24, 0xFD	; 253
    33fe:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    3400:	a6 e2       	ldi	r26, 0x26	; 38
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	e6 e2       	ldi	r30, 0x26	; 38
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	84 60       	ori	r24, 0x04	; 4
    340c:	8c 93       	st	X, r24
    340e:	2e c0       	rjmp	.+92     	; 0x346c <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV64:
			CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    3410:	a6 e2       	ldi	r26, 0x26	; 38
    3412:	b0 e0       	ldi	r27, 0x00	; 0
    3414:	e6 e2       	ldi	r30, 0x26	; 38
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	8e 7f       	andi	r24, 0xFE	; 254
    341c:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    341e:	a6 e2       	ldi	r26, 0x26	; 38
    3420:	b0 e0       	ldi	r27, 0x00	; 0
    3422:	e6 e2       	ldi	r30, 0x26	; 38
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	82 60       	ori	r24, 0x02	; 2
    342a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    342c:	a6 e2       	ldi	r26, 0x26	; 38
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	e6 e2       	ldi	r30, 0x26	; 38
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	80 81       	ld	r24, Z
    3436:	84 60       	ori	r24, 0x04	; 4
    3438:	8c 93       	st	X, r24
    343a:	18 c0       	rjmp	.+48     	; 0x346c <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV128:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    343c:	a6 e2       	ldi	r26, 0x26	; 38
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	e6 e2       	ldi	r30, 0x26	; 38
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	81 60       	ori	r24, 0x01	; 1
    3448:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    344a:	a6 e2       	ldi	r26, 0x26	; 38
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	e6 e2       	ldi	r30, 0x26	; 38
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	82 60       	ori	r24, 0x02	; 2
    3456:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    3458:	a6 e2       	ldi	r26, 0x26	; 38
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e6 e2       	ldi	r30, 0x26	; 38
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	84 60       	ori	r24, 0x04	; 4
    3464:	8c 93       	st	X, r24
    3466:	02 c0       	rjmp	.+4      	; 0x346c <MADC_ErrorStateInit+0x282>
			break;
		default: errorState = return_Nok;
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	89 83       	std	Y+1, r24	; 0x01
		}

		//enable ADC
		SET_BIT(ADCSRA,ADCSRA_ADEN);
    346c:	a6 e2       	ldi	r26, 0x26	; 38
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	e6 e2       	ldi	r30, 0x26	; 38
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	80 68       	ori	r24, 0x80	; 128
    3478:	8c 93       	st	X, r24
		return errorState;
    347a:	89 81       	ldd	r24, Y+1	; 0x01

}
    347c:	2a 96       	adiw	r28, 0x0a	; 10
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	f8 94       	cli
    3482:	de bf       	out	0x3e, r29	; 62
    3484:	0f be       	out	0x3f, r0	; 63
    3486:	cd bf       	out	0x3d, r28	; 61
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	08 95       	ret

0000348e <MADC_voidInitDefault>:
void MADC_voidInitDefault(void){
    348e:	df 93       	push	r29
    3490:	cf 93       	push	r28
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62

	//setting refrence volt internal
	CLR_BIT(ADMUX,ADMUX_REFS1);
    3496:	a7 e2       	ldi	r26, 0x27	; 39
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	e7 e2       	ldi	r30, 0x27	; 39
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	8f 77       	andi	r24, 0x7F	; 127
    34a2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    34a4:	a7 e2       	ldi	r26, 0x27	; 39
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e7 e2       	ldi	r30, 0x27	; 39
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	80 64       	ori	r24, 0x40	; 64
    34b0:	8c 93       	st	X, r24

	//setting adjust right
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    34b2:	a7 e2       	ldi	r26, 0x27	; 39
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	e7 e2       	ldi	r30, 0x27	; 39
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	8f 7d       	andi	r24, 0xDF	; 223
    34be:	8c 93       	st	X, r24

	//prescaler devetion by 32
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    34c0:	a6 e2       	ldi	r26, 0x26	; 38
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	e6 e2       	ldi	r30, 0x26	; 38
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	81 60       	ori	r24, 0x01	; 1
    34cc:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    34ce:	a6 e2       	ldi	r26, 0x26	; 38
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	e6 e2       	ldi	r30, 0x26	; 38
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	8d 7f       	andi	r24, 0xFD	; 253
    34da:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    34dc:	a6 e2       	ldi	r26, 0x26	; 38
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	e6 e2       	ldi	r30, 0x26	; 38
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	84 60       	ori	r24, 0x04	; 4
    34e8:	8c 93       	st	X, r24

	//enable ADC
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    34ea:	a6 e2       	ldi	r26, 0x26	; 38
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	e6 e2       	ldi	r30, 0x26	; 38
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	80 68       	ori	r24, 0x80	; 128
    34f6:	8c 93       	st	X, r24

}
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	08 95       	ret

000034fe <MADC_u16GetValue>:
u16 MADC_u16GetValue(u8 Copy_u8AdcChannel){
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	0f 92       	push	r0
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	89 83       	std	Y+1, r24	; 0x01
	//clearing selection bits in order to choose
	ADMUX &= 0b11100000 ;
    350a:	a7 e2       	ldi	r26, 0x27	; 39
    350c:	b0 e0       	ldi	r27, 0x00	; 0
    350e:	e7 e2       	ldi	r30, 0x27	; 39
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	80 7e       	andi	r24, 0xE0	; 224
    3516:	8c 93       	st	X, r24
	// selceting chunnle
	ADMUX |= Copy_u8AdcChannel;
    3518:	a7 e2       	ldi	r26, 0x27	; 39
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	e7 e2       	ldi	r30, 0x27	; 39
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	90 81       	ld	r25, Z
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	89 2b       	or	r24, r25
    3526:	8c 93       	st	X, r24
	// ADC start convertion
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    3528:	a6 e2       	ldi	r26, 0x26	; 38
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	e6 e2       	ldi	r30, 0x26	; 38
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	80 64       	ori	r24, 0x40	; 64
    3534:	8c 93       	st	X, r24

	// busy wait until finish
	while ((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0));
    3536:	e6 e2       	ldi	r30, 0x26	; 38
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	80 81       	ld	r24, Z
    353c:	82 95       	swap	r24
    353e:	8f 70       	andi	r24, 0x0F	; 15
    3540:	88 2f       	mov	r24, r24
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	81 70       	andi	r24, 0x01	; 1
    3546:	90 70       	andi	r25, 0x00	; 0
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	a9 f3       	breq	.-22     	; 0x3536 <MADC_u16GetValue+0x38>
		// clear flag
		SET_BIT(ADCSRA,ADCSRA_ADIF);
    354c:	a6 e2       	ldi	r26, 0x26	; 38
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	e6 e2       	ldi	r30, 0x26	; 38
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	80 81       	ld	r24, Z
    3556:	80 61       	ori	r24, 0x10	; 16
    3558:	8c 93       	st	X, r24

	return ADC_DATA_REG;
    355a:	e4 e2       	ldi	r30, 0x24	; 36
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	91 81       	ldd	r25, Z+1	; 0x01

}
    3562:	0f 90       	pop	r0
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	08 95       	ret

0000356a <MADC_s32Mapping>:

s32 MADC_s32Mapping(s32 Copy_s32MaxOut ,s32 Copy_s32MiniOut,u16 Copy_u16MaxDigitalSensorRead , u16 Copy_u16MiniDigitalSensorRead ,u16 Copy_u16DigitalSensorRead)
{
    356a:	cf 92       	push	r12
    356c:	df 92       	push	r13
    356e:	ef 92       	push	r14
    3570:	ff 92       	push	r15
    3572:	0f 93       	push	r16
    3574:	1f 93       	push	r17
    3576:	df 93       	push	r29
    3578:	cf 93       	push	r28
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    357e:	62 97       	sbiw	r28, 0x12	; 18
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	6d 83       	std	Y+5, r22	; 0x05
    358c:	7e 83       	std	Y+6, r23	; 0x06
    358e:	8f 83       	std	Y+7, r24	; 0x07
    3590:	98 87       	std	Y+8, r25	; 0x08
    3592:	29 87       	std	Y+9, r18	; 0x09
    3594:	3a 87       	std	Y+10, r19	; 0x0a
    3596:	4b 87       	std	Y+11, r20	; 0x0b
    3598:	5c 87       	std	Y+12, r21	; 0x0c
    359a:	1e 87       	std	Y+14, r17	; 0x0e
    359c:	0d 87       	std	Y+13, r16	; 0x0d
    359e:	f8 8a       	std	Y+16, r15	; 0x10
    35a0:	ef 86       	std	Y+15, r14	; 0x0f
    35a2:	da 8a       	std	Y+18, r13	; 0x12
    35a4:	c9 8a       	std	Y+17, r12	; 0x11
	s32 X;
	X =(s32) (( (f64) (  (f64) (Copy_s32MaxOut - Copy_s32MiniOut) * (f64)  ((Copy_u16DigitalSensorRead-Copy_u16MiniDigitalSensorRead) )/ (f64)( Copy_u16MaxDigitalSensorRead -Copy_u16MiniDigitalSensorRead)) + Copy_s32MiniOut) + 1);
    35a6:	2d 81       	ldd	r18, Y+5	; 0x05
    35a8:	3e 81       	ldd	r19, Y+6	; 0x06
    35aa:	4f 81       	ldd	r20, Y+7	; 0x07
    35ac:	58 85       	ldd	r21, Y+8	; 0x08
    35ae:	89 85       	ldd	r24, Y+9	; 0x09
    35b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b2:	ab 85       	ldd	r26, Y+11	; 0x0b
    35b4:	bc 85       	ldd	r27, Y+12	; 0x0c
    35b6:	79 01       	movw	r14, r18
    35b8:	8a 01       	movw	r16, r20
    35ba:	e8 1a       	sub	r14, r24
    35bc:	f9 0a       	sbc	r15, r25
    35be:	0a 0b       	sbc	r16, r26
    35c0:	1b 0b       	sbc	r17, r27
    35c2:	d8 01       	movw	r26, r16
    35c4:	c7 01       	movw	r24, r14
    35c6:	bc 01       	movw	r22, r24
    35c8:	cd 01       	movw	r24, r26
    35ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    35ce:	7b 01       	movw	r14, r22
    35d0:	8c 01       	movw	r16, r24
    35d2:	29 89       	ldd	r18, Y+17	; 0x11
    35d4:	3a 89       	ldd	r19, Y+18	; 0x12
    35d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d8:	98 89       	ldd	r25, Y+16	; 0x10
    35da:	a9 01       	movw	r20, r18
    35dc:	48 1b       	sub	r20, r24
    35de:	59 0b       	sbc	r21, r25
    35e0:	ca 01       	movw	r24, r20
    35e2:	cc 01       	movw	r24, r24
    35e4:	a0 e0       	ldi	r26, 0x00	; 0
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    35f0:	9b 01       	movw	r18, r22
    35f2:	ac 01       	movw	r20, r24
    35f4:	c8 01       	movw	r24, r16
    35f6:	b7 01       	movw	r22, r14
    35f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	7c 01       	movw	r14, r24
    3602:	8d 01       	movw	r16, r26
    3604:	2d 85       	ldd	r18, Y+13	; 0x0d
    3606:	3e 85       	ldd	r19, Y+14	; 0x0e
    3608:	8f 85       	ldd	r24, Y+15	; 0x0f
    360a:	98 89       	ldd	r25, Y+16	; 0x10
    360c:	a9 01       	movw	r20, r18
    360e:	48 1b       	sub	r20, r24
    3610:	59 0b       	sbc	r21, r25
    3612:	ca 01       	movw	r24, r20
    3614:	cc 01       	movw	r24, r24
    3616:	a0 e0       	ldi	r26, 0x00	; 0
    3618:	b0 e0       	ldi	r27, 0x00	; 0
    361a:	bc 01       	movw	r22, r24
    361c:	cd 01       	movw	r24, r26
    361e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3622:	9b 01       	movw	r18, r22
    3624:	ac 01       	movw	r20, r24
    3626:	c8 01       	movw	r24, r16
    3628:	b7 01       	movw	r22, r14
    362a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	7c 01       	movw	r14, r24
    3634:	8d 01       	movw	r16, r26
    3636:	69 85       	ldd	r22, Y+9	; 0x09
    3638:	7a 85       	ldd	r23, Y+10	; 0x0a
    363a:	8b 85       	ldd	r24, Y+11	; 0x0b
    363c:	9c 85       	ldd	r25, Y+12	; 0x0c
    363e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3642:	9b 01       	movw	r18, r22
    3644:	ac 01       	movw	r20, r24
    3646:	c8 01       	movw	r24, r16
    3648:	b7 01       	movw	r22, r14
    364a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e8       	ldi	r20, 0x80	; 128
    365c:	5f e3       	ldi	r21, 0x3F	; 63
    365e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	89 83       	std	Y+1, r24	; 0x01
    3674:	9a 83       	std	Y+2, r25	; 0x02
    3676:	ab 83       	std	Y+3, r26	; 0x03
    3678:	bc 83       	std	Y+4, r27	; 0x04
	return X ;
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	9a 81       	ldd	r25, Y+2	; 0x02
    367e:	ab 81       	ldd	r26, Y+3	; 0x03
    3680:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3682:	bc 01       	movw	r22, r24
    3684:	cd 01       	movw	r24, r26
    3686:	62 96       	adiw	r28, 0x12	; 18
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	df 90       	pop	r13
    36a0:	cf 90       	pop	r12
    36a2:	08 95       	ret

000036a4 <Port_voidInit>:
#include "MDIO_interface.h"
#include "MDIO_registers.h"
#include "MDIO_private.h"
#include "MDIO_config.h"

void Port_voidInit(void){
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR;
    36ac:	ea e3       	ldi	r30, 0x3A	; 58
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	8c ef       	ldi	r24, 0xFC	; 252
    36b2:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    36b4:	e7 e3       	ldi	r30, 0x37	; 55
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	8b eb       	ldi	r24, 0xBB	; 187
    36ba:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    36bc:	e4 e3       	ldi	r30, 0x34	; 52
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	83 ec       	ldi	r24, 0xC3	; 195
    36c2:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    36c4:	e1 e3       	ldi	r30, 0x31	; 49
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	82 ef       	ldi	r24, 0xF2	; 242
    36ca:	80 83       	st	Z, r24
	PORTA = PORTA_INITAL_VAL;
    36cc:	eb e3       	ldi	r30, 0x3B	; 59
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	10 82       	st	Z, r1
	PORTB = PORTB_INITAL_VAL;
    36d2:	e8 e3       	ldi	r30, 0x38	; 56
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	84 e0       	ldi	r24, 0x04	; 4
    36d8:	80 83       	st	Z, r24
	PORTC = PORTC_INITAL_VAL;
    36da:	e5 e3       	ldi	r30, 0x35	; 53
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	8c e3       	ldi	r24, 0x3C	; 60
    36e0:	80 83       	st	Z, r24
	PORTD = PORTD_INITAL_VAL;
    36e2:	e2 e3       	ldi	r30, 0x32	; 50
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	8c ef       	ldi	r24, 0xFC	; 252
    36e8:	80 83       	st	Z, r24





}
    36ea:	cf 91       	pop	r28
    36ec:	df 91       	pop	r29
    36ee:	08 95       	ret

000036f0 <MDIO_ErrorS_EnablePinPullUp>:
Error_State_t MDIO_ErrorS_EnablePinPullUp( u8 Copy_u8Port , u8 Copy_u8Pin){
    36f0:	df 93       	push	r29
    36f2:	cf 93       	push	r28
    36f4:	00 d0       	rcall	.+0      	; 0x36f6 <MDIO_ErrorS_EnablePinPullUp+0x6>
    36f6:	00 d0       	rcall	.+0      	; 0x36f8 <MDIO_ErrorS_EnablePinPullUp+0x8>
    36f8:	0f 92       	push	r0
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
    36fe:	8a 83       	std	Y+2, r24	; 0x02
    3700:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    3702:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin > 7){
    3704:	8b 81       	ldd	r24, Y+3	; 0x03
    3706:	88 30       	cpi	r24, 0x08	; 8
    3708:	10 f0       	brcs	.+4      	; 0x370e <MDIO_ErrorS_EnablePinPullUp+0x1e>
		errorState = return_Nok;
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	89 83       	std	Y+1, r24	; 0x01
	}

	SFIOR &= ~(1<<2);
    370e:	a0 e5       	ldi	r26, 0x50	; 80
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	e0 e5       	ldi	r30, 0x50	; 80
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	8b 7f       	andi	r24, 0xFB	; 251
    371a:	8c 93       	st	X, r24
	switch (Copy_u8Port){
    371c:	8a 81       	ldd	r24, Y+2	; 0x02
    371e:	28 2f       	mov	r18, r24
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	3d 83       	std	Y+5, r19	; 0x05
    3724:	2c 83       	std	Y+4, r18	; 0x04
    3726:	8c 81       	ldd	r24, Y+4	; 0x04
    3728:	9d 81       	ldd	r25, Y+5	; 0x05
    372a:	82 30       	cpi	r24, 0x02	; 2
    372c:	91 05       	cpc	r25, r1
    372e:	51 f1       	breq	.+84     	; 0x3784 <MDIO_ErrorS_EnablePinPullUp+0x94>
    3730:	2c 81       	ldd	r18, Y+4	; 0x04
    3732:	3d 81       	ldd	r19, Y+5	; 0x05
    3734:	23 30       	cpi	r18, 0x03	; 3
    3736:	31 05       	cpc	r19, r1
    3738:	34 f4       	brge	.+12     	; 0x3746 <MDIO_ErrorS_EnablePinPullUp+0x56>
    373a:	8c 81       	ldd	r24, Y+4	; 0x04
    373c:	9d 81       	ldd	r25, Y+5	; 0x05
    373e:	81 30       	cpi	r24, 0x01	; 1
    3740:	91 05       	cpc	r25, r1
    3742:	61 f0       	breq	.+24     	; 0x375c <MDIO_ErrorS_EnablePinPullUp+0x6c>
    3744:	5b c0       	rjmp	.+182    	; 0x37fc <MDIO_ErrorS_EnablePinPullUp+0x10c>
    3746:	2c 81       	ldd	r18, Y+4	; 0x04
    3748:	3d 81       	ldd	r19, Y+5	; 0x05
    374a:	23 30       	cpi	r18, 0x03	; 3
    374c:	31 05       	cpc	r19, r1
    374e:	71 f1       	breq	.+92     	; 0x37ac <MDIO_ErrorS_EnablePinPullUp+0xbc>
    3750:	8c 81       	ldd	r24, Y+4	; 0x04
    3752:	9d 81       	ldd	r25, Y+5	; 0x05
    3754:	84 30       	cpi	r24, 0x04	; 4
    3756:	91 05       	cpc	r25, r1
    3758:	e9 f1       	breq	.+122    	; 0x37d4 <MDIO_ErrorS_EnablePinPullUp+0xe4>
    375a:	50 c0       	rjmp	.+160    	; 0x37fc <MDIO_ErrorS_EnablePinPullUp+0x10c>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    375c:	ab e3       	ldi	r26, 0x3B	; 59
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	eb e3       	ldi	r30, 0x3B	; 59
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	48 2f       	mov	r20, r24
    3768:	8b 81       	ldd	r24, Y+3	; 0x03
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	02 2e       	mov	r0, r18
    3774:	02 c0       	rjmp	.+4      	; 0x377a <MDIO_ErrorS_EnablePinPullUp+0x8a>
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	0a 94       	dec	r0
    377c:	e2 f7       	brpl	.-8      	; 0x3776 <MDIO_ErrorS_EnablePinPullUp+0x86>
    377e:	84 2b       	or	r24, r20
    3780:	8c 93       	st	X, r24
    3782:	3e c0       	rjmp	.+124    	; 0x3800 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    3784:	a8 e3       	ldi	r26, 0x38	; 56
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	e8 e3       	ldi	r30, 0x38	; 56
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	48 2f       	mov	r20, r24
    3790:	8b 81       	ldd	r24, Y+3	; 0x03
    3792:	28 2f       	mov	r18, r24
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	02 2e       	mov	r0, r18
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <MDIO_ErrorS_EnablePinPullUp+0xb2>
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	0a 94       	dec	r0
    37a4:	e2 f7       	brpl	.-8      	; 0x379e <MDIO_ErrorS_EnablePinPullUp+0xae>
    37a6:	84 2b       	or	r24, r20
    37a8:	8c 93       	st	X, r24
    37aa:	2a c0       	rjmp	.+84     	; 0x3800 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    37ac:	a5 e3       	ldi	r26, 0x35	; 53
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	e5 e3       	ldi	r30, 0x35	; 53
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	80 81       	ld	r24, Z
    37b6:	48 2f       	mov	r20, r24
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	28 2f       	mov	r18, r24
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	02 2e       	mov	r0, r18
    37c4:	02 c0       	rjmp	.+4      	; 0x37ca <MDIO_ErrorS_EnablePinPullUp+0xda>
    37c6:	88 0f       	add	r24, r24
    37c8:	99 1f       	adc	r25, r25
    37ca:	0a 94       	dec	r0
    37cc:	e2 f7       	brpl	.-8      	; 0x37c6 <MDIO_ErrorS_EnablePinPullUp+0xd6>
    37ce:	84 2b       	or	r24, r20
    37d0:	8c 93       	st	X, r24
    37d2:	16 c0       	rjmp	.+44     	; 0x3800 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    37d4:	a2 e3       	ldi	r26, 0x32	; 50
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	e2 e3       	ldi	r30, 0x32	; 50
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	48 2f       	mov	r20, r24
    37e0:	8b 81       	ldd	r24, Y+3	; 0x03
    37e2:	28 2f       	mov	r18, r24
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	02 2e       	mov	r0, r18
    37ec:	02 c0       	rjmp	.+4      	; 0x37f2 <MDIO_ErrorS_EnablePinPullUp+0x102>
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	0a 94       	dec	r0
    37f4:	e2 f7       	brpl	.-8      	; 0x37ee <MDIO_ErrorS_EnablePinPullUp+0xfe>
    37f6:	84 2b       	or	r24, r20
    37f8:	8c 93       	st	X, r24
    37fa:	02 c0       	rjmp	.+4      	; 0x3800 <MDIO_ErrorS_EnablePinPullUp+0x110>
					default: errorState = return_Nok; break;
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	89 83       	std	Y+1, r24	; 0x01
				}
	return errorState;
    3800:	89 81       	ldd	r24, Y+1	; 0x01

}
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	27 97       	sbiw	r28, 0x07	; 7
    381c:	0f b6       	in	r0, 0x3f	; 63
    381e:	f8 94       	cli
    3820:	de bf       	out	0x3e, r29	; 62
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	cd bf       	out	0x3d, r28	; 61
    3826:	89 83       	std	Y+1, r24	; 0x01
    3828:	6a 83       	std	Y+2, r22	; 0x02
    382a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Mode == DIO_INPUT){
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	88 23       	and	r24, r24
    3830:	09 f0       	breq	.+2      	; 0x3834 <MDIO_voidSetPinDirection+0x22>
    3832:	75 c0       	rjmp	.+234    	; 0x391e <MDIO_voidSetPinDirection+0x10c>
			switch (Copy_u8Port){
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	28 2f       	mov	r18, r24
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	3f 83       	std	Y+7, r19	; 0x07
    383c:	2e 83       	std	Y+6, r18	; 0x06
    383e:	8e 81       	ldd	r24, Y+6	; 0x06
    3840:	9f 81       	ldd	r25, Y+7	; 0x07
    3842:	82 30       	cpi	r24, 0x02	; 2
    3844:	91 05       	cpc	r25, r1
    3846:	61 f1       	breq	.+88     	; 0x38a0 <MDIO_voidSetPinDirection+0x8e>
    3848:	2e 81       	ldd	r18, Y+6	; 0x06
    384a:	3f 81       	ldd	r19, Y+7	; 0x07
    384c:	23 30       	cpi	r18, 0x03	; 3
    384e:	31 05       	cpc	r19, r1
    3850:	34 f4       	brge	.+12     	; 0x385e <MDIO_voidSetPinDirection+0x4c>
    3852:	8e 81       	ldd	r24, Y+6	; 0x06
    3854:	9f 81       	ldd	r25, Y+7	; 0x07
    3856:	81 30       	cpi	r24, 0x01	; 1
    3858:	91 05       	cpc	r25, r1
    385a:	69 f0       	breq	.+26     	; 0x3876 <MDIO_voidSetPinDirection+0x64>
    385c:	d3 c0       	rjmp	.+422    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
    385e:	2e 81       	ldd	r18, Y+6	; 0x06
    3860:	3f 81       	ldd	r19, Y+7	; 0x07
    3862:	23 30       	cpi	r18, 0x03	; 3
    3864:	31 05       	cpc	r19, r1
    3866:	89 f1       	breq	.+98     	; 0x38ca <MDIO_voidSetPinDirection+0xb8>
    3868:	8e 81       	ldd	r24, Y+6	; 0x06
    386a:	9f 81       	ldd	r25, Y+7	; 0x07
    386c:	84 30       	cpi	r24, 0x04	; 4
    386e:	91 05       	cpc	r25, r1
    3870:	09 f4       	brne	.+2      	; 0x3874 <MDIO_voidSetPinDirection+0x62>
    3872:	40 c0       	rjmp	.+128    	; 0x38f4 <MDIO_voidSetPinDirection+0xe2>
    3874:	c7 c0       	rjmp	.+398    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin);break;
    3876:	aa e3       	ldi	r26, 0x3A	; 58
    3878:	b0 e0       	ldi	r27, 0x00	; 0
    387a:	ea e3       	ldi	r30, 0x3A	; 58
    387c:	f0 e0       	ldi	r31, 0x00	; 0
    387e:	80 81       	ld	r24, Z
    3880:	48 2f       	mov	r20, r24
    3882:	8a 81       	ldd	r24, Y+2	; 0x02
    3884:	28 2f       	mov	r18, r24
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	02 2e       	mov	r0, r18
    388e:	02 c0       	rjmp	.+4      	; 0x3894 <MDIO_voidSetPinDirection+0x82>
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	0a 94       	dec	r0
    3896:	e2 f7       	brpl	.-8      	; 0x3890 <MDIO_voidSetPinDirection+0x7e>
    3898:	80 95       	com	r24
    389a:	84 23       	and	r24, r20
    389c:	8c 93       	st	X, r24
    389e:	b2 c0       	rjmp	.+356    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
    38a0:	a7 e3       	ldi	r26, 0x37	; 55
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
    38a4:	e7 e3       	ldi	r30, 0x37	; 55
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	80 81       	ld	r24, Z
    38aa:	48 2f       	mov	r20, r24
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	28 2f       	mov	r18, r24
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	02 2e       	mov	r0, r18
    38b8:	02 c0       	rjmp	.+4      	; 0x38be <MDIO_voidSetPinDirection+0xac>
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	0a 94       	dec	r0
    38c0:	e2 f7       	brpl	.-8      	; 0x38ba <MDIO_voidSetPinDirection+0xa8>
    38c2:	80 95       	com	r24
    38c4:	84 23       	and	r24, r20
    38c6:	8c 93       	st	X, r24
    38c8:	9d c0       	rjmp	.+314    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
    38ca:	a4 e3       	ldi	r26, 0x34	; 52
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	e4 e3       	ldi	r30, 0x34	; 52
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	80 81       	ld	r24, Z
    38d4:	48 2f       	mov	r20, r24
    38d6:	8a 81       	ldd	r24, Y+2	; 0x02
    38d8:	28 2f       	mov	r18, r24
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	02 2e       	mov	r0, r18
    38e2:	02 c0       	rjmp	.+4      	; 0x38e8 <MDIO_voidSetPinDirection+0xd6>
    38e4:	88 0f       	add	r24, r24
    38e6:	99 1f       	adc	r25, r25
    38e8:	0a 94       	dec	r0
    38ea:	e2 f7       	brpl	.-8      	; 0x38e4 <MDIO_voidSetPinDirection+0xd2>
    38ec:	80 95       	com	r24
    38ee:	84 23       	and	r24, r20
    38f0:	8c 93       	st	X, r24
    38f2:	88 c0       	rjmp	.+272    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
    38f4:	a1 e3       	ldi	r26, 0x31	; 49
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	e1 e3       	ldi	r30, 0x31	; 49
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	48 2f       	mov	r20, r24
    3900:	8a 81       	ldd	r24, Y+2	; 0x02
    3902:	28 2f       	mov	r18, r24
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	02 2e       	mov	r0, r18
    390c:	02 c0       	rjmp	.+4      	; 0x3912 <MDIO_voidSetPinDirection+0x100>
    390e:	88 0f       	add	r24, r24
    3910:	99 1f       	adc	r25, r25
    3912:	0a 94       	dec	r0
    3914:	e2 f7       	brpl	.-8      	; 0x390e <MDIO_voidSetPinDirection+0xfc>
    3916:	80 95       	com	r24
    3918:	84 23       	and	r24, r20
    391a:	8c 93       	st	X, r24
    391c:	73 c0       	rjmp	.+230    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
				default: break;
			}

	}
	else if(Copy_U8Mode == DIO_OUTPUT){
    391e:	8b 81       	ldd	r24, Y+3	; 0x03
    3920:	81 30       	cpi	r24, 0x01	; 1
    3922:	09 f0       	breq	.+2      	; 0x3926 <MDIO_voidSetPinDirection+0x114>
    3924:	6f c0       	rjmp	.+222    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
			switch (Copy_u8Port){
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	28 2f       	mov	r18, r24
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	3d 83       	std	Y+5, r19	; 0x05
    392e:	2c 83       	std	Y+4, r18	; 0x04
    3930:	8c 81       	ldd	r24, Y+4	; 0x04
    3932:	9d 81       	ldd	r25, Y+5	; 0x05
    3934:	82 30       	cpi	r24, 0x02	; 2
    3936:	91 05       	cpc	r25, r1
    3938:	51 f1       	breq	.+84     	; 0x398e <MDIO_voidSetPinDirection+0x17c>
    393a:	2c 81       	ldd	r18, Y+4	; 0x04
    393c:	3d 81       	ldd	r19, Y+5	; 0x05
    393e:	23 30       	cpi	r18, 0x03	; 3
    3940:	31 05       	cpc	r19, r1
    3942:	34 f4       	brge	.+12     	; 0x3950 <MDIO_voidSetPinDirection+0x13e>
    3944:	8c 81       	ldd	r24, Y+4	; 0x04
    3946:	9d 81       	ldd	r25, Y+5	; 0x05
    3948:	81 30       	cpi	r24, 0x01	; 1
    394a:	91 05       	cpc	r25, r1
    394c:	61 f0       	breq	.+24     	; 0x3966 <MDIO_voidSetPinDirection+0x154>
    394e:	5a c0       	rjmp	.+180    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
    3950:	2c 81       	ldd	r18, Y+4	; 0x04
    3952:	3d 81       	ldd	r19, Y+5	; 0x05
    3954:	23 30       	cpi	r18, 0x03	; 3
    3956:	31 05       	cpc	r19, r1
    3958:	71 f1       	breq	.+92     	; 0x39b6 <MDIO_voidSetPinDirection+0x1a4>
    395a:	8c 81       	ldd	r24, Y+4	; 0x04
    395c:	9d 81       	ldd	r25, Y+5	; 0x05
    395e:	84 30       	cpi	r24, 0x04	; 4
    3960:	91 05       	cpc	r25, r1
    3962:	e9 f1       	breq	.+122    	; 0x39de <MDIO_voidSetPinDirection+0x1cc>
    3964:	4f c0       	rjmp	.+158    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin);break;
    3966:	aa e3       	ldi	r26, 0x3A	; 58
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	ea e3       	ldi	r30, 0x3A	; 58
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	48 2f       	mov	r20, r24
    3972:	8a 81       	ldd	r24, Y+2	; 0x02
    3974:	28 2f       	mov	r18, r24
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	02 2e       	mov	r0, r18
    397e:	02 c0       	rjmp	.+4      	; 0x3984 <MDIO_voidSetPinDirection+0x172>
    3980:	88 0f       	add	r24, r24
    3982:	99 1f       	adc	r25, r25
    3984:	0a 94       	dec	r0
    3986:	e2 f7       	brpl	.-8      	; 0x3980 <MDIO_voidSetPinDirection+0x16e>
    3988:	84 2b       	or	r24, r20
    398a:	8c 93       	st	X, r24
    398c:	3b c0       	rjmp	.+118    	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
    398e:	a7 e3       	ldi	r26, 0x37	; 55
    3990:	b0 e0       	ldi	r27, 0x00	; 0
    3992:	e7 e3       	ldi	r30, 0x37	; 55
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	80 81       	ld	r24, Z
    3998:	48 2f       	mov	r20, r24
    399a:	8a 81       	ldd	r24, Y+2	; 0x02
    399c:	28 2f       	mov	r18, r24
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	02 2e       	mov	r0, r18
    39a6:	02 c0       	rjmp	.+4      	; 0x39ac <MDIO_voidSetPinDirection+0x19a>
    39a8:	88 0f       	add	r24, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	0a 94       	dec	r0
    39ae:	e2 f7       	brpl	.-8      	; 0x39a8 <MDIO_voidSetPinDirection+0x196>
    39b0:	84 2b       	or	r24, r20
    39b2:	8c 93       	st	X, r24
    39b4:	27 c0       	rjmp	.+78     	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
    39b6:	a4 e3       	ldi	r26, 0x34	; 52
    39b8:	b0 e0       	ldi	r27, 0x00	; 0
    39ba:	e4 e3       	ldi	r30, 0x34	; 52
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	80 81       	ld	r24, Z
    39c0:	48 2f       	mov	r20, r24
    39c2:	8a 81       	ldd	r24, Y+2	; 0x02
    39c4:	28 2f       	mov	r18, r24
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	02 2e       	mov	r0, r18
    39ce:	02 c0       	rjmp	.+4      	; 0x39d4 <MDIO_voidSetPinDirection+0x1c2>
    39d0:	88 0f       	add	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	0a 94       	dec	r0
    39d6:	e2 f7       	brpl	.-8      	; 0x39d0 <MDIO_voidSetPinDirection+0x1be>
    39d8:	84 2b       	or	r24, r20
    39da:	8c 93       	st	X, r24
    39dc:	13 c0       	rjmp	.+38     	; 0x3a04 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
    39de:	a1 e3       	ldi	r26, 0x31	; 49
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	e1 e3       	ldi	r30, 0x31	; 49
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	48 2f       	mov	r20, r24
    39ea:	8a 81       	ldd	r24, Y+2	; 0x02
    39ec:	28 2f       	mov	r18, r24
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	02 2e       	mov	r0, r18
    39f6:	02 c0       	rjmp	.+4      	; 0x39fc <MDIO_voidSetPinDirection+0x1ea>
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	0a 94       	dec	r0
    39fe:	e2 f7       	brpl	.-8      	; 0x39f8 <MDIO_voidSetPinDirection+0x1e6>
    3a00:	84 2b       	or	r24, r20
    3a02:	8c 93       	st	X, r24
				default: break;
			}
	}

}
    3a04:	27 96       	adiw	r28, 0x07	; 7
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	f8 94       	cli
    3a0a:	de bf       	out	0x3e, r29	; 62
    3a0c:	0f be       	out	0x3f, r0	; 63
    3a0e:	cd bf       	out	0x3d, r28	; 61
    3a10:	cf 91       	pop	r28
    3a12:	df 91       	pop	r29
    3a14:	08 95       	ret

00003a16 <MDIO_ErrorS_SetPinValue>:
Error_State_t MDIO_ErrorS_SetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    3a16:	df 93       	push	r29
    3a18:	cf 93       	push	r28
    3a1a:	cd b7       	in	r28, 0x3d	; 61
    3a1c:	de b7       	in	r29, 0x3e	; 62
    3a1e:	28 97       	sbiw	r28, 0x08	; 8
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	8a 83       	std	Y+2, r24	; 0x02
    3a2c:	6b 83       	std	Y+3, r22	; 0x03
    3a2e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    3a30:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	88 30       	cpi	r24, 0x08	; 8
    3a36:	10 f0       	brcs	.+4      	; 0x3a3c <MDIO_ErrorS_SetPinValue+0x26>
		errorState = return_Nok;
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	89 83       	std	Y+1, r24	; 0x01
	}

	if(Copy_U8Mode == DIO_LOW){
    3a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a3e:	88 23       	and	r24, r24
    3a40:	09 f0       	breq	.+2      	; 0x3a44 <MDIO_ErrorS_SetPinValue+0x2e>
    3a42:	78 c0       	rjmp	.+240    	; 0x3b34 <MDIO_ErrorS_SetPinValue+0x11e>
				switch (Copy_u8Port){
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	28 2f       	mov	r18, r24
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	38 87       	std	Y+8, r19	; 0x08
    3a4c:	2f 83       	std	Y+7, r18	; 0x07
    3a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a50:	98 85       	ldd	r25, Y+8	; 0x08
    3a52:	82 30       	cpi	r24, 0x02	; 2
    3a54:	91 05       	cpc	r25, r1
    3a56:	61 f1       	breq	.+88     	; 0x3ab0 <MDIO_ErrorS_SetPinValue+0x9a>
    3a58:	2f 81       	ldd	r18, Y+7	; 0x07
    3a5a:	38 85       	ldd	r19, Y+8	; 0x08
    3a5c:	23 30       	cpi	r18, 0x03	; 3
    3a5e:	31 05       	cpc	r19, r1
    3a60:	34 f4       	brge	.+12     	; 0x3a6e <MDIO_ErrorS_SetPinValue+0x58>
    3a62:	8f 81       	ldd	r24, Y+7	; 0x07
    3a64:	98 85       	ldd	r25, Y+8	; 0x08
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	91 05       	cpc	r25, r1
    3a6a:	69 f0       	breq	.+26     	; 0x3a86 <MDIO_ErrorS_SetPinValue+0x70>
    3a6c:	60 c0       	rjmp	.+192    	; 0x3b2e <MDIO_ErrorS_SetPinValue+0x118>
    3a6e:	2f 81       	ldd	r18, Y+7	; 0x07
    3a70:	38 85       	ldd	r19, Y+8	; 0x08
    3a72:	23 30       	cpi	r18, 0x03	; 3
    3a74:	31 05       	cpc	r19, r1
    3a76:	89 f1       	breq	.+98     	; 0x3ada <MDIO_ErrorS_SetPinValue+0xc4>
    3a78:	8f 81       	ldd	r24, Y+7	; 0x07
    3a7a:	98 85       	ldd	r25, Y+8	; 0x08
    3a7c:	84 30       	cpi	r24, 0x04	; 4
    3a7e:	91 05       	cpc	r25, r1
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <MDIO_ErrorS_SetPinValue+0x6e>
    3a82:	40 c0       	rjmp	.+128    	; 0x3b04 <MDIO_ErrorS_SetPinValue+0xee>
    3a84:	54 c0       	rjmp	.+168    	; 0x3b2e <MDIO_ErrorS_SetPinValue+0x118>
					case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin);break;
    3a86:	ab e3       	ldi	r26, 0x3B	; 59
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	eb e3       	ldi	r30, 0x3B	; 59
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	80 81       	ld	r24, Z
    3a90:	48 2f       	mov	r20, r24
    3a92:	8b 81       	ldd	r24, Y+3	; 0x03
    3a94:	28 2f       	mov	r18, r24
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	02 2e       	mov	r0, r18
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <MDIO_ErrorS_SetPinValue+0x8e>
    3aa0:	88 0f       	add	r24, r24
    3aa2:	99 1f       	adc	r25, r25
    3aa4:	0a 94       	dec	r0
    3aa6:	e2 f7       	brpl	.-8      	; 0x3aa0 <MDIO_ErrorS_SetPinValue+0x8a>
    3aa8:	80 95       	com	r24
    3aaa:	84 23       	and	r24, r20
    3aac:	8c 93       	st	X, r24
    3aae:	b8 c0       	rjmp	.+368    	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
    3ab0:	a8 e3       	ldi	r26, 0x38	; 56
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	e8 e3       	ldi	r30, 0x38	; 56
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	48 2f       	mov	r20, r24
    3abc:	8b 81       	ldd	r24, Y+3	; 0x03
    3abe:	28 2f       	mov	r18, r24
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	02 2e       	mov	r0, r18
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <MDIO_ErrorS_SetPinValue+0xb8>
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	0a 94       	dec	r0
    3ad0:	e2 f7       	brpl	.-8      	; 0x3aca <MDIO_ErrorS_SetPinValue+0xb4>
    3ad2:	80 95       	com	r24
    3ad4:	84 23       	and	r24, r20
    3ad6:	8c 93       	st	X, r24
    3ad8:	a3 c0       	rjmp	.+326    	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
    3ada:	a5 e3       	ldi	r26, 0x35	; 53
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	e5 e3       	ldi	r30, 0x35	; 53
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	48 2f       	mov	r20, r24
    3ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae8:	28 2f       	mov	r18, r24
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	02 2e       	mov	r0, r18
    3af2:	02 c0       	rjmp	.+4      	; 0x3af8 <MDIO_ErrorS_SetPinValue+0xe2>
    3af4:	88 0f       	add	r24, r24
    3af6:	99 1f       	adc	r25, r25
    3af8:	0a 94       	dec	r0
    3afa:	e2 f7       	brpl	.-8      	; 0x3af4 <MDIO_ErrorS_SetPinValue+0xde>
    3afc:	80 95       	com	r24
    3afe:	84 23       	and	r24, r20
    3b00:	8c 93       	st	X, r24
    3b02:	8e c0       	rjmp	.+284    	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
    3b04:	a2 e3       	ldi	r26, 0x32	; 50
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	e2 e3       	ldi	r30, 0x32	; 50
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	48 2f       	mov	r20, r24
    3b10:	8b 81       	ldd	r24, Y+3	; 0x03
    3b12:	28 2f       	mov	r18, r24
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	02 2e       	mov	r0, r18
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <MDIO_ErrorS_SetPinValue+0x10c>
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	0a 94       	dec	r0
    3b24:	e2 f7       	brpl	.-8      	; 0x3b1e <MDIO_ErrorS_SetPinValue+0x108>
    3b26:	80 95       	com	r24
    3b28:	84 23       	and	r24, r20
    3b2a:	8c 93       	st	X, r24
    3b2c:	79 c0       	rjmp	.+242    	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
					default: errorState = return_Nok; break;
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	89 83       	std	Y+1, r24	; 0x01
    3b32:	76 c0       	rjmp	.+236    	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
				}

		}
		else if(Copy_U8Mode == DIO_HIGH){
    3b34:	8c 81       	ldd	r24, Y+4	; 0x04
    3b36:	81 30       	cpi	r24, 0x01	; 1
    3b38:	09 f0       	breq	.+2      	; 0x3b3c <MDIO_ErrorS_SetPinValue+0x126>
    3b3a:	72 c0       	rjmp	.+228    	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
				switch (Copy_u8Port){
    3b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3e:	28 2f       	mov	r18, r24
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	3e 83       	std	Y+6, r19	; 0x06
    3b44:	2d 83       	std	Y+5, r18	; 0x05
    3b46:	8d 81       	ldd	r24, Y+5	; 0x05
    3b48:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4a:	82 30       	cpi	r24, 0x02	; 2
    3b4c:	91 05       	cpc	r25, r1
    3b4e:	51 f1       	breq	.+84     	; 0x3ba4 <MDIO_ErrorS_SetPinValue+0x18e>
    3b50:	2d 81       	ldd	r18, Y+5	; 0x05
    3b52:	3e 81       	ldd	r19, Y+6	; 0x06
    3b54:	23 30       	cpi	r18, 0x03	; 3
    3b56:	31 05       	cpc	r19, r1
    3b58:	34 f4       	brge	.+12     	; 0x3b66 <MDIO_ErrorS_SetPinValue+0x150>
    3b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5e:	81 30       	cpi	r24, 0x01	; 1
    3b60:	91 05       	cpc	r25, r1
    3b62:	61 f0       	breq	.+24     	; 0x3b7c <MDIO_ErrorS_SetPinValue+0x166>
    3b64:	5b c0       	rjmp	.+182    	; 0x3c1c <MDIO_ErrorS_SetPinValue+0x206>
    3b66:	2d 81       	ldd	r18, Y+5	; 0x05
    3b68:	3e 81       	ldd	r19, Y+6	; 0x06
    3b6a:	23 30       	cpi	r18, 0x03	; 3
    3b6c:	31 05       	cpc	r19, r1
    3b6e:	71 f1       	breq	.+92     	; 0x3bcc <MDIO_ErrorS_SetPinValue+0x1b6>
    3b70:	8d 81       	ldd	r24, Y+5	; 0x05
    3b72:	9e 81       	ldd	r25, Y+6	; 0x06
    3b74:	84 30       	cpi	r24, 0x04	; 4
    3b76:	91 05       	cpc	r25, r1
    3b78:	e9 f1       	breq	.+122    	; 0x3bf4 <MDIO_ErrorS_SetPinValue+0x1de>
    3b7a:	50 c0       	rjmp	.+160    	; 0x3c1c <MDIO_ErrorS_SetPinValue+0x206>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    3b7c:	ab e3       	ldi	r26, 0x3B	; 59
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	eb e3       	ldi	r30, 0x3B	; 59
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	48 2f       	mov	r20, r24
    3b88:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8a:	28 2f       	mov	r18, r24
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	02 2e       	mov	r0, r18
    3b94:	02 c0       	rjmp	.+4      	; 0x3b9a <MDIO_ErrorS_SetPinValue+0x184>
    3b96:	88 0f       	add	r24, r24
    3b98:	99 1f       	adc	r25, r25
    3b9a:	0a 94       	dec	r0
    3b9c:	e2 f7       	brpl	.-8      	; 0x3b96 <MDIO_ErrorS_SetPinValue+0x180>
    3b9e:	84 2b       	or	r24, r20
    3ba0:	8c 93       	st	X, r24
    3ba2:	3e c0       	rjmp	.+124    	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    3ba4:	a8 e3       	ldi	r26, 0x38	; 56
    3ba6:	b0 e0       	ldi	r27, 0x00	; 0
    3ba8:	e8 e3       	ldi	r30, 0x38	; 56
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	80 81       	ld	r24, Z
    3bae:	48 2f       	mov	r20, r24
    3bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb2:	28 2f       	mov	r18, r24
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	02 2e       	mov	r0, r18
    3bbc:	02 c0       	rjmp	.+4      	; 0x3bc2 <MDIO_ErrorS_SetPinValue+0x1ac>
    3bbe:	88 0f       	add	r24, r24
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	0a 94       	dec	r0
    3bc4:	e2 f7       	brpl	.-8      	; 0x3bbe <MDIO_ErrorS_SetPinValue+0x1a8>
    3bc6:	84 2b       	or	r24, r20
    3bc8:	8c 93       	st	X, r24
    3bca:	2a c0       	rjmp	.+84     	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    3bcc:	a5 e3       	ldi	r26, 0x35	; 53
    3bce:	b0 e0       	ldi	r27, 0x00	; 0
    3bd0:	e5 e3       	ldi	r30, 0x35	; 53
    3bd2:	f0 e0       	ldi	r31, 0x00	; 0
    3bd4:	80 81       	ld	r24, Z
    3bd6:	48 2f       	mov	r20, r24
    3bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bda:	28 2f       	mov	r18, r24
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	02 2e       	mov	r0, r18
    3be4:	02 c0       	rjmp	.+4      	; 0x3bea <MDIO_ErrorS_SetPinValue+0x1d4>
    3be6:	88 0f       	add	r24, r24
    3be8:	99 1f       	adc	r25, r25
    3bea:	0a 94       	dec	r0
    3bec:	e2 f7       	brpl	.-8      	; 0x3be6 <MDIO_ErrorS_SetPinValue+0x1d0>
    3bee:	84 2b       	or	r24, r20
    3bf0:	8c 93       	st	X, r24
    3bf2:	16 c0       	rjmp	.+44     	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    3bf4:	a2 e3       	ldi	r26, 0x32	; 50
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	e2 e3       	ldi	r30, 0x32	; 50
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	80 81       	ld	r24, Z
    3bfe:	48 2f       	mov	r20, r24
    3c00:	8b 81       	ldd	r24, Y+3	; 0x03
    3c02:	28 2f       	mov	r18, r24
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	02 2e       	mov	r0, r18
    3c0c:	02 c0       	rjmp	.+4      	; 0x3c12 <MDIO_ErrorS_SetPinValue+0x1fc>
    3c0e:	88 0f       	add	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	0a 94       	dec	r0
    3c14:	e2 f7       	brpl	.-8      	; 0x3c0e <MDIO_ErrorS_SetPinValue+0x1f8>
    3c16:	84 2b       	or	r24, r20
    3c18:	8c 93       	st	X, r24
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <MDIO_ErrorS_SetPinValue+0x20a>
					default:errorState = return_Nok; break;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	89 83       	std	Y+1, r24	; 0x01
				}
		}
	return errorState;
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c22:	28 96       	adiw	r28, 0x08	; 8
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	f8 94       	cli
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	cd bf       	out	0x3d, r28	; 61
    3c2e:	cf 91       	pop	r28
    3c30:	df 91       	pop	r29
    3c32:	08 95       	ret

00003c34 <MDIO_ErrorS_GetPinValue>:

Error_State_t MDIO_ErrorS_GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8* P_u8Value ){
    3c34:	df 93       	push	r29
    3c36:	cf 93       	push	r28
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
    3c3c:	27 97       	sbiw	r28, 0x07	; 7
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	8a 83       	std	Y+2, r24	; 0x02
    3c4a:	6b 83       	std	Y+3, r22	; 0x03
    3c4c:	5d 83       	std	Y+5, r21	; 0x05
    3c4e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    3c50:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    3c52:	8b 81       	ldd	r24, Y+3	; 0x03
    3c54:	88 30       	cpi	r24, 0x08	; 8
    3c56:	10 f0       	brcs	.+4      	; 0x3c5c <MDIO_ErrorS_GetPinValue+0x28>
			errorState = return_Nok;
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	89 83       	std	Y+1, r24	; 0x01
		}

	switch (Copy_u8Port){
    3c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5e:	28 2f       	mov	r18, r24
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	3f 83       	std	Y+7, r19	; 0x07
    3c64:	2e 83       	std	Y+6, r18	; 0x06
    3c66:	4e 81       	ldd	r20, Y+6	; 0x06
    3c68:	5f 81       	ldd	r21, Y+7	; 0x07
    3c6a:	42 30       	cpi	r20, 0x02	; 2
    3c6c:	51 05       	cpc	r21, r1
    3c6e:	59 f1       	breq	.+86     	; 0x3cc6 <MDIO_ErrorS_GetPinValue+0x92>
    3c70:	8e 81       	ldd	r24, Y+6	; 0x06
    3c72:	9f 81       	ldd	r25, Y+7	; 0x07
    3c74:	83 30       	cpi	r24, 0x03	; 3
    3c76:	91 05       	cpc	r25, r1
    3c78:	34 f4       	brge	.+12     	; 0x3c86 <MDIO_ErrorS_GetPinValue+0x52>
    3c7a:	2e 81       	ldd	r18, Y+6	; 0x06
    3c7c:	3f 81       	ldd	r19, Y+7	; 0x07
    3c7e:	21 30       	cpi	r18, 0x01	; 1
    3c80:	31 05       	cpc	r19, r1
    3c82:	69 f0       	breq	.+26     	; 0x3c9e <MDIO_ErrorS_GetPinValue+0x6a>
    3c84:	5c c0       	rjmp	.+184    	; 0x3d3e <MDIO_ErrorS_GetPinValue+0x10a>
    3c86:	4e 81       	ldd	r20, Y+6	; 0x06
    3c88:	5f 81       	ldd	r21, Y+7	; 0x07
    3c8a:	43 30       	cpi	r20, 0x03	; 3
    3c8c:	51 05       	cpc	r21, r1
    3c8e:	79 f1       	breq	.+94     	; 0x3cee <MDIO_ErrorS_GetPinValue+0xba>
    3c90:	8e 81       	ldd	r24, Y+6	; 0x06
    3c92:	9f 81       	ldd	r25, Y+7	; 0x07
    3c94:	84 30       	cpi	r24, 0x04	; 4
    3c96:	91 05       	cpc	r25, r1
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <MDIO_ErrorS_GetPinValue+0x68>
    3c9a:	3d c0       	rjmp	.+122    	; 0x3d16 <MDIO_ErrorS_GetPinValue+0xe2>
    3c9c:	50 c0       	rjmp	.+160    	; 0x3d3e <MDIO_ErrorS_GetPinValue+0x10a>
						case DIO_PORTA : *P_u8Value = GET_BIT(PINA,Copy_u8Pin);break;
    3c9e:	e9 e3       	ldi	r30, 0x39	; 57
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	80 81       	ld	r24, Z
    3ca4:	28 2f       	mov	r18, r24
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    3caa:	88 2f       	mov	r24, r24
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	a9 01       	movw	r20, r18
    3cb0:	02 c0       	rjmp	.+4      	; 0x3cb6 <MDIO_ErrorS_GetPinValue+0x82>
    3cb2:	55 95       	asr	r21
    3cb4:	47 95       	ror	r20
    3cb6:	8a 95       	dec	r24
    3cb8:	e2 f7       	brpl	.-8      	; 0x3cb2 <MDIO_ErrorS_GetPinValue+0x7e>
    3cba:	ca 01       	movw	r24, r20
    3cbc:	81 70       	andi	r24, 0x01	; 1
    3cbe:	ec 81       	ldd	r30, Y+4	; 0x04
    3cc0:	fd 81       	ldd	r31, Y+5	; 0x05
    3cc2:	80 83       	st	Z, r24
    3cc4:	3e c0       	rjmp	.+124    	; 0x3d42 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTB : *P_u8Value = GET_BIT(PINB,Copy_u8Pin);break;
    3cc6:	e6 e3       	ldi	r30, 0x36	; 54
    3cc8:	f0 e0       	ldi	r31, 0x00	; 0
    3cca:	80 81       	ld	r24, Z
    3ccc:	28 2f       	mov	r18, r24
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd2:	88 2f       	mov	r24, r24
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	a9 01       	movw	r20, r18
    3cd8:	02 c0       	rjmp	.+4      	; 0x3cde <MDIO_ErrorS_GetPinValue+0xaa>
    3cda:	55 95       	asr	r21
    3cdc:	47 95       	ror	r20
    3cde:	8a 95       	dec	r24
    3ce0:	e2 f7       	brpl	.-8      	; 0x3cda <MDIO_ErrorS_GetPinValue+0xa6>
    3ce2:	ca 01       	movw	r24, r20
    3ce4:	81 70       	andi	r24, 0x01	; 1
    3ce6:	ec 81       	ldd	r30, Y+4	; 0x04
    3ce8:	fd 81       	ldd	r31, Y+5	; 0x05
    3cea:	80 83       	st	Z, r24
    3cec:	2a c0       	rjmp	.+84     	; 0x3d42 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTC : *P_u8Value = GET_BIT(PINC,Copy_u8Pin);break;
    3cee:	e3 e3       	ldi	r30, 0x33	; 51
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	28 2f       	mov	r18, r24
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfa:	88 2f       	mov	r24, r24
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	a9 01       	movw	r20, r18
    3d00:	02 c0       	rjmp	.+4      	; 0x3d06 <MDIO_ErrorS_GetPinValue+0xd2>
    3d02:	55 95       	asr	r21
    3d04:	47 95       	ror	r20
    3d06:	8a 95       	dec	r24
    3d08:	e2 f7       	brpl	.-8      	; 0x3d02 <MDIO_ErrorS_GetPinValue+0xce>
    3d0a:	ca 01       	movw	r24, r20
    3d0c:	81 70       	andi	r24, 0x01	; 1
    3d0e:	ec 81       	ldd	r30, Y+4	; 0x04
    3d10:	fd 81       	ldd	r31, Y+5	; 0x05
    3d12:	80 83       	st	Z, r24
    3d14:	16 c0       	rjmp	.+44     	; 0x3d42 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTD : *P_u8Value = GET_BIT(PIND,Copy_u8Pin);break;
    3d16:	e0 e3       	ldi	r30, 0x30	; 48
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	80 81       	ld	r24, Z
    3d1c:	28 2f       	mov	r18, r24
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	88 2f       	mov	r24, r24
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	a9 01       	movw	r20, r18
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <MDIO_ErrorS_GetPinValue+0xfa>
    3d2a:	55 95       	asr	r21
    3d2c:	47 95       	ror	r20
    3d2e:	8a 95       	dec	r24
    3d30:	e2 f7       	brpl	.-8      	; 0x3d2a <MDIO_ErrorS_GetPinValue+0xf6>
    3d32:	ca 01       	movw	r24, r20
    3d34:	81 70       	andi	r24, 0x01	; 1
    3d36:	ec 81       	ldd	r30, Y+4	; 0x04
    3d38:	fd 81       	ldd	r31, Y+5	; 0x05
    3d3a:	80 83       	st	Z, r24
    3d3c:	02 c0       	rjmp	.+4      	; 0x3d42 <MDIO_ErrorS_GetPinValue+0x10e>
						default: errorState = return_Nok; break;
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	89 83       	std	Y+1, r24	; 0x01
					}
	return errorState;
    3d42:	89 81       	ldd	r24, Y+1	; 0x01

}
    3d44:	27 96       	adiw	r28, 0x07	; 7
    3d46:	0f b6       	in	r0, 0x3f	; 63
    3d48:	f8 94       	cli
    3d4a:	de bf       	out	0x3e, r29	; 62
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	cd bf       	out	0x3d, r28	; 61
    3d50:	cf 91       	pop	r28
    3d52:	df 91       	pop	r29
    3d54:	08 95       	ret

00003d56 <MDIO_ErrorS_SetPortValue>:

Error_State_t MDIO_ErrorS_SetPortValue( u8 Copy_u8Port , u8  Copy_U8Value ){
    3d56:	df 93       	push	r29
    3d58:	cf 93       	push	r28
    3d5a:	00 d0       	rcall	.+0      	; 0x3d5c <MDIO_ErrorS_SetPortValue+0x6>
    3d5c:	00 d0       	rcall	.+0      	; 0x3d5e <MDIO_ErrorS_SetPortValue+0x8>
    3d5e:	0f 92       	push	r0
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	8a 83       	std	Y+2, r24	; 0x02
    3d66:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    3d68:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6c:	28 2f       	mov	r18, r24
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	3d 83       	std	Y+5, r19	; 0x05
    3d72:	2c 83       	std	Y+4, r18	; 0x04
    3d74:	8c 81       	ldd	r24, Y+4	; 0x04
    3d76:	9d 81       	ldd	r25, Y+5	; 0x05
    3d78:	82 30       	cpi	r24, 0x02	; 2
    3d7a:	91 05       	cpc	r25, r1
    3d7c:	d9 f0       	breq	.+54     	; 0x3db4 <MDIO_ErrorS_SetPortValue+0x5e>
    3d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    3d80:	3d 81       	ldd	r19, Y+5	; 0x05
    3d82:	23 30       	cpi	r18, 0x03	; 3
    3d84:	31 05       	cpc	r19, r1
    3d86:	34 f4       	brge	.+12     	; 0x3d94 <MDIO_ErrorS_SetPortValue+0x3e>
    3d88:	8c 81       	ldd	r24, Y+4	; 0x04
    3d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d8c:	81 30       	cpi	r24, 0x01	; 1
    3d8e:	91 05       	cpc	r25, r1
    3d90:	61 f0       	breq	.+24     	; 0x3daa <MDIO_ErrorS_SetPortValue+0x54>
    3d92:	1f c0       	rjmp	.+62     	; 0x3dd2 <MDIO_ErrorS_SetPortValue+0x7c>
    3d94:	2c 81       	ldd	r18, Y+4	; 0x04
    3d96:	3d 81       	ldd	r19, Y+5	; 0x05
    3d98:	23 30       	cpi	r18, 0x03	; 3
    3d9a:	31 05       	cpc	r19, r1
    3d9c:	81 f0       	breq	.+32     	; 0x3dbe <MDIO_ErrorS_SetPortValue+0x68>
    3d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3da0:	9d 81       	ldd	r25, Y+5	; 0x05
    3da2:	84 30       	cpi	r24, 0x04	; 4
    3da4:	91 05       	cpc	r25, r1
    3da6:	81 f0       	breq	.+32     	; 0x3dc8 <MDIO_ErrorS_SetPortValue+0x72>
    3da8:	14 c0       	rjmp	.+40     	; 0x3dd2 <MDIO_ErrorS_SetPortValue+0x7c>
		case DIO_PORTA : PORTA = Copy_U8Value ;break;
    3daa:	eb e3       	ldi	r30, 0x3B	; 59
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	8b 81       	ldd	r24, Y+3	; 0x03
    3db0:	80 83       	st	Z, r24
    3db2:	11 c0       	rjmp	.+34     	; 0x3dd6 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTB : PORTB = Copy_U8Value ;break;
    3db4:	e8 e3       	ldi	r30, 0x38	; 56
    3db6:	f0 e0       	ldi	r31, 0x00	; 0
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dba:	80 83       	st	Z, r24
    3dbc:	0c c0       	rjmp	.+24     	; 0x3dd6 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTC : PORTC = Copy_U8Value ;break;
    3dbe:	e5 e3       	ldi	r30, 0x35	; 53
    3dc0:	f0 e0       	ldi	r31, 0x00	; 0
    3dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc4:	80 83       	st	Z, r24
    3dc6:	07 c0       	rjmp	.+14     	; 0x3dd6 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTD : PORTD = Copy_U8Value ;break;
    3dc8:	e2 e3       	ldi	r30, 0x32	; 50
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dce:	80 83       	st	Z, r24
    3dd0:	02 c0       	rjmp	.+4      	; 0x3dd6 <MDIO_ErrorS_SetPortValue+0x80>
		default:errorState = return_Nok; break;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	89 83       	std	Y+1, r24	; 0x01
	}

		return errorState;
    3dd6:	89 81       	ldd	r24, Y+1	; 0x01


}
    3dd8:	0f 90       	pop	r0
    3dda:	0f 90       	pop	r0
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	cf 91       	pop	r28
    3de4:	df 91       	pop	r29
    3de6:	08 95       	ret

00003de8 <MDIO_ErrorS_GetPortValue>:
Error_State_t MDIO_ErrorS_GetPortValue( u8 Copy_u8Port , u8* P_u8Value ){
    3de8:	df 93       	push	r29
    3dea:	cf 93       	push	r28
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <MDIO_ErrorS_GetPortValue+0x6>
    3dee:	00 d0       	rcall	.+0      	; 0x3df0 <MDIO_ErrorS_GetPortValue+0x8>
    3df0:	00 d0       	rcall	.+0      	; 0x3df2 <MDIO_ErrorS_GetPortValue+0xa>
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    3df6:	8a 83       	std	Y+2, r24	; 0x02
    3df8:	7c 83       	std	Y+4, r23	; 0x04
    3dfa:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    3dfc:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	28 2f       	mov	r18, r24
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	3e 83       	std	Y+6, r19	; 0x06
    3e06:	2d 83       	std	Y+5, r18	; 0x05
    3e08:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0c:	82 30       	cpi	r24, 0x02	; 2
    3e0e:	91 05       	cpc	r25, r1
    3e10:	e9 f0       	breq	.+58     	; 0x3e4c <MDIO_ErrorS_GetPortValue+0x64>
    3e12:	2d 81       	ldd	r18, Y+5	; 0x05
    3e14:	3e 81       	ldd	r19, Y+6	; 0x06
    3e16:	23 30       	cpi	r18, 0x03	; 3
    3e18:	31 05       	cpc	r19, r1
    3e1a:	34 f4       	brge	.+12     	; 0x3e28 <MDIO_ErrorS_GetPortValue+0x40>
    3e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e20:	81 30       	cpi	r24, 0x01	; 1
    3e22:	91 05       	cpc	r25, r1
    3e24:	61 f0       	breq	.+24     	; 0x3e3e <MDIO_ErrorS_GetPortValue+0x56>
    3e26:	27 c0       	rjmp	.+78     	; 0x3e76 <MDIO_ErrorS_GetPortValue+0x8e>
    3e28:	2d 81       	ldd	r18, Y+5	; 0x05
    3e2a:	3e 81       	ldd	r19, Y+6	; 0x06
    3e2c:	23 30       	cpi	r18, 0x03	; 3
    3e2e:	31 05       	cpc	r19, r1
    3e30:	a1 f0       	breq	.+40     	; 0x3e5a <MDIO_ErrorS_GetPortValue+0x72>
    3e32:	8d 81       	ldd	r24, Y+5	; 0x05
    3e34:	9e 81       	ldd	r25, Y+6	; 0x06
    3e36:	84 30       	cpi	r24, 0x04	; 4
    3e38:	91 05       	cpc	r25, r1
    3e3a:	b1 f0       	breq	.+44     	; 0x3e68 <MDIO_ErrorS_GetPortValue+0x80>
    3e3c:	1c c0       	rjmp	.+56     	; 0x3e76 <MDIO_ErrorS_GetPortValue+0x8e>
		case DIO_PORTA : *P_u8Value = PINA ;break;
    3e3e:	e9 e3       	ldi	r30, 0x39	; 57
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	80 81       	ld	r24, Z
    3e44:	eb 81       	ldd	r30, Y+3	; 0x03
    3e46:	fc 81       	ldd	r31, Y+4	; 0x04
    3e48:	80 83       	st	Z, r24
    3e4a:	17 c0       	rjmp	.+46     	; 0x3e7a <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTB : *P_u8Value = PINB ;break;
    3e4c:	e6 e3       	ldi	r30, 0x36	; 54
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	80 81       	ld	r24, Z
    3e52:	eb 81       	ldd	r30, Y+3	; 0x03
    3e54:	fc 81       	ldd	r31, Y+4	; 0x04
    3e56:	80 83       	st	Z, r24
    3e58:	10 c0       	rjmp	.+32     	; 0x3e7a <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTC : *P_u8Value = PINC ;break;
    3e5a:	e3 e3       	ldi	r30, 0x33	; 51
    3e5c:	f0 e0       	ldi	r31, 0x00	; 0
    3e5e:	80 81       	ld	r24, Z
    3e60:	eb 81       	ldd	r30, Y+3	; 0x03
    3e62:	fc 81       	ldd	r31, Y+4	; 0x04
    3e64:	80 83       	st	Z, r24
    3e66:	09 c0       	rjmp	.+18     	; 0x3e7a <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTD : *P_u8Value = PIND ;break;
    3e68:	e0 e3       	ldi	r30, 0x30	; 48
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	80 81       	ld	r24, Z
    3e6e:	eb 81       	ldd	r30, Y+3	; 0x03
    3e70:	fc 81       	ldd	r31, Y+4	; 0x04
    3e72:	80 83       	st	Z, r24
    3e74:	02 c0       	rjmp	.+4      	; 0x3e7a <MDIO_ErrorS_GetPortValue+0x92>
		default: errorState = return_Nok; break;
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorState;
    3e7a:	89 81       	ldd	r24, Y+1	; 0x01

}
    3e7c:	26 96       	adiw	r28, 0x06	; 6
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	08 95       	ret

00003e8e <MDIO_ErrorS_TogPinValue>:

Error_State_t MDIO_ErrorS_TogPinValue( u8 Copy_u8Port , u8 Copy_u8Pin ){
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	00 d0       	rcall	.+0      	; 0x3e94 <MDIO_ErrorS_TogPinValue+0x6>
    3e94:	00 d0       	rcall	.+0      	; 0x3e96 <MDIO_ErrorS_TogPinValue+0x8>
    3e96:	0f 92       	push	r0
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62
    3e9c:	8a 83       	std	Y+2, r24	; 0x02
    3e9e:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    3ea0:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Port){
    3ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea4:	28 2f       	mov	r18, r24
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	3d 83       	std	Y+5, r19	; 0x05
    3eaa:	2c 83       	std	Y+4, r18	; 0x04
    3eac:	8c 81       	ldd	r24, Y+4	; 0x04
    3eae:	9d 81       	ldd	r25, Y+5	; 0x05
    3eb0:	82 30       	cpi	r24, 0x02	; 2
    3eb2:	91 05       	cpc	r25, r1
    3eb4:	51 f1       	breq	.+84     	; 0x3f0a <MDIO_ErrorS_TogPinValue+0x7c>
    3eb6:	2c 81       	ldd	r18, Y+4	; 0x04
    3eb8:	3d 81       	ldd	r19, Y+5	; 0x05
    3eba:	23 30       	cpi	r18, 0x03	; 3
    3ebc:	31 05       	cpc	r19, r1
    3ebe:	34 f4       	brge	.+12     	; 0x3ecc <MDIO_ErrorS_TogPinValue+0x3e>
    3ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ec4:	81 30       	cpi	r24, 0x01	; 1
    3ec6:	91 05       	cpc	r25, r1
    3ec8:	61 f0       	breq	.+24     	; 0x3ee2 <MDIO_ErrorS_TogPinValue+0x54>
    3eca:	5b c0       	rjmp	.+182    	; 0x3f82 <MDIO_ErrorS_TogPinValue+0xf4>
    3ecc:	2c 81       	ldd	r18, Y+4	; 0x04
    3ece:	3d 81       	ldd	r19, Y+5	; 0x05
    3ed0:	23 30       	cpi	r18, 0x03	; 3
    3ed2:	31 05       	cpc	r19, r1
    3ed4:	71 f1       	breq	.+92     	; 0x3f32 <MDIO_ErrorS_TogPinValue+0xa4>
    3ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    3eda:	84 30       	cpi	r24, 0x04	; 4
    3edc:	91 05       	cpc	r25, r1
    3ede:	e9 f1       	breq	.+122    	; 0x3f5a <MDIO_ErrorS_TogPinValue+0xcc>
    3ee0:	50 c0       	rjmp	.+160    	; 0x3f82 <MDIO_ErrorS_TogPinValue+0xf4>
			case DIO_PORTA :  TOGGLE_BIT(PORTA,Copy_u8Pin) ; break;
    3ee2:	ab e3       	ldi	r26, 0x3B	; 59
    3ee4:	b0 e0       	ldi	r27, 0x00	; 0
    3ee6:	eb e3       	ldi	r30, 0x3B	; 59
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	80 81       	ld	r24, Z
    3eec:	48 2f       	mov	r20, r24
    3eee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef0:	28 2f       	mov	r18, r24
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	02 2e       	mov	r0, r18
    3efa:	02 c0       	rjmp	.+4      	; 0x3f00 <MDIO_ErrorS_TogPinValue+0x72>
    3efc:	88 0f       	add	r24, r24
    3efe:	99 1f       	adc	r25, r25
    3f00:	0a 94       	dec	r0
    3f02:	e2 f7       	brpl	.-8      	; 0x3efc <MDIO_ErrorS_TogPinValue+0x6e>
    3f04:	84 27       	eor	r24, r20
    3f06:	8c 93       	st	X, r24
    3f08:	3e c0       	rjmp	.+124    	; 0x3f86 <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTB :  TOGGLE_BIT(PORTB,Copy_u8Pin) ;break;
    3f0a:	a8 e3       	ldi	r26, 0x38	; 56
    3f0c:	b0 e0       	ldi	r27, 0x00	; 0
    3f0e:	e8 e3       	ldi	r30, 0x38	; 56
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	80 81       	ld	r24, Z
    3f14:	48 2f       	mov	r20, r24
    3f16:	8b 81       	ldd	r24, Y+3	; 0x03
    3f18:	28 2f       	mov	r18, r24
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	02 2e       	mov	r0, r18
    3f22:	02 c0       	rjmp	.+4      	; 0x3f28 <MDIO_ErrorS_TogPinValue+0x9a>
    3f24:	88 0f       	add	r24, r24
    3f26:	99 1f       	adc	r25, r25
    3f28:	0a 94       	dec	r0
    3f2a:	e2 f7       	brpl	.-8      	; 0x3f24 <MDIO_ErrorS_TogPinValue+0x96>
    3f2c:	84 27       	eor	r24, r20
    3f2e:	8c 93       	st	X, r24
    3f30:	2a c0       	rjmp	.+84     	; 0x3f86 <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTC :  TOGGLE_BIT(PORTC,Copy_u8Pin) ;break;
    3f32:	a5 e3       	ldi	r26, 0x35	; 53
    3f34:	b0 e0       	ldi	r27, 0x00	; 0
    3f36:	e5 e3       	ldi	r30, 0x35	; 53
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	80 81       	ld	r24, Z
    3f3c:	48 2f       	mov	r20, r24
    3f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f40:	28 2f       	mov	r18, r24
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	02 2e       	mov	r0, r18
    3f4a:	02 c0       	rjmp	.+4      	; 0x3f50 <MDIO_ErrorS_TogPinValue+0xc2>
    3f4c:	88 0f       	add	r24, r24
    3f4e:	99 1f       	adc	r25, r25
    3f50:	0a 94       	dec	r0
    3f52:	e2 f7       	brpl	.-8      	; 0x3f4c <MDIO_ErrorS_TogPinValue+0xbe>
    3f54:	84 27       	eor	r24, r20
    3f56:	8c 93       	st	X, r24
    3f58:	16 c0       	rjmp	.+44     	; 0x3f86 <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTD :  TOGGLE_BIT(PORTD,Copy_u8Pin) ;break;
    3f5a:	a2 e3       	ldi	r26, 0x32	; 50
    3f5c:	b0 e0       	ldi	r27, 0x00	; 0
    3f5e:	e2 e3       	ldi	r30, 0x32	; 50
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	80 81       	ld	r24, Z
    3f64:	48 2f       	mov	r20, r24
    3f66:	8b 81       	ldd	r24, Y+3	; 0x03
    3f68:	28 2f       	mov	r18, r24
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	02 2e       	mov	r0, r18
    3f72:	02 c0       	rjmp	.+4      	; 0x3f78 <MDIO_ErrorS_TogPinValue+0xea>
    3f74:	88 0f       	add	r24, r24
    3f76:	99 1f       	adc	r25, r25
    3f78:	0a 94       	dec	r0
    3f7a:	e2 f7       	brpl	.-8      	; 0x3f74 <MDIO_ErrorS_TogPinValue+0xe6>
    3f7c:	84 27       	eor	r24, r20
    3f7e:	8c 93       	st	X, r24
    3f80:	02 c0       	rjmp	.+4      	; 0x3f86 <MDIO_ErrorS_TogPinValue+0xf8>
			default: errorState = return_Nok; break;
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	89 83       	std	Y+1, r24	; 0x01
		}
		return errorState;
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	cf 91       	pop	r28
    3f94:	df 91       	pop	r29
    3f96:	08 95       	ret

00003f98 <MGIE_voidEnable>:
#include "BIT_MATH.h"

#include "MGIE_interface.h"
#include "MGIE_register.h"

void MGIE_voidEnable(void){
    3f98:	df 93       	push	r29
    3f9a:	cf 93       	push	r28
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( SREG ,SREG_I);
    3fa0:	af e5       	ldi	r26, 0x5F	; 95
    3fa2:	b0 e0       	ldi	r27, 0x00	; 0
    3fa4:	ef e5       	ldi	r30, 0x5F	; 95
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	80 81       	ld	r24, Z
    3faa:	80 68       	ori	r24, 0x80	; 128
    3fac:	8c 93       	st	X, r24
}
    3fae:	cf 91       	pop	r28
    3fb0:	df 91       	pop	r29
    3fb2:	08 95       	ret

00003fb4 <MGIE_voidDisable>:
void MGIE_voidDisable(void){
    3fb4:	df 93       	push	r29
    3fb6:	cf 93       	push	r28
    3fb8:	cd b7       	in	r28, 0x3d	; 61
    3fba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( SREG ,SREG_I);
    3fbc:	af e5       	ldi	r26, 0x5F	; 95
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	ef e5       	ldi	r30, 0x5F	; 95
    3fc2:	f0 e0       	ldi	r31, 0x00	; 0
    3fc4:	80 81       	ld	r24, Z
    3fc6:	8f 77       	andi	r24, 0x7F	; 127
    3fc8:	8c 93       	st	X, r24

}
    3fca:	cf 91       	pop	r28
    3fcc:	df 91       	pop	r29
    3fce:	08 95       	ret

00003fd0 <MSPI_voidInit>:

#include "MSPI_registers.h"
#include "MSPI_interface.h"
#include "MSPI_private.h"
#include "MSPI_config.h"
void MSPI_voidInit(){
    3fd0:	df 93       	push	r29
    3fd2:	cf 93       	push	r28
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62

	/* selecting my device is master or slave from config */
#if SPI_MASTER_OR_SLAVE == SPI_MASTER
	SET_BIT(SPCR,SPCR_MSTR);
    3fd8:	ad e2       	ldi	r26, 0x2D	; 45
    3fda:	b0 e0       	ldi	r27, 0x00	; 0
    3fdc:	ed e2       	ldi	r30, 0x2D	; 45
    3fde:	f0 e0       	ldi	r31, 0x00	; 0
    3fe0:	80 81       	ld	r24, Z
    3fe2:	80 61       	ori	r24, 0x10	; 16
    3fe4:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPCR_SPR0);
			CLR_BIT(SPCR,SPCR_SPR1);
			SET_BIT(SPSR,SPSR_SPI2X);
	#elif SPI_CLK_DIVIDER	== SPI_SYS_CLK_DIV_16
			/* selecting prescaler (frequancy) as dev bt 16 */
			SET_BIT(SPCR,SPCR_SPR0);
    3fe6:	ad e2       	ldi	r26, 0x2D	; 45
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	ed e2       	ldi	r30, 0x2D	; 45
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	80 81       	ld	r24, Z
    3ff0:	81 60       	ori	r24, 0x01	; 1
    3ff2:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPCR_SPR1);
    3ff4:	ad e2       	ldi	r26, 0x2D	; 45
    3ff6:	b0 e0       	ldi	r27, 0x00	; 0
    3ff8:	ed e2       	ldi	r30, 0x2D	; 45
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	80 81       	ld	r24, Z
    3ffe:	8d 7f       	andi	r24, 0xFD	; 253
    4000:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPSR_SPI2X);
    4002:	ae e2       	ldi	r26, 0x2E	; 46
    4004:	b0 e0       	ldi	r27, 0x00	; 0
    4006:	ee e2       	ldi	r30, 0x2E	; 46
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	80 81       	ld	r24, Z
    400c:	8e 7f       	andi	r24, 0xFE	; 254
    400e:	8c 93       	st	X, r24
#endif

	/* select data order  */
#if SPI_DATA_ORDER	== SPI_LSB_FIRST
	/* select data order : least significant */
	SET_BIT(SPCR,SPCR_DORD);
    4010:	ad e2       	ldi	r26, 0x2D	; 45
    4012:	b0 e0       	ldi	r27, 0x00	; 0
    4014:	ed e2       	ldi	r30, 0x2D	; 45
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	80 81       	ld	r24, Z
    401a:	80 62       	ori	r24, 0x20	; 32
    401c:	8c 93       	st	X, r24
#endif

		/* choosispcrng clk polarity */
#if SPI_CLK_POLARITY	== SPI_RISING_FIRST
	/* choosispcrng clk polarity as: leading edge is rising */
	CLR_BIT(SPCR,SPCR_CPOL);
    401e:	ad e2       	ldi	r26, 0x2D	; 45
    4020:	b0 e0       	ldi	r27, 0x00	; 0
    4022:	ed e2       	ldi	r30, 0x2D	; 45
    4024:	f0 e0       	ldi	r31, 0x00	; 0
    4026:	80 81       	ld	r24, Z
    4028:	87 7f       	andi	r24, 0xF7	; 247
    402a:	8c 93       	st	X, r24
#endif

	/* seceting clock phase setup:write, samole:read */
#if SPI_CLK_PHASE == SPI_WRITE_FIRST
	/* seceting clock phase as: leading edge is setup "Write" */
	SET_BIT(SPCR,SPCR_CPHA);
    402c:	ad e2       	ldi	r26, 0x2D	; 45
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	ed e2       	ldi	r30, 0x2D	; 45
    4032:	f0 e0       	ldi	r31, 0x00	; 0
    4034:	80 81       	ld	r24, Z
    4036:	84 60       	ori	r24, 0x04	; 4
    4038:	8c 93       	st	X, r24
#else
#warning "invalid input"
#endif

	/* enable spi */
	SET_BIT(SPCR,SPCR_SPE);
    403a:	ad e2       	ldi	r26, 0x2D	; 45
    403c:	b0 e0       	ldi	r27, 0x00	; 0
    403e:	ed e2       	ldi	r30, 0x2D	; 45
    4040:	f0 e0       	ldi	r31, 0x00	; 0
    4042:	80 81       	ld	r24, Z
    4044:	80 64       	ori	r24, 0x40	; 64
    4046:	8c 93       	st	X, r24

}
    4048:	cf 91       	pop	r28
    404a:	df 91       	pop	r29
    404c:	08 95       	ret

0000404e <MSPI_u8TransciveByte>:
u8 MSPI_u8TransciveByte(u8 Copy_u8Data){
    404e:	df 93       	push	r29
    4050:	cf 93       	push	r28
    4052:	0f 92       	push	r0
    4054:	cd b7       	in	r28, 0x3d	; 61
    4056:	de b7       	in	r29, 0x3e	; 62
    4058:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    405a:	ef e2       	ldi	r30, 0x2F	; 47
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	89 81       	ldd	r24, Y+1	; 0x01
    4060:	80 83       	st	Z, r24
	/*read SPSR_SPIF then read SPDR*/
	while(GET_BIT(SPSR,SPSR_SPIF)==0);
    4062:	ee e2       	ldi	r30, 0x2E	; 46
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	80 81       	ld	r24, Z
    4068:	88 23       	and	r24, r24
    406a:	dc f7       	brge	.-10     	; 0x4062 <MSPI_u8TransciveByte+0x14>
	
	SET_BIT(SPSR,SPSR_SPIF);
    406c:	ae e2       	ldi	r26, 0x2E	; 46
    406e:	b0 e0       	ldi	r27, 0x00	; 0
    4070:	ee e2       	ldi	r30, 0x2E	; 46
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	80 81       	ld	r24, Z
    4076:	80 68       	ori	r24, 0x80	; 128
    4078:	8c 93       	st	X, r24
	return SPDR;
    407a:	ef e2       	ldi	r30, 0x2F	; 47
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	80 81       	ld	r24, Z
}
    4080:	0f 90       	pop	r0
    4082:	cf 91       	pop	r28
    4084:	df 91       	pop	r29
    4086:	08 95       	ret

00004088 <MTIMER0_voidInit>:
#include "MTIMER_regesters.h"
#include "MTimer_config.h"
#include "MTIMER_private.h"


void MTIMER0_voidInit(void){
    4088:	df 93       	push	r29
    408a:	cf 93       	push	r28
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == TIMER0_NORMAL

	/*selecting  wave generation mode as normal mode */
	CLR_BIT(TCCR0,TCCR0_WGM00);
    4090:	a3 e5       	ldi	r26, 0x53	; 83
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	e3 e5       	ldi	r30, 0x53	; 83
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	80 81       	ld	r24, Z
    409a:	8f 7b       	andi	r24, 0xBF	; 191
    409c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
    409e:	a3 e5       	ldi	r26, 0x53	; 83
    40a0:	b0 e0       	ldi	r27, 0x00	; 0
    40a2:	e3 e5       	ldi	r30, 0x53	; 83
    40a4:	f0 e0       	ldi	r31, 0x00	; 0
    40a6:	80 81       	ld	r24, Z
    40a8:	87 7f       	andi	r24, 0xF7	; 247
    40aa:	8c 93       	st	X, r24
	/* enable timer 0 interrupt SIE */
	SET_BIT(TIMSK,TIMSK_TOIE0);
    40ac:	a9 e5       	ldi	r26, 0x59	; 89
    40ae:	b0 e0       	ldi	r27, 0x00	; 0
    40b0:	e9 e5       	ldi	r30, 0x59	; 89
    40b2:	f0 e0       	ldi	r31, 0x00	; 0
    40b4:	80 81       	ld	r24, Z
    40b6:	81 60       	ori	r24, 0x01	; 1
    40b8:	8c 93       	st	X, r24
	/* setting preload value */
	TCNT0 = PRELOAD_VALUE;
    40ba:	e2 e5       	ldi	r30, 0x52	; 82
    40bc:	f0 e0       	ldi	r31, 0x00	; 0
    40be:	8c e0       	ldi	r24, 0x0C	; 12
    40c0:	80 83       	st	Z, r24
	CLR_BIT(TCCR0,TCCR0_COM00);
	SET_BIT(TCCR0,TCCR0_COM01);
#endif

	/* selecting timer 0 prescaler as dev by 1024*/
	SET_BIT(TCCR0,TCCR0_CS00);
    40c2:	a3 e5       	ldi	r26, 0x53	; 83
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	e3 e5       	ldi	r30, 0x53	; 83
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	80 81       	ld	r24, Z
    40cc:	81 60       	ori	r24, 0x01	; 1
    40ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    40d0:	a3 e5       	ldi	r26, 0x53	; 83
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	e3 e5       	ldi	r30, 0x53	; 83
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	8d 7f       	andi	r24, 0xFD	; 253
    40dc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS02);
    40de:	a3 e5       	ldi	r26, 0x53	; 83
    40e0:	b0 e0       	ldi	r27, 0x00	; 0
    40e2:	e3 e5       	ldi	r30, 0x53	; 83
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	80 81       	ld	r24, Z
    40e8:	84 60       	ori	r24, 0x04	; 4
    40ea:	8c 93       	st	X, r24

}
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	08 95       	ret

000040f2 <MTIMER0_voidDisable>:
void MTIMER0_voidDisable(void){
    40f2:	df 93       	push	r29
    40f4:	cf 93       	push	r28
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
	/*No clock source */
	CLR_BIT(TCCR0,TCCR0_CS00);
    40fa:	a3 e5       	ldi	r26, 0x53	; 83
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	e3 e5       	ldi	r30, 0x53	; 83
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	80 81       	ld	r24, Z
    4104:	8e 7f       	andi	r24, 0xFE	; 254
    4106:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    4108:	a3 e5       	ldi	r26, 0x53	; 83
    410a:	b0 e0       	ldi	r27, 0x00	; 0
    410c:	e3 e5       	ldi	r30, 0x53	; 83
    410e:	f0 e0       	ldi	r31, 0x00	; 0
    4110:	80 81       	ld	r24, Z
    4112:	8d 7f       	andi	r24, 0xFD	; 253
    4114:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    4116:	a3 e5       	ldi	r26, 0x53	; 83
    4118:	b0 e0       	ldi	r27, 0x00	; 0
    411a:	e3 e5       	ldi	r30, 0x53	; 83
    411c:	f0 e0       	ldi	r31, 0x00	; 0
    411e:	80 81       	ld	r24, Z
    4120:	8b 7f       	andi	r24, 0xFB	; 251
    4122:	8c 93       	st	X, r24

}
    4124:	cf 91       	pop	r28
    4126:	df 91       	pop	r29
    4128:	08 95       	ret

0000412a <MTIMER0_voidSetPreload>:
void MTIMER0_voidSetPreload(u8 Copy_u8Preload){
    412a:	df 93       	push	r29
    412c:	cf 93       	push	r28
    412e:	0f 92       	push	r0
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
    4136:	e2 e5       	ldi	r30, 0x52	; 82
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	89 81       	ldd	r24, Y+1	; 0x01
    413c:	80 83       	st	Z, r24

}
    413e:	0f 90       	pop	r0
    4140:	cf 91       	pop	r28
    4142:	df 91       	pop	r29
    4144:	08 95       	ret

00004146 <MTIMER0_voidSetDutyCycle>:
void MTIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle){
    4146:	df 93       	push	r29
    4148:	cf 93       	push	r28
    414a:	0f 92       	push	r0
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
    4150:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle;
    4152:	ec e5       	ldi	r30, 0x5C	; 92
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	89 81       	ldd	r24, Y+1	; 0x01
    4158:	80 83       	st	Z, r24
}
    415a:	0f 90       	pop	r0
    415c:	cf 91       	pop	r28
    415e:	df 91       	pop	r29
    4160:	08 95       	ret

00004162 <setCallBackTimer0>:

void (*callBackTimer0) (void);
void setCallBackTimer0(void (*fp)(void)){
    4162:	df 93       	push	r29
    4164:	cf 93       	push	r28
    4166:	00 d0       	rcall	.+0      	; 0x4168 <setCallBackTimer0+0x6>
    4168:	cd b7       	in	r28, 0x3d	; 61
    416a:	de b7       	in	r29, 0x3e	; 62
    416c:	9a 83       	std	Y+2, r25	; 0x02
    416e:	89 83       	std	Y+1, r24	; 0x01
	callBackTimer0 = fp;
    4170:	89 81       	ldd	r24, Y+1	; 0x01
    4172:	9a 81       	ldd	r25, Y+2	; 0x02
    4174:	90 93 50 02 	sts	0x0250, r25
    4178:	80 93 4f 02 	sts	0x024F, r24
}
    417c:	0f 90       	pop	r0
    417e:	0f 90       	pop	r0
    4180:	cf 91       	pop	r28
    4182:	df 91       	pop	r29
    4184:	08 95       	ret

00004186 <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void) {
    4186:	1f 92       	push	r1
    4188:	0f 92       	push	r0
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	0f 92       	push	r0
    418e:	11 24       	eor	r1, r1
    4190:	2f 93       	push	r18
    4192:	3f 93       	push	r19
    4194:	4f 93       	push	r20
    4196:	5f 93       	push	r21
    4198:	6f 93       	push	r22
    419a:	7f 93       	push	r23
    419c:	8f 93       	push	r24
    419e:	9f 93       	push	r25
    41a0:	af 93       	push	r26
    41a2:	bf 93       	push	r27
    41a4:	ef 93       	push	r30
    41a6:	ff 93       	push	r31
    41a8:	df 93       	push	r29
    41aa:	cf 93       	push	r28
    41ac:	cd b7       	in	r28, 0x3d	; 61
    41ae:	de b7       	in	r29, 0x3e	; 62
	callBackTimer0();
    41b0:	e0 91 4f 02 	lds	r30, 0x024F
    41b4:	f0 91 50 02 	lds	r31, 0x0250
    41b8:	09 95       	icall
}
    41ba:	cf 91       	pop	r28
    41bc:	df 91       	pop	r29
    41be:	ff 91       	pop	r31
    41c0:	ef 91       	pop	r30
    41c2:	bf 91       	pop	r27
    41c4:	af 91       	pop	r26
    41c6:	9f 91       	pop	r25
    41c8:	8f 91       	pop	r24
    41ca:	7f 91       	pop	r23
    41cc:	6f 91       	pop	r22
    41ce:	5f 91       	pop	r21
    41d0:	4f 91       	pop	r20
    41d2:	3f 91       	pop	r19
    41d4:	2f 91       	pop	r18
    41d6:	0f 90       	pop	r0
    41d8:	0f be       	out	0x3f, r0	; 63
    41da:	0f 90       	pop	r0
    41dc:	1f 90       	pop	r1
    41de:	18 95       	reti

000041e0 <MTIMER1_voidInit>:

void MTIMER1_voidInit( Timer1Modes_t Copy_Timer1_Mode , Top_t Copy_Timer1TopMode , Prescaler_t Copy_enuPrescalerValue ){
    41e0:	df 93       	push	r29
    41e2:	cf 93       	push	r28
    41e4:	cd b7       	in	r28, 0x3d	; 61
    41e6:	de b7       	in	r29, 0x3e	; 62
    41e8:	29 97       	sbiw	r28, 0x09	; 9
    41ea:	0f b6       	in	r0, 0x3f	; 63
    41ec:	f8 94       	cli
    41ee:	de bf       	out	0x3e, r29	; 62
    41f0:	0f be       	out	0x3f, r0	; 63
    41f2:	cd bf       	out	0x3d, r28	; 61
    41f4:	89 83       	std	Y+1, r24	; 0x01
    41f6:	6a 83       	std	Y+2, r22	; 0x02
    41f8:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_Timer1_Mode) {
    41fa:	89 81       	ldd	r24, Y+1	; 0x01
    41fc:	28 2f       	mov	r18, r24
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	39 87       	std	Y+9, r19	; 0x09
    4202:	28 87       	std	Y+8, r18	; 0x08
    4204:	88 85       	ldd	r24, Y+8	; 0x08
    4206:	99 85       	ldd	r25, Y+9	; 0x09
    4208:	82 30       	cpi	r24, 0x02	; 2
    420a:	91 05       	cpc	r25, r1
    420c:	09 f4       	brne	.+2      	; 0x4210 <MTIMER1_voidInit+0x30>
    420e:	5c c0       	rjmp	.+184    	; 0x42c8 <MTIMER1_voidInit+0xe8>
    4210:	28 85       	ldd	r18, Y+8	; 0x08
    4212:	39 85       	ldd	r19, Y+9	; 0x09
    4214:	23 30       	cpi	r18, 0x03	; 3
    4216:	31 05       	cpc	r19, r1
    4218:	54 f4       	brge	.+20     	; 0x422e <MTIMER1_voidInit+0x4e>
    421a:	88 85       	ldd	r24, Y+8	; 0x08
    421c:	99 85       	ldd	r25, Y+9	; 0x09
    421e:	00 97       	sbiw	r24, 0x00	; 0
    4220:	c9 f0       	breq	.+50     	; 0x4254 <MTIMER1_voidInit+0x74>
    4222:	28 85       	ldd	r18, Y+8	; 0x08
    4224:	39 85       	ldd	r19, Y+9	; 0x09
    4226:	21 30       	cpi	r18, 0x01	; 1
    4228:	31 05       	cpc	r19, r1
    422a:	89 f1       	breq	.+98     	; 0x428e <MTIMER1_voidInit+0xae>
    422c:	c0 c0       	rjmp	.+384    	; 0x43ae <MTIMER1_voidInit+0x1ce>
    422e:	88 85       	ldd	r24, Y+8	; 0x08
    4230:	99 85       	ldd	r25, Y+9	; 0x09
    4232:	84 30       	cpi	r24, 0x04	; 4
    4234:	91 05       	cpc	r25, r1
    4236:	09 f4       	brne	.+2      	; 0x423a <MTIMER1_voidInit+0x5a>
    4238:	81 c0       	rjmp	.+258    	; 0x433c <MTIMER1_voidInit+0x15c>
    423a:	28 85       	ldd	r18, Y+8	; 0x08
    423c:	39 85       	ldd	r19, Y+9	; 0x09
    423e:	24 30       	cpi	r18, 0x04	; 4
    4240:	31 05       	cpc	r19, r1
    4242:	0c f4       	brge	.+2      	; 0x4246 <MTIMER1_voidInit+0x66>
    4244:	5e c0       	rjmp	.+188    	; 0x4302 <MTIMER1_voidInit+0x122>
    4246:	88 85       	ldd	r24, Y+8	; 0x08
    4248:	99 85       	ldd	r25, Y+9	; 0x09
    424a:	85 30       	cpi	r24, 0x05	; 5
    424c:	91 05       	cpc	r25, r1
    424e:	09 f4       	brne	.+2      	; 0x4252 <MTIMER1_voidInit+0x72>
    4250:	92 c0       	rjmp	.+292    	; 0x4376 <MTIMER1_voidInit+0x196>
    4252:	ad c0       	rjmp	.+346    	; 0x43ae <MTIMER1_voidInit+0x1ce>
	case NORMAL_MODE : {
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    4254:	af e4       	ldi	r26, 0x4F	; 79
    4256:	b0 e0       	ldi	r27, 0x00	; 0
    4258:	ef e4       	ldi	r30, 0x4F	; 79
    425a:	f0 e0       	ldi	r31, 0x00	; 0
    425c:	80 81       	ld	r24, Z
    425e:	8f 7b       	andi	r24, 0xBF	; 191
    4260:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    4262:	af e4       	ldi	r26, 0x4F	; 79
    4264:	b0 e0       	ldi	r27, 0x00	; 0
    4266:	ef e4       	ldi	r30, 0x4F	; 79
    4268:	f0 e0       	ldi	r31, 0x00	; 0
    426a:	80 81       	ld	r24, Z
    426c:	8f 7e       	andi	r24, 0xEF	; 239
    426e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    4270:	af e4       	ldi	r26, 0x4F	; 79
    4272:	b0 e0       	ldi	r27, 0x00	; 0
    4274:	ef e4       	ldi	r30, 0x4F	; 79
    4276:	f0 e0       	ldi	r31, 0x00	; 0
    4278:	80 81       	ld	r24, Z
    427a:	8f 77       	andi	r24, 0x7F	; 127
    427c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    427e:	af e4       	ldi	r26, 0x4F	; 79
    4280:	b0 e0       	ldi	r27, 0x00	; 0
    4282:	ef e4       	ldi	r30, 0x4F	; 79
    4284:	f0 e0       	ldi	r31, 0x00	; 0
    4286:	80 81       	ld	r24, Z
    4288:	8f 7d       	andi	r24, 0xDF	; 223
    428a:	8c 93       	st	X, r24
    428c:	90 c0       	rjmp	.+288    	; 0x43ae <MTIMER1_voidInit+0x1ce>
		break;
	}
	case CTC_TOGGLE : {
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    428e:	af e4       	ldi	r26, 0x4F	; 79
    4290:	b0 e0       	ldi	r27, 0x00	; 0
    4292:	ef e4       	ldi	r30, 0x4F	; 79
    4294:	f0 e0       	ldi	r31, 0x00	; 0
    4296:	80 81       	ld	r24, Z
    4298:	80 64       	ori	r24, 0x40	; 64
    429a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    429c:	af e4       	ldi	r26, 0x4F	; 79
    429e:	b0 e0       	ldi	r27, 0x00	; 0
    42a0:	ef e4       	ldi	r30, 0x4F	; 79
    42a2:	f0 e0       	ldi	r31, 0x00	; 0
    42a4:	80 81       	ld	r24, Z
    42a6:	80 61       	ori	r24, 0x10	; 16
    42a8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    42aa:	af e4       	ldi	r26, 0x4F	; 79
    42ac:	b0 e0       	ldi	r27, 0x00	; 0
    42ae:	ef e4       	ldi	r30, 0x4F	; 79
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	80 81       	ld	r24, Z
    42b4:	8f 77       	andi	r24, 0x7F	; 127
    42b6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    42b8:	af e4       	ldi	r26, 0x4F	; 79
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	ef e4       	ldi	r30, 0x4F	; 79
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	80 81       	ld	r24, Z
    42c2:	8f 7d       	andi	r24, 0xDF	; 223
    42c4:	8c 93       	st	X, r24
    42c6:	73 c0       	rjmp	.+230    	; 0x43ae <MTIMER1_voidInit+0x1ce>
		break;
	}
	case CTC_SET : {
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    42c8:	af e4       	ldi	r26, 0x4F	; 79
    42ca:	b0 e0       	ldi	r27, 0x00	; 0
    42cc:	ef e4       	ldi	r30, 0x4F	; 79
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	80 81       	ld	r24, Z
    42d2:	80 64       	ori	r24, 0x40	; 64
    42d4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    42d6:	af e4       	ldi	r26, 0x4F	; 79
    42d8:	b0 e0       	ldi	r27, 0x00	; 0
    42da:	ef e4       	ldi	r30, 0x4F	; 79
    42dc:	f0 e0       	ldi	r31, 0x00	; 0
    42de:	80 81       	ld	r24, Z
    42e0:	80 61       	ori	r24, 0x10	; 16
    42e2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    42e4:	af e4       	ldi	r26, 0x4F	; 79
    42e6:	b0 e0       	ldi	r27, 0x00	; 0
    42e8:	ef e4       	ldi	r30, 0x4F	; 79
    42ea:	f0 e0       	ldi	r31, 0x00	; 0
    42ec:	80 81       	ld	r24, Z
    42ee:	80 68       	ori	r24, 0x80	; 128
    42f0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    42f2:	af e4       	ldi	r26, 0x4F	; 79
    42f4:	b0 e0       	ldi	r27, 0x00	; 0
    42f6:	ef e4       	ldi	r30, 0x4F	; 79
    42f8:	f0 e0       	ldi	r31, 0x00	; 0
    42fa:	80 81       	ld	r24, Z
    42fc:	80 62       	ori	r24, 0x20	; 32
    42fe:	8c 93       	st	X, r24
    4300:	56 c0       	rjmp	.+172    	; 0x43ae <MTIMER1_voidInit+0x1ce>
		break;
	}
	case CTC_CLR : {
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    4302:	af e4       	ldi	r26, 0x4F	; 79
    4304:	b0 e0       	ldi	r27, 0x00	; 0
    4306:	ef e4       	ldi	r30, 0x4F	; 79
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	80 81       	ld	r24, Z
    430c:	8f 7b       	andi	r24, 0xBF	; 191
    430e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    4310:	af e4       	ldi	r26, 0x4F	; 79
    4312:	b0 e0       	ldi	r27, 0x00	; 0
    4314:	ef e4       	ldi	r30, 0x4F	; 79
    4316:	f0 e0       	ldi	r31, 0x00	; 0
    4318:	80 81       	ld	r24, Z
    431a:	8f 7e       	andi	r24, 0xEF	; 239
    431c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    431e:	af e4       	ldi	r26, 0x4F	; 79
    4320:	b0 e0       	ldi	r27, 0x00	; 0
    4322:	ef e4       	ldi	r30, 0x4F	; 79
    4324:	f0 e0       	ldi	r31, 0x00	; 0
    4326:	80 81       	ld	r24, Z
    4328:	80 68       	ori	r24, 0x80	; 128
    432a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    432c:	af e4       	ldi	r26, 0x4F	; 79
    432e:	b0 e0       	ldi	r27, 0x00	; 0
    4330:	ef e4       	ldi	r30, 0x4F	; 79
    4332:	f0 e0       	ldi	r31, 0x00	; 0
    4334:	80 81       	ld	r24, Z
    4336:	80 62       	ori	r24, 0x20	; 32
    4338:	8c 93       	st	X, r24
    433a:	39 c0       	rjmp	.+114    	; 0x43ae <MTIMER1_voidInit+0x1ce>
		break;
	}
	case FAST_PWM_NON_INVERTING : {
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    433c:	af e4       	ldi	r26, 0x4F	; 79
    433e:	b0 e0       	ldi	r27, 0x00	; 0
    4340:	ef e4       	ldi	r30, 0x4F	; 79
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	80 81       	ld	r24, Z
    4346:	8f 7b       	andi	r24, 0xBF	; 191
    4348:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    434a:	af e4       	ldi	r26, 0x4F	; 79
    434c:	b0 e0       	ldi	r27, 0x00	; 0
    434e:	ef e4       	ldi	r30, 0x4F	; 79
    4350:	f0 e0       	ldi	r31, 0x00	; 0
    4352:	80 81       	ld	r24, Z
    4354:	8f 7e       	andi	r24, 0xEF	; 239
    4356:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    4358:	af e4       	ldi	r26, 0x4F	; 79
    435a:	b0 e0       	ldi	r27, 0x00	; 0
    435c:	ef e4       	ldi	r30, 0x4F	; 79
    435e:	f0 e0       	ldi	r31, 0x00	; 0
    4360:	80 81       	ld	r24, Z
    4362:	80 68       	ori	r24, 0x80	; 128
    4364:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    4366:	af e4       	ldi	r26, 0x4F	; 79
    4368:	b0 e0       	ldi	r27, 0x00	; 0
    436a:	ef e4       	ldi	r30, 0x4F	; 79
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	80 81       	ld	r24, Z
    4370:	80 62       	ori	r24, 0x20	; 32
    4372:	8c 93       	st	X, r24
    4374:	1c c0       	rjmp	.+56     	; 0x43ae <MTIMER1_voidInit+0x1ce>
		break;
	}
	case FAST_PWM_INVERTING : {
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    4376:	af e4       	ldi	r26, 0x4F	; 79
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	ef e4       	ldi	r30, 0x4F	; 79
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	80 64       	ori	r24, 0x40	; 64
    4382:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    4384:	af e4       	ldi	r26, 0x4F	; 79
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	ef e4       	ldi	r30, 0x4F	; 79
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	80 61       	ori	r24, 0x10	; 16
    4390:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    4392:	af e4       	ldi	r26, 0x4F	; 79
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	ef e4       	ldi	r30, 0x4F	; 79
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	80 81       	ld	r24, Z
    439c:	80 68       	ori	r24, 0x80	; 128
    439e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    43a0:	af e4       	ldi	r26, 0x4F	; 79
    43a2:	b0 e0       	ldi	r27, 0x00	; 0
    43a4:	ef e4       	ldi	r30, 0x4F	; 79
    43a6:	f0 e0       	ldi	r31, 0x00	; 0
    43a8:	80 81       	ld	r24, Z
    43aa:	80 62       	ori	r24, 0x20	; 32
    43ac:	8c 93       	st	X, r24
	}

	default: break;
	}

	switch(Copy_Timer1TopMode) {
    43ae:	8a 81       	ldd	r24, Y+2	; 0x02
    43b0:	28 2f       	mov	r18, r24
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	3f 83       	std	Y+7, r19	; 0x07
    43b6:	2e 83       	std	Y+6, r18	; 0x06
    43b8:	8e 81       	ldd	r24, Y+6	; 0x06
    43ba:	9f 81       	ldd	r25, Y+7	; 0x07
    43bc:	82 30       	cpi	r24, 0x02	; 2
    43be:	91 05       	cpc	r25, r1
    43c0:	09 f4       	brne	.+2      	; 0x43c4 <MTIMER1_voidInit+0x1e4>
    43c2:	56 c0       	rjmp	.+172    	; 0x4470 <MTIMER1_voidInit+0x290>
    43c4:	2e 81       	ldd	r18, Y+6	; 0x06
    43c6:	3f 81       	ldd	r19, Y+7	; 0x07
    43c8:	23 30       	cpi	r18, 0x03	; 3
    43ca:	31 05       	cpc	r19, r1
    43cc:	54 f4       	brge	.+20     	; 0x43e2 <MTIMER1_voidInit+0x202>
    43ce:	8e 81       	ldd	r24, Y+6	; 0x06
    43d0:	9f 81       	ldd	r25, Y+7	; 0x07
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	81 f1       	breq	.+96     	; 0x4436 <MTIMER1_voidInit+0x256>
    43d6:	2e 81       	ldd	r18, Y+6	; 0x06
    43d8:	3f 81       	ldd	r19, Y+7	; 0x07
    43da:	21 30       	cpi	r18, 0x01	; 1
    43dc:	31 05       	cpc	r19, r1
    43de:	71 f0       	breq	.+28     	; 0x43fc <MTIMER1_voidInit+0x21c>
    43e0:	9d c0       	rjmp	.+314    	; 0x451c <MTIMER1_voidInit+0x33c>
    43e2:	8e 81       	ldd	r24, Y+6	; 0x06
    43e4:	9f 81       	ldd	r25, Y+7	; 0x07
    43e6:	83 30       	cpi	r24, 0x03	; 3
    43e8:	91 05       	cpc	r25, r1
    43ea:	09 f4       	brne	.+2      	; 0x43ee <MTIMER1_voidInit+0x20e>
    43ec:	5e c0       	rjmp	.+188    	; 0x44aa <MTIMER1_voidInit+0x2ca>
    43ee:	2e 81       	ldd	r18, Y+6	; 0x06
    43f0:	3f 81       	ldd	r19, Y+7	; 0x07
    43f2:	24 30       	cpi	r18, 0x04	; 4
    43f4:	31 05       	cpc	r19, r1
    43f6:	09 f4       	brne	.+2      	; 0x43fa <MTIMER1_voidInit+0x21a>
    43f8:	75 c0       	rjmp	.+234    	; 0x44e4 <MTIMER1_voidInit+0x304>
    43fa:	90 c0       	rjmp	.+288    	; 0x451c <MTIMER1_voidInit+0x33c>
	case TOP_CTC_ICR1 : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    43fc:	af e4       	ldi	r26, 0x4F	; 79
    43fe:	b0 e0       	ldi	r27, 0x00	; 0
    4400:	ef e4       	ldi	r30, 0x4F	; 79
    4402:	f0 e0       	ldi	r31, 0x00	; 0
    4404:	80 81       	ld	r24, Z
    4406:	8e 7f       	andi	r24, 0xFE	; 254
    4408:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    440a:	af e4       	ldi	r26, 0x4F	; 79
    440c:	b0 e0       	ldi	r27, 0x00	; 0
    440e:	ef e4       	ldi	r30, 0x4F	; 79
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	80 81       	ld	r24, Z
    4414:	8d 7f       	andi	r24, 0xFD	; 253
    4416:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    4418:	ae e4       	ldi	r26, 0x4E	; 78
    441a:	b0 e0       	ldi	r27, 0x00	; 0
    441c:	ee e4       	ldi	r30, 0x4E	; 78
    441e:	f0 e0       	ldi	r31, 0x00	; 0
    4420:	80 81       	ld	r24, Z
    4422:	88 60       	ori	r24, 0x08	; 8
    4424:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    4426:	ae e4       	ldi	r26, 0x4E	; 78
    4428:	b0 e0       	ldi	r27, 0x00	; 0
    442a:	ee e4       	ldi	r30, 0x4E	; 78
    442c:	f0 e0       	ldi	r31, 0x00	; 0
    442e:	80 81       	ld	r24, Z
    4430:	80 61       	ori	r24, 0x10	; 16
    4432:	8c 93       	st	X, r24
    4434:	73 c0       	rjmp	.+230    	; 0x451c <MTIMER1_voidInit+0x33c>
		break;
	}
	case TOP_CTC_OCR1A : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4436:	af e4       	ldi	r26, 0x4F	; 79
    4438:	b0 e0       	ldi	r27, 0x00	; 0
    443a:	ef e4       	ldi	r30, 0x4F	; 79
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	8e 7f       	andi	r24, 0xFE	; 254
    4442:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    4444:	af e4       	ldi	r26, 0x4F	; 79
    4446:	b0 e0       	ldi	r27, 0x00	; 0
    4448:	ef e4       	ldi	r30, 0x4F	; 79
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	80 81       	ld	r24, Z
    444e:	8d 7f       	andi	r24, 0xFD	; 253
    4450:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    4452:	ae e4       	ldi	r26, 0x4E	; 78
    4454:	b0 e0       	ldi	r27, 0x00	; 0
    4456:	ee e4       	ldi	r30, 0x4E	; 78
    4458:	f0 e0       	ldi	r31, 0x00	; 0
    445a:	80 81       	ld	r24, Z
    445c:	88 60       	ori	r24, 0x08	; 8
    445e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    4460:	ae e4       	ldi	r26, 0x4E	; 78
    4462:	b0 e0       	ldi	r27, 0x00	; 0
    4464:	ee e4       	ldi	r30, 0x4E	; 78
    4466:	f0 e0       	ldi	r31, 0x00	; 0
    4468:	80 81       	ld	r24, Z
    446a:	8f 7e       	andi	r24, 0xEF	; 239
    446c:	8c 93       	st	X, r24
    446e:	56 c0       	rjmp	.+172    	; 0x451c <MTIMER1_voidInit+0x33c>
		break;
	}
	case TOP_FPWM_ICR1 : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4470:	af e4       	ldi	r26, 0x4F	; 79
    4472:	b0 e0       	ldi	r27, 0x00	; 0
    4474:	ef e4       	ldi	r30, 0x4F	; 79
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	80 81       	ld	r24, Z
    447a:	8e 7f       	andi	r24, 0xFE	; 254
    447c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    447e:	af e4       	ldi	r26, 0x4F	; 79
    4480:	b0 e0       	ldi	r27, 0x00	; 0
    4482:	ef e4       	ldi	r30, 0x4F	; 79
    4484:	f0 e0       	ldi	r31, 0x00	; 0
    4486:	80 81       	ld	r24, Z
    4488:	82 60       	ori	r24, 0x02	; 2
    448a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    448c:	ae e4       	ldi	r26, 0x4E	; 78
    448e:	b0 e0       	ldi	r27, 0x00	; 0
    4490:	ee e4       	ldi	r30, 0x4E	; 78
    4492:	f0 e0       	ldi	r31, 0x00	; 0
    4494:	80 81       	ld	r24, Z
    4496:	88 60       	ori	r24, 0x08	; 8
    4498:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    449a:	ae e4       	ldi	r26, 0x4E	; 78
    449c:	b0 e0       	ldi	r27, 0x00	; 0
    449e:	ee e4       	ldi	r30, 0x4E	; 78
    44a0:	f0 e0       	ldi	r31, 0x00	; 0
    44a2:	80 81       	ld	r24, Z
    44a4:	80 61       	ori	r24, 0x10	; 16
    44a6:	8c 93       	st	X, r24
    44a8:	39 c0       	rjmp	.+114    	; 0x451c <MTIMER1_voidInit+0x33c>
		break;
	}
	case TOP_FPWM_OCR1A : {
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    44aa:	af e4       	ldi	r26, 0x4F	; 79
    44ac:	b0 e0       	ldi	r27, 0x00	; 0
    44ae:	ef e4       	ldi	r30, 0x4F	; 79
    44b0:	f0 e0       	ldi	r31, 0x00	; 0
    44b2:	80 81       	ld	r24, Z
    44b4:	81 60       	ori	r24, 0x01	; 1
    44b6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    44b8:	af e4       	ldi	r26, 0x4F	; 79
    44ba:	b0 e0       	ldi	r27, 0x00	; 0
    44bc:	ef e4       	ldi	r30, 0x4F	; 79
    44be:	f0 e0       	ldi	r31, 0x00	; 0
    44c0:	80 81       	ld	r24, Z
    44c2:	82 60       	ori	r24, 0x02	; 2
    44c4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    44c6:	ae e4       	ldi	r26, 0x4E	; 78
    44c8:	b0 e0       	ldi	r27, 0x00	; 0
    44ca:	ee e4       	ldi	r30, 0x4E	; 78
    44cc:	f0 e0       	ldi	r31, 0x00	; 0
    44ce:	80 81       	ld	r24, Z
    44d0:	88 60       	ori	r24, 0x08	; 8
    44d2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    44d4:	ae e4       	ldi	r26, 0x4E	; 78
    44d6:	b0 e0       	ldi	r27, 0x00	; 0
    44d8:	ee e4       	ldi	r30, 0x4E	; 78
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	80 81       	ld	r24, Z
    44de:	80 61       	ori	r24, 0x10	; 16
    44e0:	8c 93       	st	X, r24
    44e2:	1c c0       	rjmp	.+56     	; 0x451c <MTIMER1_voidInit+0x33c>
		break;
	}
	case TOP_NORMAL_0XFF : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    44e4:	af e4       	ldi	r26, 0x4F	; 79
    44e6:	b0 e0       	ldi	r27, 0x00	; 0
    44e8:	ef e4       	ldi	r30, 0x4F	; 79
    44ea:	f0 e0       	ldi	r31, 0x00	; 0
    44ec:	80 81       	ld	r24, Z
    44ee:	8e 7f       	andi	r24, 0xFE	; 254
    44f0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    44f2:	af e4       	ldi	r26, 0x4F	; 79
    44f4:	b0 e0       	ldi	r27, 0x00	; 0
    44f6:	ef e4       	ldi	r30, 0x4F	; 79
    44f8:	f0 e0       	ldi	r31, 0x00	; 0
    44fa:	80 81       	ld	r24, Z
    44fc:	8d 7f       	andi	r24, 0xFD	; 253
    44fe:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    4500:	ae e4       	ldi	r26, 0x4E	; 78
    4502:	b0 e0       	ldi	r27, 0x00	; 0
    4504:	ee e4       	ldi	r30, 0x4E	; 78
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	80 81       	ld	r24, Z
    450a:	87 7f       	andi	r24, 0xF7	; 247
    450c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    450e:	ae e4       	ldi	r26, 0x4E	; 78
    4510:	b0 e0       	ldi	r27, 0x00	; 0
    4512:	ee e4       	ldi	r30, 0x4E	; 78
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	80 81       	ld	r24, Z
    4518:	8f 7e       	andi	r24, 0xEF	; 239
    451a:	8c 93       	st	X, r24
	//
	//
	default: break;
	}

	switch (Copy_enuPrescalerValue){
    451c:	8b 81       	ldd	r24, Y+3	; 0x03
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	3d 83       	std	Y+5, r19	; 0x05
    4524:	2c 83       	std	Y+4, r18	; 0x04
    4526:	8c 81       	ldd	r24, Y+4	; 0x04
    4528:	9d 81       	ldd	r25, Y+5	; 0x05
    452a:	81 30       	cpi	r24, 0x01	; 1
    452c:	91 05       	cpc	r25, r1
    452e:	01 f1       	breq	.+64     	; 0x4570 <MTIMER1_voidInit+0x390>
    4530:	2c 81       	ldd	r18, Y+4	; 0x04
    4532:	3d 81       	ldd	r19, Y+5	; 0x05
    4534:	22 30       	cpi	r18, 0x02	; 2
    4536:	31 05       	cpc	r19, r1
    4538:	89 f1       	breq	.+98     	; 0x459c <MTIMER1_voidInit+0x3bc>
    453a:	8c 81       	ldd	r24, Y+4	; 0x04
    453c:	9d 81       	ldd	r25, Y+5	; 0x05
    453e:	00 97       	sbiw	r24, 0x00	; 0
    4540:	09 f0       	breq	.+2      	; 0x4544 <MTIMER1_voidInit+0x364>
    4542:	41 c0       	rjmp	.+130    	; 0x45c6 <MTIMER1_voidInit+0x3e6>
	case DIV_8: {
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    4544:	ae e4       	ldi	r26, 0x4E	; 78
    4546:	b0 e0       	ldi	r27, 0x00	; 0
    4548:	ee e4       	ldi	r30, 0x4E	; 78
    454a:	f0 e0       	ldi	r31, 0x00	; 0
    454c:	80 81       	ld	r24, Z
    454e:	8e 7f       	andi	r24, 0xFE	; 254
    4550:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    4552:	ae e4       	ldi	r26, 0x4E	; 78
    4554:	b0 e0       	ldi	r27, 0x00	; 0
    4556:	ee e4       	ldi	r30, 0x4E	; 78
    4558:	f0 e0       	ldi	r31, 0x00	; 0
    455a:	80 81       	ld	r24, Z
    455c:	82 60       	ori	r24, 0x02	; 2
    455e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    4560:	ae e4       	ldi	r26, 0x4E	; 78
    4562:	b0 e0       	ldi	r27, 0x00	; 0
    4564:	ee e4       	ldi	r30, 0x4E	; 78
    4566:	f0 e0       	ldi	r31, 0x00	; 0
    4568:	80 81       	ld	r24, Z
    456a:	8b 7f       	andi	r24, 0xFB	; 251
    456c:	8c 93       	st	X, r24
    456e:	2b c0       	rjmp	.+86     	; 0x45c6 <MTIMER1_voidInit+0x3e6>
		break;
	}
	case DIV_64: {
		SET_BIT(TCCR1B,TCCR1B_CS10);
    4570:	ae e4       	ldi	r26, 0x4E	; 78
    4572:	b0 e0       	ldi	r27, 0x00	; 0
    4574:	ee e4       	ldi	r30, 0x4E	; 78
    4576:	f0 e0       	ldi	r31, 0x00	; 0
    4578:	80 81       	ld	r24, Z
    457a:	81 60       	ori	r24, 0x01	; 1
    457c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    457e:	ae e4       	ldi	r26, 0x4E	; 78
    4580:	b0 e0       	ldi	r27, 0x00	; 0
    4582:	ee e4       	ldi	r30, 0x4E	; 78
    4584:	f0 e0       	ldi	r31, 0x00	; 0
    4586:	80 81       	ld	r24, Z
    4588:	82 60       	ori	r24, 0x02	; 2
    458a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    458c:	ae e4       	ldi	r26, 0x4E	; 78
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	ee e4       	ldi	r30, 0x4E	; 78
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	8b 7f       	andi	r24, 0xFB	; 251
    4598:	8c 93       	st	X, r24
    459a:	15 c0       	rjmp	.+42     	; 0x45c6 <MTIMER1_voidInit+0x3e6>
		break;
	}
	case DIV_256: {
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    459c:	ae e4       	ldi	r26, 0x4E	; 78
    459e:	b0 e0       	ldi	r27, 0x00	; 0
    45a0:	ee e4       	ldi	r30, 0x4E	; 78
    45a2:	f0 e0       	ldi	r31, 0x00	; 0
    45a4:	80 81       	ld	r24, Z
    45a6:	8e 7f       	andi	r24, 0xFE	; 254
    45a8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    45aa:	ae e4       	ldi	r26, 0x4E	; 78
    45ac:	b0 e0       	ldi	r27, 0x00	; 0
    45ae:	ee e4       	ldi	r30, 0x4E	; 78
    45b0:	f0 e0       	ldi	r31, 0x00	; 0
    45b2:	80 81       	ld	r24, Z
    45b4:	8d 7f       	andi	r24, 0xFD	; 253
    45b6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);
    45b8:	ae e4       	ldi	r26, 0x4E	; 78
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	ee e4       	ldi	r30, 0x4E	; 78
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	80 81       	ld	r24, Z
    45c2:	84 60       	ori	r24, 0x04	; 4
    45c4:	8c 93       	st	X, r24
	//
	//
	default: break;
	}

}
    45c6:	29 96       	adiw	r28, 0x09	; 9
    45c8:	0f b6       	in	r0, 0x3f	; 63
    45ca:	f8 94       	cli
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	0f be       	out	0x3f, r0	; 63
    45d0:	cd bf       	out	0x3d, r28	; 61
    45d2:	cf 91       	pop	r28
    45d4:	df 91       	pop	r29
    45d6:	08 95       	ret

000045d8 <MTIMER1_voidSetTopValue>:
void MTIMER1_voidSetTopValue(u16 Copy_u16TopValue , Top_t Copy_Timer1TopMode){
    45d8:	df 93       	push	r29
    45da:	cf 93       	push	r28
    45dc:	00 d0       	rcall	.+0      	; 0x45de <MTIMER1_voidSetTopValue+0x6>
    45de:	00 d0       	rcall	.+0      	; 0x45e0 <MTIMER1_voidSetTopValue+0x8>
    45e0:	0f 92       	push	r0
    45e2:	cd b7       	in	r28, 0x3d	; 61
    45e4:	de b7       	in	r29, 0x3e	; 62
    45e6:	9a 83       	std	Y+2, r25	; 0x02
    45e8:	89 83       	std	Y+1, r24	; 0x01
    45ea:	6b 83       	std	Y+3, r22	; 0x03
	switch (Copy_Timer1TopMode) {
    45ec:	8b 81       	ldd	r24, Y+3	; 0x03
    45ee:	28 2f       	mov	r18, r24
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	3d 83       	std	Y+5, r19	; 0x05
    45f4:	2c 83       	std	Y+4, r18	; 0x04
    45f6:	8c 81       	ldd	r24, Y+4	; 0x04
    45f8:	9d 81       	ldd	r25, Y+5	; 0x05
    45fa:	82 30       	cpi	r24, 0x02	; 2
    45fc:	91 05       	cpc	r25, r1
    45fe:	31 f0       	breq	.+12     	; 0x460c <MTIMER1_voidSetTopValue+0x34>
    4600:	2c 81       	ldd	r18, Y+4	; 0x04
    4602:	3d 81       	ldd	r19, Y+5	; 0x05
    4604:	23 30       	cpi	r18, 0x03	; 3
    4606:	31 05       	cpc	r19, r1
    4608:	41 f0       	breq	.+16     	; 0x461a <MTIMER1_voidSetTopValue+0x42>
    460a:	0d c0       	rjmp	.+26     	; 0x4626 <MTIMER1_voidSetTopValue+0x4e>
	case TOP_FPWM_ICR1 : ICR1 = Copy_u16TopValue; break;
    460c:	e6 e4       	ldi	r30, 0x46	; 70
    460e:	f0 e0       	ldi	r31, 0x00	; 0
    4610:	89 81       	ldd	r24, Y+1	; 0x01
    4612:	9a 81       	ldd	r25, Y+2	; 0x02
    4614:	91 83       	std	Z+1, r25	; 0x01
    4616:	80 83       	st	Z, r24
    4618:	06 c0       	rjmp	.+12     	; 0x4626 <MTIMER1_voidSetTopValue+0x4e>
	case TOP_FPWM_OCR1A: OCR1A = Copy_u16TopValue; break;
    461a:	ea e4       	ldi	r30, 0x4A	; 74
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	89 81       	ldd	r24, Y+1	; 0x01
    4620:	9a 81       	ldd	r25, Y+2	; 0x02
    4622:	91 83       	std	Z+1, r25	; 0x01
    4624:	80 83       	st	Z, r24
	default: break;
	}

}
    4626:	0f 90       	pop	r0
    4628:	0f 90       	pop	r0
    462a:	0f 90       	pop	r0
    462c:	0f 90       	pop	r0
    462e:	0f 90       	pop	r0
    4630:	cf 91       	pop	r28
    4632:	df 91       	pop	r29
    4634:	08 95       	ret

00004636 <MTIMER1_voidSetDutyCycle>:
void MTIMER1_voidSetDutyCycle(u16 Copy_u16DutyCycleValue){
    4636:	df 93       	push	r29
    4638:	cf 93       	push	r28
    463a:	00 d0       	rcall	.+0      	; 0x463c <MTIMER1_voidSetDutyCycle+0x6>
    463c:	cd b7       	in	r28, 0x3d	; 61
    463e:	de b7       	in	r29, 0x3e	; 62
    4640:	9a 83       	std	Y+2, r25	; 0x02
    4642:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16DutyCycleValue;
    4644:	ea e4       	ldi	r30, 0x4A	; 74
    4646:	f0 e0       	ldi	r31, 0x00	; 0
    4648:	89 81       	ldd	r24, Y+1	; 0x01
    464a:	9a 81       	ldd	r25, Y+2	; 0x02
    464c:	91 83       	std	Z+1, r25	; 0x01
    464e:	80 83       	st	Z, r24
}
    4650:	0f 90       	pop	r0
    4652:	0f 90       	pop	r0
    4654:	cf 91       	pop	r28
    4656:	df 91       	pop	r29
    4658:	08 95       	ret

0000465a <MTIMER1_voidEdgeSelect>:
void MTIMER1_voidEdgeSelect(Edge_t Copy_EdgeSelect){
    465a:	df 93       	push	r29
    465c:	cf 93       	push	r28
    465e:	00 d0       	rcall	.+0      	; 0x4660 <MTIMER1_voidEdgeSelect+0x6>
    4660:	0f 92       	push	r0
    4662:	cd b7       	in	r28, 0x3d	; 61
    4664:	de b7       	in	r29, 0x3e	; 62
    4666:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_EdgeSelect){
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	28 2f       	mov	r18, r24
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	3b 83       	std	Y+3, r19	; 0x03
    4670:	2a 83       	std	Y+2, r18	; 0x02
    4672:	8a 81       	ldd	r24, Y+2	; 0x02
    4674:	9b 81       	ldd	r25, Y+3	; 0x03
    4676:	00 97       	sbiw	r24, 0x00	; 0
    4678:	31 f0       	breq	.+12     	; 0x4686 <MTIMER1_voidEdgeSelect+0x2c>
    467a:	2a 81       	ldd	r18, Y+2	; 0x02
    467c:	3b 81       	ldd	r19, Y+3	; 0x03
    467e:	21 30       	cpi	r18, 0x01	; 1
    4680:	31 05       	cpc	r19, r1
    4682:	49 f0       	breq	.+18     	; 0x4696 <MTIMER1_voidEdgeSelect+0x3c>
    4684:	0f c0       	rjmp	.+30     	; 0x46a4 <MTIMER1_voidEdgeSelect+0x4a>
	case RIFSING_EDGE : SET_BIT(TCCR1B, TCCR1B_ICES1); break;
    4686:	ae e4       	ldi	r26, 0x4E	; 78
    4688:	b0 e0       	ldi	r27, 0x00	; 0
    468a:	ee e4       	ldi	r30, 0x4E	; 78
    468c:	f0 e0       	ldi	r31, 0x00	; 0
    468e:	80 81       	ld	r24, Z
    4690:	80 64       	ori	r24, 0x40	; 64
    4692:	8c 93       	st	X, r24
    4694:	07 c0       	rjmp	.+14     	; 0x46a4 <MTIMER1_voidEdgeSelect+0x4a>
	case FALLING_EDGE : CLR_BIT(TCCR1B, TCCR1B_ICES1); break;
    4696:	ae e4       	ldi	r26, 0x4E	; 78
    4698:	b0 e0       	ldi	r27, 0x00	; 0
    469a:	ee e4       	ldi	r30, 0x4E	; 78
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	80 81       	ld	r24, Z
    46a0:	8f 7b       	andi	r24, 0xBF	; 191
    46a2:	8c 93       	st	X, r24

	}
}
    46a4:	0f 90       	pop	r0
    46a6:	0f 90       	pop	r0
    46a8:	0f 90       	pop	r0
    46aa:	cf 91       	pop	r28
    46ac:	df 91       	pop	r29
    46ae:	08 95       	ret

000046b0 <MTIMER_voidEnableInterrupt>:

void MTIMER_voidEnableInterrupt(void){
    46b0:	df 93       	push	r29
    46b2:	cf 93       	push	r28
    46b4:	cd b7       	in	r28, 0x3d	; 61
    46b6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    46b8:	a9 e5       	ldi	r26, 0x59	; 89
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	e9 e5       	ldi	r30, 0x59	; 89
    46be:	f0 e0       	ldi	r31, 0x00	; 0
    46c0:	80 81       	ld	r24, Z
    46c2:	80 62       	ori	r24, 0x20	; 32
    46c4:	8c 93       	st	X, r24
}
    46c6:	cf 91       	pop	r28
    46c8:	df 91       	pop	r29
    46ca:	08 95       	ret

000046cc <MTWI_voidInit>:
#include "MTWI_interface.h"
#include "MTWI_private.h"
#include "MTWI_registers.h"
#include "MTWI_config.h"

void MTWI_voidInit(void){
    46cc:	df 93       	push	r29
    46ce:	cf 93       	push	r28
    46d0:	cd b7       	in	r28, 0x3d	; 61
    46d2:	de b7       	in	r29, 0x3e	; 62

	/*	Setting my adderss */
	TWAR = (MY_ADDRESS<<1);
    46d4:	e2 e2       	ldi	r30, 0x22	; 34
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	84 e0       	ldi	r24, 0x04	; 4
    46da:	80 83       	st	Z, r24

	/*just two bits an other wil be set later*/
	/* setting prescaler value */
#if TWI_TWPS_PRESCALER == TWI_DIV_1
	TWSR = 0b00000000;
    46dc:	e1 e2       	ldi	r30, 0x21	; 33
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	10 82       	st	Z, r1
	TWSR = 0b00000010;
#elif TWI_TWPS_PRESCALER == TWI_DIV_64
	TWSR = 0b00000011;
#endif
	/* setting remaining of prescaler */
	TWBR = TWI_TWBR_PRESCALER;
    46e2:	e0 e2       	ldi	r30, 0x20	; 32
    46e4:	f0 e0       	ldi	r31, 0x00	; 0
    46e6:	82 e0       	ldi	r24, 0x02	; 2
    46e8:	80 83       	st	Z, r24
	/* Enabling TWI by setting TWI Enable Bit */
	SET_BIT(TWCR,TWCR_TWEN);
    46ea:	a6 e5       	ldi	r26, 0x56	; 86
    46ec:	b0 e0       	ldi	r27, 0x00	; 0
    46ee:	e6 e5       	ldi	r30, 0x56	; 86
    46f0:	f0 e0       	ldi	r31, 0x00	; 0
    46f2:	80 81       	ld	r24, Z
    46f4:	84 60       	ori	r24, 0x04	; 4
    46f6:	8c 93       	st	X, r24

}
    46f8:	cf 91       	pop	r28
    46fa:	df 91       	pop	r29
    46fc:	08 95       	ret

000046fe <MTWI_voidStart>:

void MTWI_voidStart(void){
    46fe:	df 93       	push	r29
    4700:	cf 93       	push	r28
    4702:	cd b7       	in	r28, 0x3d	; 61
    4704:	de b7       	in	r29, 0x3e	; 62
	/*Set TWSTA to start condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
    4706:	a6 e5       	ldi	r26, 0x56	; 86
    4708:	b0 e0       	ldi	r27, 0x00	; 0
    470a:	e6 e5       	ldi	r30, 0x56	; 86
    470c:	f0 e0       	ldi	r31, 0x00	; 0
    470e:	80 81       	ld	r24, Z
    4710:	80 62       	ori	r24, 0x20	; 32
    4712:	8c 93       	st	X, r24
	/* clearing flag by setting */
	SET_BIT(TWCR,TWCR_TWINT);
    4714:	a6 e5       	ldi	r26, 0x56	; 86
    4716:	b0 e0       	ldi	r27, 0x00	; 0
    4718:	e6 e5       	ldi	r30, 0x56	; 86
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	80 81       	ld	r24, Z
    471e:	80 68       	ori	r24, 0x80	; 128
    4720:	8c 93       	st	X, r24
	/* Enabling TWI by setting TWI Enable Bit */
	SET_BIT(TWCR,TWCR_TWEN);
    4722:	a6 e5       	ldi	r26, 0x56	; 86
    4724:	b0 e0       	ldi	r27, 0x00	; 0
    4726:	e6 e5       	ldi	r30, 0x56	; 86
    4728:	f0 e0       	ldi	r31, 0x00	; 0
    472a:	80 81       	ld	r24, Z
    472c:	84 60       	ori	r24, 0x04	; 4
    472e:	8c 93       	st	X, r24
	/* busy wait on TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT))==0);
    4730:	e6 e5       	ldi	r30, 0x56	; 86
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	80 81       	ld	r24, Z
    4736:	88 23       	and	r24, r24
    4738:	dc f7       	brge	.-10     	; 0x4730 <MTWI_voidStart+0x32>

}
    473a:	cf 91       	pop	r28
    473c:	df 91       	pop	r29
    473e:	08 95       	ret

00004740 <MTWI_voidWriteAddressWithOrder>:

void MTWI_voidWriteAddressWithOrder(u8 Copy_u7SlaveAddress,u8 copy_u8ReadOrWrite){
    4740:	df 93       	push	r29
    4742:	cf 93       	push	r28
    4744:	00 d0       	rcall	.+0      	; 0x4746 <MTWI_voidWriteAddressWithOrder+0x6>
    4746:	cd b7       	in	r28, 0x3d	; 61
    4748:	de b7       	in	r29, 0x3e	; 62
    474a:	89 83       	std	Y+1, r24	; 0x01
    474c:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_u8ReadOrWrite == MTWI_WRITE){
    474e:	8a 81       	ldd	r24, Y+2	; 0x02
    4750:	82 30       	cpi	r24, 0x02	; 2
    4752:	99 f4       	brne	.+38     	; 0x477a <MTWI_voidWriteAddressWithOrder+0x3a>
		/* Assiging value */
		/* clearing forst bit to enable Write */
		/* bouth are in one instruction */
		TWDR = Copy_u7SlaveAddress;
    4754:	e3 e2       	ldi	r30, 0x23	; 35
    4756:	f0 e0       	ldi	r31, 0x00	; 0
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	80 83       	st	Z, r24
		TWDR = (TWDR << 1);
    475c:	a3 e2       	ldi	r26, 0x23	; 35
    475e:	b0 e0       	ldi	r27, 0x00	; 0
    4760:	e3 e2       	ldi	r30, 0x23	; 35
    4762:	f0 e0       	ldi	r31, 0x00	; 0
    4764:	80 81       	ld	r24, Z
    4766:	88 0f       	add	r24, r24
    4768:	8c 93       	st	X, r24
		CLR_BIT(TWDR,TWDR_TWD0);
    476a:	a3 e2       	ldi	r26, 0x23	; 35
    476c:	b0 e0       	ldi	r27, 0x00	; 0
    476e:	e3 e2       	ldi	r30, 0x23	; 35
    4770:	f0 e0       	ldi	r31, 0x00	; 0
    4772:	80 81       	ld	r24, Z
    4774:	8e 7f       	andi	r24, 0xFE	; 254
    4776:	8c 93       	st	X, r24
    4778:	15 c0       	rjmp	.+42     	; 0x47a4 <MTWI_voidWriteAddressWithOrder+0x64>
	}
	else if(copy_u8ReadOrWrite == MTWI_READ) {
    477a:	8a 81       	ldd	r24, Y+2	; 0x02
    477c:	81 30       	cpi	r24, 0x01	; 1
    477e:	91 f4       	brne	.+36     	; 0x47a4 <MTWI_voidWriteAddressWithOrder+0x64>

		/* Assiging value */
		/* clearing forst bit to enable Write */
		/* bouth are in one instruction */
		TWDR = Copy_u7SlaveAddress;
    4780:	e3 e2       	ldi	r30, 0x23	; 35
    4782:	f0 e0       	ldi	r31, 0x00	; 0
    4784:	89 81       	ldd	r24, Y+1	; 0x01
    4786:	80 83       	st	Z, r24
		TWDR = (TWDR << 1);
    4788:	a3 e2       	ldi	r26, 0x23	; 35
    478a:	b0 e0       	ldi	r27, 0x00	; 0
    478c:	e3 e2       	ldi	r30, 0x23	; 35
    478e:	f0 e0       	ldi	r31, 0x00	; 0
    4790:	80 81       	ld	r24, Z
    4792:	88 0f       	add	r24, r24
    4794:	8c 93       	st	X, r24
		SET_BIT(TWDR,TWDR_TWD0);
    4796:	a3 e2       	ldi	r26, 0x23	; 35
    4798:	b0 e0       	ldi	r27, 0x00	; 0
    479a:	e3 e2       	ldi	r30, 0x23	; 35
    479c:	f0 e0       	ldi	r31, 0x00	; 0
    479e:	80 81       	ld	r24, Z
    47a0:	81 60       	ori	r24, 0x01	; 1
    47a2:	8c 93       	st	X, r24
	}

	/* CLR start condition */
	CLR_BIT(TWCR,TWCR_TWSTA);
    47a4:	a6 e5       	ldi	r26, 0x56	; 86
    47a6:	b0 e0       	ldi	r27, 0x00	; 0
    47a8:	e6 e5       	ldi	r30, 0x56	; 86
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	80 81       	ld	r24, Z
    47ae:	8f 7d       	andi	r24, 0xDF	; 223
    47b0:	8c 93       	st	X, r24

	/* clearing flag by setting */
	SET_BIT(TWCR,TWCR_TWINT);
    47b2:	a6 e5       	ldi	r26, 0x56	; 86
    47b4:	b0 e0       	ldi	r27, 0x00	; 0
    47b6:	e6 e5       	ldi	r30, 0x56	; 86
    47b8:	f0 e0       	ldi	r31, 0x00	; 0
    47ba:	80 81       	ld	r24, Z
    47bc:	80 68       	ori	r24, 0x80	; 128
    47be:	8c 93       	st	X, r24
	/* Enabling TWI by setting TWI Enable Bit */
	SET_BIT(TWCR,TWCR_TWEN);
    47c0:	a6 e5       	ldi	r26, 0x56	; 86
    47c2:	b0 e0       	ldi	r27, 0x00	; 0
    47c4:	e6 e5       	ldi	r30, 0x56	; 86
    47c6:	f0 e0       	ldi	r31, 0x00	; 0
    47c8:	80 81       	ld	r24, Z
    47ca:	84 60       	ori	r24, 0x04	; 4
    47cc:	8c 93       	st	X, r24
	/* busy wait on TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT))==0);
    47ce:	e6 e5       	ldi	r30, 0x56	; 86
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	80 81       	ld	r24, Z
    47d4:	88 23       	and	r24, r24
    47d6:	dc f7       	brge	.-10     	; 0x47ce <MTWI_voidWriteAddressWithOrder+0x8e>

}
    47d8:	0f 90       	pop	r0
    47da:	0f 90       	pop	r0
    47dc:	cf 91       	pop	r28
    47de:	df 91       	pop	r29
    47e0:	08 95       	ret

000047e2 <MTWI_voidWriteData>:

void MTWI_voidWriteData(u8 Copy_u8Data){
    47e2:	df 93       	push	r29
    47e4:	cf 93       	push	r28
    47e6:	0f 92       	push	r0
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
    47ec:	89 83       	std	Y+1, r24	; 0x01
	/* Assiging value */
	TWDR = Copy_u8Data;
    47ee:	e3 e2       	ldi	r30, 0x23	; 35
    47f0:	f0 e0       	ldi	r31, 0x00	; 0
    47f2:	89 81       	ldd	r24, Y+1	; 0x01
    47f4:	80 83       	st	Z, r24
	/* CLR start condition */
	CLR_BIT(TWCR,TWCR_TWSTA);
    47f6:	a6 e5       	ldi	r26, 0x56	; 86
    47f8:	b0 e0       	ldi	r27, 0x00	; 0
    47fa:	e6 e5       	ldi	r30, 0x56	; 86
    47fc:	f0 e0       	ldi	r31, 0x00	; 0
    47fe:	80 81       	ld	r24, Z
    4800:	8f 7d       	andi	r24, 0xDF	; 223
    4802:	8c 93       	st	X, r24
	/* clearing flag by setting */
	SET_BIT(TWCR,TWCR_TWINT);
    4804:	a6 e5       	ldi	r26, 0x56	; 86
    4806:	b0 e0       	ldi	r27, 0x00	; 0
    4808:	e6 e5       	ldi	r30, 0x56	; 86
    480a:	f0 e0       	ldi	r31, 0x00	; 0
    480c:	80 81       	ld	r24, Z
    480e:	80 68       	ori	r24, 0x80	; 128
    4810:	8c 93       	st	X, r24
	/* Enabling TWI by setting TWI Enable Bit */
	SET_BIT(TWCR,TWCR_TWEN);
    4812:	a6 e5       	ldi	r26, 0x56	; 86
    4814:	b0 e0       	ldi	r27, 0x00	; 0
    4816:	e6 e5       	ldi	r30, 0x56	; 86
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	80 81       	ld	r24, Z
    481c:	84 60       	ori	r24, 0x04	; 4
    481e:	8c 93       	st	X, r24
	/* busy wait on TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT))==0);
    4820:	e6 e5       	ldi	r30, 0x56	; 86
    4822:	f0 e0       	ldi	r31, 0x00	; 0
    4824:	80 81       	ld	r24, Z
    4826:	88 23       	and	r24, r24
    4828:	dc f7       	brge	.-10     	; 0x4820 <MTWI_voidWriteData+0x3e>

}
    482a:	0f 90       	pop	r0
    482c:	cf 91       	pop	r28
    482e:	df 91       	pop	r29
    4830:	08 95       	ret

00004832 <MTWI_u8ReadWithACK>:

u8 MTWI_u8ReadWithACK(void){
    4832:	df 93       	push	r29
    4834:	cf 93       	push	r28
    4836:	cd b7       	in	r28, 0x3d	; 61
    4838:	de b7       	in	r29, 0x3e	; 62
	/* CLR start condition */
	CLR_BIT(TWCR,TWCR_TWSTA);
    483a:	a6 e5       	ldi	r26, 0x56	; 86
    483c:	b0 e0       	ldi	r27, 0x00	; 0
    483e:	e6 e5       	ldi	r30, 0x56	; 86
    4840:	f0 e0       	ldi	r31, 0x00	; 0
    4842:	80 81       	ld	r24, Z
    4844:	8f 7d       	andi	r24, 0xDF	; 223
    4846:	8c 93       	st	X, r24
	/* clearing flag by setting */
	SET_BIT(TWCR,TWCR_TWINT);
    4848:	a6 e5       	ldi	r26, 0x56	; 86
    484a:	b0 e0       	ldi	r27, 0x00	; 0
    484c:	e6 e5       	ldi	r30, 0x56	; 86
    484e:	f0 e0       	ldi	r31, 0x00	; 0
    4850:	80 81       	ld	r24, Z
    4852:	80 68       	ori	r24, 0x80	; 128
    4854:	8c 93       	st	X, r24
	/* Enabling TWI by setting TWI Enable Bit */
	SET_BIT(TWCR,TWCR_TWEN);
    4856:	a6 e5       	ldi	r26, 0x56	; 86
    4858:	b0 e0       	ldi	r27, 0x00	; 0
    485a:	e6 e5       	ldi	r30, 0x56	; 86
    485c:	f0 e0       	ldi	r31, 0x00	; 0
    485e:	80 81       	ld	r24, Z
    4860:	84 60       	ori	r24, 0x04	; 4
    4862:	8c 93       	st	X, r24
	/* busy wait on TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT))==0);
    4864:	e6 e5       	ldi	r30, 0x56	; 86
    4866:	f0 e0       	ldi	r31, 0x00	; 0
    4868:	80 81       	ld	r24, Z
    486a:	88 23       	and	r24, r24
    486c:	dc f7       	brge	.-10     	; 0x4864 <MTWI_u8ReadWithACK+0x32>
	return TWDR;
    486e:	e3 e2       	ldi	r30, 0x23	; 35
    4870:	f0 e0       	ldi	r31, 0x00	; 0
    4872:	80 81       	ld	r24, Z
}
    4874:	cf 91       	pop	r28
    4876:	df 91       	pop	r29
    4878:	08 95       	ret

0000487a <MTWI_voidStop>:


void MTWI_voidStop(void){
    487a:	df 93       	push	r29
    487c:	cf 93       	push	r28
    487e:	cd b7       	in	r28, 0x3d	; 61
    4880:	de b7       	in	r29, 0x3e	; 62
	/* set to Make stop condition */
	SET_BIT(TWCR,TWCR_TWSTO);
    4882:	a6 e5       	ldi	r26, 0x56	; 86
    4884:	b0 e0       	ldi	r27, 0x00	; 0
    4886:	e6 e5       	ldi	r30, 0x56	; 86
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	80 81       	ld	r24, Z
    488c:	80 61       	ori	r24, 0x10	; 16
    488e:	8c 93       	st	X, r24
	/* clearing flag by setting */
	SET_BIT(TWCR,TWCR_TWINT);
    4890:	a6 e5       	ldi	r26, 0x56	; 86
    4892:	b0 e0       	ldi	r27, 0x00	; 0
    4894:	e6 e5       	ldi	r30, 0x56	; 86
    4896:	f0 e0       	ldi	r31, 0x00	; 0
    4898:	80 81       	ld	r24, Z
    489a:	80 68       	ori	r24, 0x80	; 128
    489c:	8c 93       	st	X, r24
	/* Enabling TWI by setting TWI Enable Bit */
	SET_BIT(TWCR,TWCR_TWEN);
    489e:	a6 e5       	ldi	r26, 0x56	; 86
    48a0:	b0 e0       	ldi	r27, 0x00	; 0
    48a2:	e6 e5       	ldi	r30, 0x56	; 86
    48a4:	f0 e0       	ldi	r31, 0x00	; 0
    48a6:	80 81       	ld	r24, Z
    48a8:	84 60       	ori	r24, 0x04	; 4
    48aa:	8c 93       	st	X, r24


}
    48ac:	cf 91       	pop	r28
    48ae:	df 91       	pop	r29
    48b0:	08 95       	ret

000048b2 <MTWI_u8GetStatus>:

u8 MTWI_u8GetStatus(void){
    48b2:	df 93       	push	r29
    48b4:	cf 93       	push	r28
    48b6:	cd b7       	in	r28, 0x3d	; 61
    48b8:	de b7       	in	r29, 0x3e	; 62
	return (TWSR&0xF8);
    48ba:	e1 e2       	ldi	r30, 0x21	; 33
    48bc:	f0 e0       	ldi	r31, 0x00	; 0
    48be:	80 81       	ld	r24, Z
    48c0:	88 7f       	andi	r24, 0xF8	; 248
}
    48c2:	cf 91       	pop	r28
    48c4:	df 91       	pop	r29
    48c6:	08 95       	ret

000048c8 <MUART_voidInit>:
#include "MUART_config.h"
#include "MUART_private.h"


void MUART_voidInit()
{
    48c8:	df 93       	push	r29
    48ca:	cf 93       	push	r28
    48cc:	0f 92       	push	r0
    48ce:	cd b7       	in	r28, 0x3d	; 61
    48d0:	de b7       	in	r29, 0x3e	; 62
	u8 Temp=0 ;
    48d2:	19 82       	std	Y+1, r1	; 0x01
	/*Enable Transmitter & Receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    48d4:	aa e2       	ldi	r26, 0x2A	; 42
    48d6:	b0 e0       	ldi	r27, 0x00	; 0
    48d8:	ea e2       	ldi	r30, 0x2A	; 42
    48da:	f0 e0       	ldi	r31, 0x00	; 0
    48dc:	80 81       	ld	r24, Z
    48de:	80 61       	ori	r24, 0x10	; 16
    48e0:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
    48e2:	aa e2       	ldi	r26, 0x2A	; 42
    48e4:	b0 e0       	ldi	r27, 0x00	; 0
    48e6:	ea e2       	ldi	r30, 0x2A	; 42
    48e8:	f0 e0       	ldi	r31, 0x00	; 0
    48ea:	80 81       	ld	r24, Z
    48ec:	88 60       	ori	r24, 0x08	; 8
    48ee:	8c 93       	st	X, r24
	/*8-bit*/
	SET_BIT(Temp,UCSRC_UCSZ0);
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
    48f2:	82 60       	ori	r24, 0x02	; 2
    48f4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp,UCSRC_UCSZ1);
    48f6:	89 81       	ldd	r24, Y+1	; 0x01
    48f8:	84 60       	ori	r24, 0x04	; 4
    48fa:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    48fc:	aa e2       	ldi	r26, 0x2A	; 42
    48fe:	b0 e0       	ldi	r27, 0x00	; 0
    4900:	ea e2       	ldi	r30, 0x2A	; 42
    4902:	f0 e0       	ldi	r31, 0x00	; 0
    4904:	80 81       	ld	r24, Z
    4906:	8b 7f       	andi	r24, 0xFB	; 251
    4908:	8c 93       	st	X, r24
	/*Select UCSRC Register*/
	SET_BIT(Temp,UCSRC_URSEL);
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	80 68       	ori	r24, 0x80	; 128
    490e:	89 83       	std	Y+1, r24	; 0x01
	/*ASynch*/
	CLR_BIT(Temp,UCSRC_UMSEL);
    4910:	89 81       	ldd	r24, Y+1	; 0x01
    4912:	8f 7b       	andi	r24, 0xBF	; 191
    4914:	89 83       	std	Y+1, r24	; 0x01

	/*Stop Bits*/
#if MUART_STOP_BITS == MUART_1_STOP_BIT
	/*Stop bit is 1 i-bit */
	CLR_BIT(Temp,UCSRC_USBS);
    4916:	89 81       	ldd	r24, Y+1	; 0x01
    4918:	87 7f       	andi	r24, 0xF7	; 247
    491a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp,UCSRC_UPM0);
	SET_BIT(Temp,UCSRC_UPM1);
#endif

	/*Select BaudRate*/
	UCSRC=Temp ;
    491c:	e0 e4       	ldi	r30, 0x40	; 64
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	89 81       	ldd	r24, Y+1	; 0x01
    4922:	80 83       	st	Z, r24
	UBRRL = 51;
    4924:	e9 e2       	ldi	r30, 0x29	; 41
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	83 e3       	ldi	r24, 0x33	; 51
    492a:	80 83       	st	Z, r24
}
    492c:	0f 90       	pop	r0
    492e:	cf 91       	pop	r28
    4930:	df 91       	pop	r29
    4932:	08 95       	ret

00004934 <MUART_voidTransmitByte>:

void MUART_voidTransmitByte(u8 Copy_u8Data){
    4934:	df 93       	push	r29
    4936:	cf 93       	push	r28
    4938:	0f 92       	push	r0
    493a:	cd b7       	in	r28, 0x3d	; 61
    493c:	de b7       	in	r29, 0x3e	; 62
    493e:	89 83       	std	Y+1, r24	; 0x01
	/* checking if udr buffer is free */
	while( !GET_BIT(UCSRA,UCSRA_UDRE) );
    4940:	eb e2       	ldi	r30, 0x2B	; 43
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	80 81       	ld	r24, Z
    4946:	82 95       	swap	r24
    4948:	86 95       	lsr	r24
    494a:	87 70       	andi	r24, 0x07	; 7
    494c:	88 2f       	mov	r24, r24
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	81 70       	andi	r24, 0x01	; 1
    4952:	90 70       	andi	r25, 0x00	; 0
    4954:	00 97       	sbiw	r24, 0x00	; 0
    4956:	a1 f3       	breq	.-24     	; 0x4940 <MUART_voidTransmitByte+0xc>
	UDR=Copy_u8Data ;
    4958:	ec e2       	ldi	r30, 0x2C	; 44
    495a:	f0 e0       	ldi	r31, 0x00	; 0
    495c:	89 81       	ldd	r24, Y+1	; 0x01
    495e:	80 83       	st	Z, r24
}
    4960:	0f 90       	pop	r0
    4962:	cf 91       	pop	r28
    4964:	df 91       	pop	r29
    4966:	08 95       	ret

00004968 <MUART_voidTransmitString>:

void MUART_voidTransmitString(s8* Copy_ptData){
    4968:	df 93       	push	r29
    496a:	cf 93       	push	r28
    496c:	00 d0       	rcall	.+0      	; 0x496e <MUART_voidTransmitString+0x6>
    496e:	cd b7       	in	r28, 0x3d	; 61
    4970:	de b7       	in	r29, 0x3e	; 62
    4972:	9a 83       	std	Y+2, r25	; 0x02
    4974:	89 83       	std	Y+1, r24	; 0x01
    4976:	0a c0       	rjmp	.+20     	; 0x498c <MUART_voidTransmitString+0x24>
	while(*Copy_ptData!= '\0'){
		MUART_voidTransmitByte(*Copy_ptData);
    4978:	e9 81       	ldd	r30, Y+1	; 0x01
    497a:	fa 81       	ldd	r31, Y+2	; 0x02
    497c:	80 81       	ld	r24, Z
    497e:	0e 94 9a 24 	call	0x4934	; 0x4934 <MUART_voidTransmitByte>
		Copy_ptData++;
    4982:	89 81       	ldd	r24, Y+1	; 0x01
    4984:	9a 81       	ldd	r25, Y+2	; 0x02
    4986:	01 96       	adiw	r24, 0x01	; 1
    4988:	9a 83       	std	Y+2, r25	; 0x02
    498a:	89 83       	std	Y+1, r24	; 0x01
	while( !GET_BIT(UCSRA,UCSRA_UDRE) );
	UDR=Copy_u8Data ;
}

void MUART_voidTransmitString(s8* Copy_ptData){
	while(*Copy_ptData!= '\0'){
    498c:	e9 81       	ldd	r30, Y+1	; 0x01
    498e:	fa 81       	ldd	r31, Y+2	; 0x02
    4990:	80 81       	ld	r24, Z
    4992:	88 23       	and	r24, r24
    4994:	89 f7       	brne	.-30     	; 0x4978 <MUART_voidTransmitString+0x10>
		MUART_voidTransmitByte(*Copy_ptData);
		Copy_ptData++;
	}
}
    4996:	0f 90       	pop	r0
    4998:	0f 90       	pop	r0
    499a:	cf 91       	pop	r28
    499c:	df 91       	pop	r29
    499e:	08 95       	ret

000049a0 <MUART_u8ReciveByte>:


u8   MUART_u8ReciveByte(void){
    49a0:	df 93       	push	r29
    49a2:	cf 93       	push	r28
    49a4:	cd b7       	in	r28, 0x3d	; 61
    49a6:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA,UCSRA_RXC)==0);
    49a8:	eb e2       	ldi	r30, 0x2B	; 43
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	80 81       	ld	r24, Z
    49ae:	88 23       	and	r24, r24
    49b0:	dc f7       	brge	.-10     	; 0x49a8 <MUART_u8ReciveByte+0x8>
	return UDR;
    49b2:	ec e2       	ldi	r30, 0x2C	; 44
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	80 81       	ld	r24, Z
}
    49b8:	cf 91       	pop	r28
    49ba:	df 91       	pop	r29
    49bc:	08 95       	ret

000049be <MUART_u8IsRecivedData>:

u8   MUART_u8IsRecivedData(void){
    49be:	df 93       	push	r29
    49c0:	cf 93       	push	r28
    49c2:	0f 92       	push	r0
    49c4:	cd b7       	in	r28, 0x3d	; 61
    49c6:	de b7       	in	r29, 0x3e	; 62
	u8 flag_Case = 0;
    49c8:	19 82       	std	Y+1, r1	; 0x01

	if (GET_BIT(UCSRA,UCSRA_RXC)!=0){
    49ca:	eb e2       	ldi	r30, 0x2B	; 43
    49cc:	f0 e0       	ldi	r31, 0x00	; 0
    49ce:	80 81       	ld	r24, Z
    49d0:	88 23       	and	r24, r24
    49d2:	14 f4       	brge	.+4      	; 0x49d8 <MUART_u8IsRecivedData+0x1a>
		flag_Case = 1 ;
    49d4:	81 e0       	ldi	r24, 0x01	; 1
    49d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return flag_Case;
    49d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    49da:	0f 90       	pop	r0
    49dc:	cf 91       	pop	r28
    49de:	df 91       	pop	r29
    49e0:	08 95       	ret

000049e2 <MUART_u8ReciveByteWithoutBooling>:
u8   MUART_u8ReciveByteWithoutBooling(void){
    49e2:	df 93       	push	r29
    49e4:	cf 93       	push	r28
    49e6:	cd b7       	in	r28, 0x3d	; 61
    49e8:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    49ea:	ec e2       	ldi	r30, 0x2C	; 44
    49ec:	f0 e0       	ldi	r31, 0x00	; 0
    49ee:	80 81       	ld	r24, Z
}
    49f0:	cf 91       	pop	r28
    49f2:	df 91       	pop	r29
    49f4:	08 95       	ret

000049f6 <compareString>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"

#include "comonFunctions.h"

u8 compareString(u8* s1 , u8* s2,u8 size){
    49f6:	df 93       	push	r29
    49f8:	cf 93       	push	r28
    49fa:	cd b7       	in	r28, 0x3d	; 61
    49fc:	de b7       	in	r29, 0x3e	; 62
    49fe:	27 97       	sbiw	r28, 0x07	; 7
    4a00:	0f b6       	in	r0, 0x3f	; 63
    4a02:	f8 94       	cli
    4a04:	de bf       	out	0x3e, r29	; 62
    4a06:	0f be       	out	0x3f, r0	; 63
    4a08:	cd bf       	out	0x3d, r28	; 61
    4a0a:	9c 83       	std	Y+4, r25	; 0x04
    4a0c:	8b 83       	std	Y+3, r24	; 0x03
    4a0e:	7e 83       	std	Y+6, r23	; 0x06
    4a10:	6d 83       	std	Y+5, r22	; 0x05
    4a12:	4f 83       	std	Y+7, r20	; 0x07
	u8 result = 1;
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for (i = 0 ; i < size ; i++){
    4a18:	19 82       	std	Y+1, r1	; 0x01
    4a1a:	18 c0       	rjmp	.+48     	; 0x4a4c <compareString+0x56>
		if (s1[i] == s2[i]){
    4a1c:	89 81       	ldd	r24, Y+1	; 0x01
    4a1e:	28 2f       	mov	r18, r24
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	8b 81       	ldd	r24, Y+3	; 0x03
    4a24:	9c 81       	ldd	r25, Y+4	; 0x04
    4a26:	fc 01       	movw	r30, r24
    4a28:	e2 0f       	add	r30, r18
    4a2a:	f3 1f       	adc	r31, r19
    4a2c:	40 81       	ld	r20, Z
    4a2e:	89 81       	ldd	r24, Y+1	; 0x01
    4a30:	28 2f       	mov	r18, r24
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	8d 81       	ldd	r24, Y+5	; 0x05
    4a36:	9e 81       	ldd	r25, Y+6	; 0x06
    4a38:	fc 01       	movw	r30, r24
    4a3a:	e2 0f       	add	r30, r18
    4a3c:	f3 1f       	adc	r31, r19
    4a3e:	80 81       	ld	r24, Z
    4a40:	48 17       	cp	r20, r24
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <compareString+0x50>

		}
		else {
			result = 0;
    4a44:	1a 82       	std	Y+2, r1	; 0x02
#include "comonFunctions.h"

u8 compareString(u8* s1 , u8* s2,u8 size){
	u8 result = 1;
	u8 i;
	for (i = 0 ; i < size ; i++){
    4a46:	89 81       	ldd	r24, Y+1	; 0x01
    4a48:	8f 5f       	subi	r24, 0xFF	; 255
    4a4a:	89 83       	std	Y+1, r24	; 0x01
    4a4c:	99 81       	ldd	r25, Y+1	; 0x01
    4a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    4a50:	98 17       	cp	r25, r24
    4a52:	20 f3       	brcs	.-56     	; 0x4a1c <compareString+0x26>
		else {
			result = 0;
		}

	}
	return result;
    4a54:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a56:	27 96       	adiw	r28, 0x07	; 7
    4a58:	0f b6       	in	r0, 0x3f	; 63
    4a5a:	f8 94       	cli
    4a5c:	de bf       	out	0x3e, r29	; 62
    4a5e:	0f be       	out	0x3f, r0	; 63
    4a60:	cd bf       	out	0x3d, r28	; 61
    4a62:	cf 91       	pop	r28
    4a64:	df 91       	pop	r29
    4a66:	08 95       	ret

00004a68 <main>:
u8 currentTemprature 	= 0;

u8 flag					= 0 ;


int main (){
    4a68:	df 93       	push	r29
    4a6a:	cf 93       	push	r28
    4a6c:	cd b7       	in	r28, 0x3d	; 61
    4a6e:	de b7       	in	r29, 0x3e	; 62
	initUsedPrefrals();
    4a70:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <initUsedPrefrals>
	welcomeScreen();
    4a74:	0e 94 77 26 	call	0x4cee	; 0x4cee <welcomeScreen>

	while(1){

		if (flag == 0){	//selection screen
    4a78:	80 91 4c 02 	lds	r24, 0x024C
    4a7c:	88 23       	and	r24, r24
    4a7e:	19 f4       	brne	.+6      	; 0x4a86 <main+0x1e>
			selectioScreen();
    4a80:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <selectioScreen>
    4a84:	f9 cf       	rjmp	.-14     	; 0x4a78 <main+0x10>
		}
		else if (flag == 1){
    4a86:	80 91 4c 02 	lds	r24, 0x024C
    4a8a:	81 30       	cpi	r24, 0x01	; 1
    4a8c:	19 f4       	brne	.+6      	; 0x4a94 <main+0x2c>
			//enter new user data and send to EEPROM;
			enterNewUserData();
    4a8e:	0e 94 52 29 	call	0x52a4	; 0x52a4 <enterNewUserData>
    4a92:	f2 cf       	rjmp	.-28     	; 0x4a78 <main+0x10>
		}
		else if(flag == 2){
    4a94:	80 91 4c 02 	lds	r24, 0x024C
    4a98:	82 30       	cpi	r24, 0x02	; 2
    4a9a:	71 f3       	breq	.-36     	; 0x4a78 <main+0x10>
			//changeUserData();
		}
		else if(flag == 3){
    4a9c:	80 91 4c 02 	lds	r24, 0x024C
    4aa0:	83 30       	cpi	r24, 0x03	; 3
    4aa2:	19 f4       	brne	.+6      	; 0x4aaa <main+0x42>
			// enter user data and confirm identity
			enterUserData();
    4aa4:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <enterUserData>
    4aa8:	e7 cf       	rjmp	.-50     	; 0x4a78 <main+0x10>
		}
		else if(flag == 4){
    4aaa:	80 91 4c 02 	lds	r24, 0x024C
    4aae:	84 30       	cpi	r24, 0x04	; 4
    4ab0:	19 f7       	brne	.-58     	; 0x4a78 <main+0x10>
			// you are now in the system
			//recive order from bluetooth
			while(1){
				if (IsRecivedFromBluetooth()){
    4ab2:	0e 94 ba 2a 	call	0x5574	; 0x5574 <IsRecivedFromBluetooth>
    4ab6:	88 23       	and	r24, r24
    4ab8:	31 f0       	breq	.+12     	; 0x4ac6 <main+0x5e>
					getDataFromBluetooth();
    4aba:	0e 94 a1 2a 	call	0x5542	; 0x5542 <getDataFromBluetooth>
					MUART_voidTransmitString("AMr");
    4abe:	80 e6       	ldi	r24, 0x60	; 96
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	0e 94 b4 24 	call	0x4968	; 0x4968 <MUART_voidTransmitString>
				}
				if (bluetoothOrder == BLUETOOTH_OPEN_FAN){
    4ac6:	80 91 30 02 	lds	r24, 0x0230
    4aca:	83 33       	cpi	r24, 0x33	; 51
    4acc:	49 f4       	brne	.+18     	; 0x4ae0 <main+0x78>
					slaveFanOrder = FAN_ON_BLUETOOTH;
    4ace:	89 e9       	ldi	r24, 0x99	; 153
    4ad0:	80 93 31 02 	sts	0x0231, r24
					sendFanOrderToSlave();
    4ad4:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <sendFanOrderToSlave>
					bluetoothOrder = NO_ORDER;
    4ad8:	84 ea       	ldi	r24, 0xA4	; 164
    4ada:	80 93 30 02 	sts	0x0230, r24
    4ade:	5a c0       	rjmp	.+180    	; 0x4b94 <main+0x12c>
				}
				else if (bluetoothOrder == BLUETOOTH_CLOSE_FAN){
    4ae0:	80 91 30 02 	lds	r24, 0x0230
    4ae4:	84 33       	cpi	r24, 0x34	; 52
    4ae6:	49 f4       	brne	.+18     	; 0x4afa <main+0x92>
					slaveFanOrder = FAN_OFF_BLUETOOTH;
    4ae8:	8a e9       	ldi	r24, 0x9A	; 154
    4aea:	80 93 31 02 	sts	0x0231, r24
					sendFanOrderToSlave();
    4aee:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <sendFanOrderToSlave>
					bluetoothOrder = NO_ORDER;
    4af2:	84 ea       	ldi	r24, 0xA4	; 164
    4af4:	80 93 30 02 	sts	0x0230, r24
    4af8:	4d c0       	rjmp	.+154    	; 0x4b94 <main+0x12c>
				}
				else if (bluetoothOrder == BLUETOOTH_OPEN_DOOR){
    4afa:	80 91 30 02 	lds	r24, 0x0230
    4afe:	81 33       	cpi	r24, 0x31	; 49
    4b00:	49 f4       	brne	.+18     	; 0x4b14 <main+0xac>
					slaveDoorOrder = DOOR_ON_BLUETOOTH;
    4b02:	8f e9       	ldi	r24, 0x9F	; 159
    4b04:	80 93 33 02 	sts	0x0233, r24
					sendDoorOrderToSlave();
    4b08:	0e 94 ed 2a 	call	0x55da	; 0x55da <sendDoorOrderToSlave>
					bluetoothOrder = NO_ORDER;
    4b0c:	84 ea       	ldi	r24, 0xA4	; 164
    4b0e:	80 93 30 02 	sts	0x0230, r24
    4b12:	40 c0       	rjmp	.+128    	; 0x4b94 <main+0x12c>
				}
				else if (bluetoothOrder == BLUETOOTH_CLOSE_DOOR){
    4b14:	80 91 30 02 	lds	r24, 0x0230
    4b18:	82 33       	cpi	r24, 0x32	; 50
    4b1a:	49 f4       	brne	.+18     	; 0x4b2e <main+0xc6>
					slaveDoorOrder = DOOR_OFF_BLUETOOTH;
    4b1c:	80 ea       	ldi	r24, 0xA0	; 160
    4b1e:	80 93 33 02 	sts	0x0233, r24
					sendDoorOrderToSlave();
    4b22:	0e 94 ed 2a 	call	0x55da	; 0x55da <sendDoorOrderToSlave>
					bluetoothOrder = NO_ORDER;
    4b26:	84 ea       	ldi	r24, 0xA4	; 164
    4b28:	80 93 30 02 	sts	0x0230, r24
    4b2c:	33 c0       	rjmp	.+102    	; 0x4b94 <main+0x12c>
				}

				else if (bluetoothOrder == BLUETOOTH_OPEN_GARAGE){
    4b2e:	80 91 30 02 	lds	r24, 0x0230
    4b32:	85 33       	cpi	r24, 0x35	; 53
    4b34:	49 f4       	brne	.+18     	; 0x4b48 <main+0xe0>
					slaveGarageOrder = GARAGE_ON_BLUETOOTH;
    4b36:	81 ea       	ldi	r24, 0xA1	; 161
    4b38:	80 93 34 02 	sts	0x0234, r24
					sendGarageOrderToSlave();
    4b3c:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <sendGarageOrderToSlave>
					bluetoothOrder = NO_ORDER;
    4b40:	84 ea       	ldi	r24, 0xA4	; 164
    4b42:	80 93 30 02 	sts	0x0230, r24
    4b46:	26 c0       	rjmp	.+76     	; 0x4b94 <main+0x12c>
				}
				else if (bluetoothOrder == BLUETOOTH_CLOSE_GARAGE){
    4b48:	80 91 30 02 	lds	r24, 0x0230
    4b4c:	86 33       	cpi	r24, 0x36	; 54
    4b4e:	49 f4       	brne	.+18     	; 0x4b62 <main+0xfa>
					slaveGarageOrder = GARAGE_OFF_BLUETOOTH;
    4b50:	82 ea       	ldi	r24, 0xA2	; 162
    4b52:	80 93 34 02 	sts	0x0234, r24
					sendGarageOrderToSlave();
    4b56:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <sendGarageOrderToSlave>
					bluetoothOrder = NO_ORDER;
    4b5a:	84 ea       	ldi	r24, 0xA4	; 164
    4b5c:	80 93 30 02 	sts	0x0230, r24
    4b60:	19 c0       	rjmp	.+50     	; 0x4b94 <main+0x12c>
				}
				else if (bluetoothOrder == BLUETOOTH_OPEN_LIGHT){
    4b62:	80 91 30 02 	lds	r24, 0x0230
    4b66:	87 33       	cpi	r24, 0x37	; 55
    4b68:	49 f4       	brne	.+18     	; 0x4b7c <main+0x114>
					slaveLightOrder = LIGHT_ON_BLUETOOTH;
    4b6a:	8d e9       	ldi	r24, 0x9D	; 157
    4b6c:	80 93 32 02 	sts	0x0232, r24
					sendLightOrderToSlave();
    4b70:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <sendLightOrderToSlave>
					bluetoothOrder = NO_ORDER;
    4b74:	84 ea       	ldi	r24, 0xA4	; 164
    4b76:	80 93 30 02 	sts	0x0230, r24
    4b7a:	0c c0       	rjmp	.+24     	; 0x4b94 <main+0x12c>
				}
				else if (bluetoothOrder == BLUETOOTH_CLOSE_LIGHT){
    4b7c:	80 91 30 02 	lds	r24, 0x0230
    4b80:	88 33       	cpi	r24, 0x38	; 56
    4b82:	41 f4       	brne	.+16     	; 0x4b94 <main+0x12c>
					slaveLightOrder = LIGHT_OFF_BLUETOOTH;
    4b84:	8e e9       	ldi	r24, 0x9E	; 158
    4b86:	80 93 32 02 	sts	0x0232, r24
					sendLightOrderToSlave();
    4b8a:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <sendLightOrderToSlave>
					bluetoothOrder = NO_ORDER;
    4b8e:	84 ea       	ldi	r24, 0xA4	; 164
    4b90:	80 93 30 02 	sts	0x0230, r24
				}

				if ((currentTemprature != newTemprature)){
    4b94:	90 91 4b 02 	lds	r25, 0x024B
    4b98:	80 91 4a 02 	lds	r24, 0x024A
    4b9c:	98 17       	cp	r25, r24
    4b9e:	41 f0       	breq	.+16     	; 0x4bb0 <main+0x148>
					currentTemprature = newTemprature;
    4ba0:	80 91 4a 02 	lds	r24, 0x024A
    4ba4:	80 93 4b 02 	sts	0x024B, r24
					displayLightAndTemp();
    4ba8:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <displayLightAndTemp>
					sendTempToSlave();
    4bac:	0e 94 c7 2a 	call	0x558e	; 0x558e <sendTempToSlave>
				}

				if (currentLux != newLux){
    4bb0:	20 91 48 02 	lds	r18, 0x0248
    4bb4:	30 91 49 02 	lds	r19, 0x0249
    4bb8:	80 91 46 02 	lds	r24, 0x0246
    4bbc:	90 91 47 02 	lds	r25, 0x0247
    4bc0:	28 17       	cp	r18, r24
    4bc2:	39 07       	cpc	r19, r25
    4bc4:	51 f0       	breq	.+20     	; 0x4bda <main+0x172>
					currentLux = newLux;
    4bc6:	80 91 46 02 	lds	r24, 0x0246
    4bca:	90 91 47 02 	lds	r25, 0x0247
    4bce:	90 93 49 02 	sts	0x0249, r25
    4bd2:	80 93 48 02 	sts	0x0248, r24
					displayLightAndTemp();
    4bd6:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <displayLightAndTemp>
				}

				/*	handeling fan order with temp value  */
				if ((currentTemprature > 22) && (slaveFanOrder != FAN_ON_TEMP) && (slaveFanOrder != FAN_OFF_BLUETOOTH)){
    4bda:	80 91 4b 02 	lds	r24, 0x024B
    4bde:	87 31       	cpi	r24, 0x17	; 23
    4be0:	68 f0       	brcs	.+26     	; 0x4bfc <main+0x194>
    4be2:	80 91 31 02 	lds	r24, 0x0231
    4be6:	87 39       	cpi	r24, 0x97	; 151
    4be8:	49 f0       	breq	.+18     	; 0x4bfc <main+0x194>
    4bea:	80 91 31 02 	lds	r24, 0x0231
    4bee:	8a 39       	cpi	r24, 0x9A	; 154
    4bf0:	29 f0       	breq	.+10     	; 0x4bfc <main+0x194>
					slaveFanOrder = FAN_ON_TEMP;
    4bf2:	87 e9       	ldi	r24, 0x97	; 151
    4bf4:	80 93 31 02 	sts	0x0231, r24
					sendFanOrderToSlave();
    4bf8:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <sendFanOrderToSlave>
				}

				if ((currentTemprature < 19 ) && (slaveFanOrder != FAN_OFF_TEMP) && (slaveFanOrder != FAN_ON_BLUETOOTH)){
    4bfc:	80 91 4b 02 	lds	r24, 0x024B
    4c00:	83 31       	cpi	r24, 0x13	; 19
    4c02:	68 f4       	brcc	.+26     	; 0x4c1e <main+0x1b6>
    4c04:	80 91 31 02 	lds	r24, 0x0231
    4c08:	88 39       	cpi	r24, 0x98	; 152
    4c0a:	49 f0       	breq	.+18     	; 0x4c1e <main+0x1b6>
    4c0c:	80 91 31 02 	lds	r24, 0x0231
    4c10:	89 39       	cpi	r24, 0x99	; 153
    4c12:	29 f0       	breq	.+10     	; 0x4c1e <main+0x1b6>
					slaveFanOrder = FAN_OFF_TEMP;
    4c14:	88 e9       	ldi	r24, 0x98	; 152
    4c16:	80 93 31 02 	sts	0x0231, r24
					sendFanOrderToSlave();
    4c1a:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <sendFanOrderToSlave>
				}
				/* handeling Ligth order with lux value 1: prameter , 2: prevent repition ,3:bluetooth*/
				if ((currentLux > 1000) && (slaveLightOrder != LIGHT_OFF_LUX) && (slaveLightOrder != LIGHT_ON_BLUETOOTH)){
    4c1e:	80 91 48 02 	lds	r24, 0x0248
    4c22:	90 91 49 02 	lds	r25, 0x0249
    4c26:	23 e0       	ldi	r18, 0x03	; 3
    4c28:	89 3e       	cpi	r24, 0xE9	; 233
    4c2a:	92 07       	cpc	r25, r18
    4c2c:	68 f0       	brcs	.+26     	; 0x4c48 <main+0x1e0>
    4c2e:	80 91 32 02 	lds	r24, 0x0232
    4c32:	8c 39       	cpi	r24, 0x9C	; 156
    4c34:	49 f0       	breq	.+18     	; 0x4c48 <main+0x1e0>
    4c36:	80 91 32 02 	lds	r24, 0x0232
    4c3a:	8d 39       	cpi	r24, 0x9D	; 157
    4c3c:	29 f0       	breq	.+10     	; 0x4c48 <main+0x1e0>
					slaveLightOrder = LIGHT_OFF_LUX;
    4c3e:	8c e9       	ldi	r24, 0x9C	; 156
    4c40:	80 93 32 02 	sts	0x0232, r24
					sendLightOrderToSlave();
    4c44:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <sendLightOrderToSlave>
				}

				if ((currentLux < 400 ) && (slaveLightOrder != LIGHT_ON_LUX) && (slaveLightOrder != LIGHT_OFF_BLUETOOTH)){
    4c48:	80 91 48 02 	lds	r24, 0x0248
    4c4c:	90 91 49 02 	lds	r25, 0x0249
    4c50:	21 e0       	ldi	r18, 0x01	; 1
    4c52:	80 39       	cpi	r24, 0x90	; 144
    4c54:	92 07       	cpc	r25, r18
    4c56:	08 f0       	brcs	.+2      	; 0x4c5a <main+0x1f2>
    4c58:	2c cf       	rjmp	.-424    	; 0x4ab2 <main+0x4a>
    4c5a:	80 91 32 02 	lds	r24, 0x0232
    4c5e:	8b 39       	cpi	r24, 0x9B	; 155
    4c60:	09 f4       	brne	.+2      	; 0x4c64 <main+0x1fc>
    4c62:	27 cf       	rjmp	.-434    	; 0x4ab2 <main+0x4a>
    4c64:	80 91 32 02 	lds	r24, 0x0232
    4c68:	8e 39       	cpi	r24, 0x9E	; 158
    4c6a:	09 f4       	brne	.+2      	; 0x4c6e <main+0x206>
    4c6c:	22 cf       	rjmp	.-444    	; 0x4ab2 <main+0x4a>
					slaveLightOrder = LIGHT_ON_LUX;
    4c6e:	8b e9       	ldi	r24, 0x9B	; 155
    4c70:	80 93 32 02 	sts	0x0232, r24
					sendLightOrderToSlave();
    4c74:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <sendLightOrderToSlave>
    4c78:	1c cf       	rjmp	.-456    	; 0x4ab2 <main+0x4a>

00004c7a <ISR_TIMER0>:
extern u8 bluetoothOrder ;

static u8 tries = 0;


void ISR_TIMER0(void){
    4c7a:	df 93       	push	r29
    4c7c:	cf 93       	push	r28
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
	static u8 counter= 0;
	counter ++;
    4c82:	80 91 4e 02 	lds	r24, 0x024E
    4c86:	8f 5f       	subi	r24, 0xFF	; 255
    4c88:	80 93 4e 02 	sts	0x024E, r24
	if (counter == 32){
    4c8c:	80 91 4e 02 	lds	r24, 0x024E
    4c90:	80 32       	cpi	r24, 0x20	; 32
    4c92:	61 f4       	brne	.+24     	; 0x4cac <ISR_TIMER0+0x32>
		/* ecah 1 sec */
		counter = 0;
    4c94:	10 92 4e 02 	sts	0x024E, r1
		newLux = HLDR_u16GetRead();
    4c98:	0e 94 91 18 	call	0x3122	; 0x3122 <HLDR_u16GetRead>
    4c9c:	90 93 47 02 	sts	0x0247, r25
    4ca0:	80 93 46 02 	sts	0x0246, r24
		newTemprature = (u8)HLM35_s16GetRead();
    4ca4:	0e 94 c3 18 	call	0x3186	; 0x3186 <HLM35_s16GetRead>
    4ca8:	80 93 4a 02 	sts	0x024A, r24
		}
}
    4cac:	cf 91       	pop	r28
    4cae:	df 91       	pop	r29
    4cb0:	08 95       	ret

00004cb2 <initUsedPrefrals>:

void initUsedPrefrals(){
    4cb2:	df 93       	push	r29
    4cb4:	cf 93       	push	r28
    4cb6:	cd b7       	in	r28, 0x3d	; 61
    4cb8:	de b7       	in	r29, 0x3e	; 62
	Port_voidInit();
    4cba:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <Port_voidInit>

	/*I2C init*/
	MTWI_voidInit();
    4cbe:	0e 94 66 23 	call	0x46cc	; 0x46cc <MTWI_voidInit>

	MADC_ErrorStateInit(ADC_VREF_VCC,ADC_PRESCALER_DIV32,ADC_RIGHT_ADJUSTMENT);
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	65 e0       	ldi	r22, 0x05	; 5
    4cc6:	40 e0       	ldi	r20, 0x00	; 0
    4cc8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <MADC_ErrorStateInit>
	MSPI_voidInit();
    4ccc:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <MSPI_voidInit>
	HLCD_voidInit();
    4cd0:	0e 94 8e 09 	call	0x131c	; 0x131c <HLCD_voidInit>
	MGIE_voidEnable();
    4cd4:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <MGIE_voidEnable>
	MTIMER0_voidInit();
    4cd8:	0e 94 44 20 	call	0x4088	; 0x4088 <MTIMER0_voidInit>
	setCallBackTimer0(ISR_TIMER0);
    4cdc:	8d e3       	ldi	r24, 0x3D	; 61
    4cde:	96 e2       	ldi	r25, 0x26	; 38
    4ce0:	0e 94 b1 20 	call	0x4162	; 0x4162 <setCallBackTimer0>
	MUART_voidInit();
    4ce4:	0e 94 64 24 	call	0x48c8	; 0x48c8 <MUART_voidInit>
}
    4ce8:	cf 91       	pop	r28
    4cea:	df 91       	pop	r29
    4cec:	08 95       	ret

00004cee <welcomeScreen>:

void welcomeScreen (){
    4cee:	df 93       	push	r29
    4cf0:	cf 93       	push	r28
    4cf2:	cd b7       	in	r28, 0x3d	; 61
    4cf4:	de b7       	in	r29, 0x3e	; 62
    4cf6:	2e 97       	sbiw	r28, 0x0e	; 14
    4cf8:	0f b6       	in	r0, 0x3f	; 63
    4cfa:	f8 94       	cli
    4cfc:	de bf       	out	0x3e, r29	; 62
    4cfe:	0f be       	out	0x3f, r0	; 63
    4d00:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendString("   Welcome to");
    4d02:	84 e6       	ldi	r24, 0x64	; 100
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
	HLCD_voidSetCursorPosition(2,0);
    4d0a:	82 e0       	ldi	r24, 0x02	; 2
    4d0c:	60 e0       	ldi	r22, 0x00	; 0
    4d0e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
	HLCD_voidSendString("   Smart Home");
    4d12:	82 e7       	ldi	r24, 0x72	; 114
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
    4d1a:	80 e0       	ldi	r24, 0x00	; 0
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	aa ef       	ldi	r26, 0xFA	; 250
    4d20:	b4 e4       	ldi	r27, 0x44	; 68
    4d22:	8b 87       	std	Y+11, r24	; 0x0b
    4d24:	9c 87       	std	Y+12, r25	; 0x0c
    4d26:	ad 87       	std	Y+13, r26	; 0x0d
    4d28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d32:	20 e0       	ldi	r18, 0x00	; 0
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	4a ef       	ldi	r20, 0xFA	; 250
    4d38:	54 e4       	ldi	r21, 0x44	; 68
    4d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d3e:	dc 01       	movw	r26, r24
    4d40:	cb 01       	movw	r24, r22
    4d42:	8f 83       	std	Y+7, r24	; 0x07
    4d44:	98 87       	std	Y+8, r25	; 0x08
    4d46:	a9 87       	std	Y+9, r26	; 0x09
    4d48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d4c:	78 85       	ldd	r23, Y+8	; 0x08
    4d4e:	89 85       	ldd	r24, Y+9	; 0x09
    4d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	40 e8       	ldi	r20, 0x80	; 128
    4d58:	5f e3       	ldi	r21, 0x3F	; 63
    4d5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d5e:	88 23       	and	r24, r24
    4d60:	2c f4       	brge	.+10     	; 0x4d6c <welcomeScreen+0x7e>
		__ticks = 1;
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	9e 83       	std	Y+6, r25	; 0x06
    4d68:	8d 83       	std	Y+5, r24	; 0x05
    4d6a:	3f c0       	rjmp	.+126    	; 0x4dea <welcomeScreen+0xfc>
	else if (__tmp > 65535)
    4d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    4d6e:	78 85       	ldd	r23, Y+8	; 0x08
    4d70:	89 85       	ldd	r24, Y+9	; 0x09
    4d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	3f ef       	ldi	r19, 0xFF	; 255
    4d78:	4f e7       	ldi	r20, 0x7F	; 127
    4d7a:	57 e4       	ldi	r21, 0x47	; 71
    4d7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d80:	18 16       	cp	r1, r24
    4d82:	4c f5       	brge	.+82     	; 0x4dd6 <welcomeScreen+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	40 e2       	ldi	r20, 0x20	; 32
    4d92:	51 e4       	ldi	r21, 0x41	; 65
    4d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d98:	dc 01       	movw	r26, r24
    4d9a:	cb 01       	movw	r24, r22
    4d9c:	bc 01       	movw	r22, r24
    4d9e:	cd 01       	movw	r24, r26
    4da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da4:	dc 01       	movw	r26, r24
    4da6:	cb 01       	movw	r24, r22
    4da8:	9e 83       	std	Y+6, r25	; 0x06
    4daa:	8d 83       	std	Y+5, r24	; 0x05
    4dac:	0f c0       	rjmp	.+30     	; 0x4dcc <welcomeScreen+0xde>
    4dae:	88 ec       	ldi	r24, 0xC8	; 200
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	9c 83       	std	Y+4, r25	; 0x04
    4db4:	8b 83       	std	Y+3, r24	; 0x03
    4db6:	8b 81       	ldd	r24, Y+3	; 0x03
    4db8:	9c 81       	ldd	r25, Y+4	; 0x04
    4dba:	01 97       	sbiw	r24, 0x01	; 1
    4dbc:	f1 f7       	brne	.-4      	; 0x4dba <welcomeScreen+0xcc>
    4dbe:	9c 83       	std	Y+4, r25	; 0x04
    4dc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4dc6:	01 97       	sbiw	r24, 0x01	; 1
    4dc8:	9e 83       	std	Y+6, r25	; 0x06
    4dca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    4dce:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd0:	00 97       	sbiw	r24, 0x00	; 0
    4dd2:	69 f7       	brne	.-38     	; 0x4dae <welcomeScreen+0xc0>
    4dd4:	14 c0       	rjmp	.+40     	; 0x4dfe <welcomeScreen+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    4dd8:	78 85       	ldd	r23, Y+8	; 0x08
    4dda:	89 85       	ldd	r24, Y+9	; 0x09
    4ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de2:	dc 01       	movw	r26, r24
    4de4:	cb 01       	movw	r24, r22
    4de6:	9e 83       	std	Y+6, r25	; 0x06
    4de8:	8d 83       	std	Y+5, r24	; 0x05
    4dea:	8d 81       	ldd	r24, Y+5	; 0x05
    4dec:	9e 81       	ldd	r25, Y+6	; 0x06
    4dee:	9a 83       	std	Y+2, r25	; 0x02
    4df0:	89 83       	std	Y+1, r24	; 0x01
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	9a 81       	ldd	r25, Y+2	; 0x02
    4df6:	01 97       	sbiw	r24, 0x01	; 1
    4df8:	f1 f7       	brne	.-4      	; 0x4df6 <welcomeScreen+0x108>
    4dfa:	9a 83       	std	Y+2, r25	; 0x02
    4dfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	flag = 0;
    4dfe:	10 92 4c 02 	sts	0x024C, r1
}
    4e02:	2e 96       	adiw	r28, 0x0e	; 14
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	f8 94       	cli
    4e08:	de bf       	out	0x3e, r29	; 62
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	cd bf       	out	0x3d, r28	; 61
    4e0e:	cf 91       	pop	r28
    4e10:	df 91       	pop	r29
    4e12:	08 95       	ret

00004e14 <gettingMode>:

void gettingMode (){
    4e14:	df 93       	push	r29
    4e16:	cf 93       	push	r28
    4e18:	0f 92       	push	r0
    4e1a:	cd b7       	in	r28, 0x3d	; 61
    4e1c:	de b7       	in	r29, 0x3e	; 62
	tries = 0;
    4e1e:	10 92 4d 02 	sts	0x024D, r1
	u8 key = 0;
    4e22:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		key = HKeyPad_u8GetKey();
    4e24:	0e 94 a9 08 	call	0x1152	; 0x1152 <HKeyPad_u8GetKey>
    4e28:	89 83       	std	Y+1, r24	; 0x01
		if (key == '1'){
    4e2a:	89 81       	ldd	r24, Y+1	; 0x01
    4e2c:	81 33       	cpi	r24, 0x31	; 49
    4e2e:	21 f4       	brne	.+8      	; 0x4e38 <gettingMode+0x24>
			flag = 1;
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	80 93 4c 02 	sts	0x024C, r24
    4e36:	06 c0       	rjmp	.+12     	; 0x4e44 <gettingMode+0x30>
		}
		//		else if (key == '2'){
		//			flag = 2;
		//			break;
		//		}
		else if (key == '3'){
    4e38:	89 81       	ldd	r24, Y+1	; 0x01
    4e3a:	83 33       	cpi	r24, 0x33	; 51
    4e3c:	99 f7       	brne	.-26     	; 0x4e24 <gettingMode+0x10>
			flag = 3;
    4e3e:	83 e0       	ldi	r24, 0x03	; 3
    4e40:	80 93 4c 02 	sts	0x024C, r24
			break;
		}
	}
}
    4e44:	0f 90       	pop	r0
    4e46:	cf 91       	pop	r28
    4e48:	df 91       	pop	r29
    4e4a:	08 95       	ret

00004e4c <selectioScreen>:

void selectioScreen(){
    4e4c:	df 93       	push	r29
    4e4e:	cf 93       	push	r28
    4e50:	cd b7       	in	r28, 0x3d	; 61
    4e52:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidClearDisplay();
    4e54:	0e 94 60 18 	call	0x30c0	; 0x30c0 <HLCD_voidClearDisplay>
	HLCD_voidSetCursorPosition(0,0);
    4e58:	80 e0       	ldi	r24, 0x00	; 0
    4e5a:	60 e0       	ldi	r22, 0x00	; 0
    4e5c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
	HLCD_voidSendString(" 1:add new user");
    4e60:	80 e8       	ldi	r24, 0x80	; 128
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
	HLCD_voidSetCursorPosition(2,0);
    4e68:	82 e0       	ldi	r24, 0x02	; 2
    4e6a:	60 e0       	ldi	r22, 0x00	; 0
    4e6c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
	HLCD_voidSendString("2:editUsr 3:open");
    4e70:	80 e9       	ldi	r24, 0x90	; 144
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
	gettingMode ();
    4e78:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <gettingMode>
}
    4e7c:	cf 91       	pop	r28
    4e7e:	df 91       	pop	r29
    4e80:	08 95       	ret

00004e82 <gettingNameAndPass>:

void gettingNameAndPass(u8* enterdNameAndPass){
    4e82:	df 93       	push	r29
    4e84:	cf 93       	push	r28
    4e86:	00 d0       	rcall	.+0      	; 0x4e88 <gettingNameAndPass+0x6>
    4e88:	00 d0       	rcall	.+0      	; 0x4e8a <gettingNameAndPass+0x8>
    4e8a:	0f 92       	push	r0
    4e8c:	cd b7       	in	r28, 0x3d	; 61
    4e8e:	de b7       	in	r29, 0x3e	; 62
    4e90:	9d 83       	std	Y+5, r25	; 0x05
    4e92:	8c 83       	std	Y+4, r24	; 0x04
	u8 tempK;
	u8 iterator = 0;
    4e94:	1a 82       	std	Y+2, r1	; 0x02
	u8 lcdLine = 1;
    4e96:	81 e0       	ldi	r24, 0x01	; 1
    4e98:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		tempK = HKeyPad_u8GetKey();
    4e9a:	0e 94 a9 08 	call	0x1152	; 0x1152 <HKeyPad_u8GetKey>
    4e9e:	8b 83       	std	Y+3, r24	; 0x03
		if ( tempK != NO_KEY ){
    4ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea2:	88 23       	and	r24, r24
    4ea4:	d1 f3       	breq	.-12     	; 0x4e9a <gettingNameAndPass+0x18>
			/* sending entered key to lcd */
			HLCD_voidSetCursorPosition(lcdLine,6+(iterator%4));
    4ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea8:	83 70       	andi	r24, 0x03	; 3
    4eaa:	98 2f       	mov	r25, r24
    4eac:	9a 5f       	subi	r25, 0xFA	; 250
    4eae:	89 81       	ldd	r24, Y+1	; 0x01
    4eb0:	69 2f       	mov	r22, r25
    4eb2:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
			HLCD_voidSendData(tempK);
    4eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4eb8:	0e 94 ac 10 	call	0x2158	; 0x2158 <HLCD_voidSendData>

			enterdNameAndPass[iterator] = tempK;
    4ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ebe:	28 2f       	mov	r18, r24
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ec6:	fc 01       	movw	r30, r24
    4ec8:	e2 0f       	add	r30, r18
    4eca:	f3 1f       	adc	r31, r19
    4ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ece:	80 83       	st	Z, r24
			tempK = NO_KEY;
    4ed0:	1b 82       	std	Y+3, r1	; 0x03
			iterator++;
    4ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed4:	8f 5f       	subi	r24, 0xFF	; 255
    4ed6:	8a 83       	std	Y+2, r24	; 0x02

			if(iterator == 4){
    4ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eda:	84 30       	cpi	r24, 0x04	; 4
    4edc:	11 f4       	brne	.+4      	; 0x4ee2 <gettingNameAndPass+0x60>
				lcdLine = 2;
    4ede:	82 e0       	ldi	r24, 0x02	; 2
    4ee0:	89 83       	std	Y+1, r24	; 0x01
			}
			if(iterator == 8){
    4ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee4:	88 30       	cpi	r24, 0x08	; 8
    4ee6:	c9 f6       	brne	.-78     	; 0x4e9a <gettingNameAndPass+0x18>
				enterdNameAndPass[iterator] = '\0';
    4ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eea:	28 2f       	mov	r18, r24
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	8c 81       	ldd	r24, Y+4	; 0x04
    4ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    4ef2:	fc 01       	movw	r30, r24
    4ef4:	e2 0f       	add	r30, r18
    4ef6:	f3 1f       	adc	r31, r19
    4ef8:	10 82       	st	Z, r1
				break;
			}
		}
	}
    4efa:	0f 90       	pop	r0
    4efc:	0f 90       	pop	r0
    4efe:	0f 90       	pop	r0
    4f00:	0f 90       	pop	r0
    4f02:	0f 90       	pop	r0
    4f04:	cf 91       	pop	r28
    4f06:	df 91       	pop	r29
    4f08:	08 95       	ret

00004f0a <nameAndPassScreen>:
}
void nameAndPassScreen(){
    4f0a:	df 93       	push	r29
    4f0c:	cf 93       	push	r28
    4f0e:	cd b7       	in	r28, 0x3d	; 61
    4f10:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidClearDisplay();
    4f12:	0e 94 60 18 	call	0x30c0	; 0x30c0 <HLCD_voidClearDisplay>
	HLCD_voidSetCursorPosition(0,0);
    4f16:	80 e0       	ldi	r24, 0x00	; 0
    4f18:	60 e0       	ldi	r22, 0x00	; 0
    4f1a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
	HLCD_voidSendString("Name:");
    4f1e:	81 ea       	ldi	r24, 0xA1	; 161
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
	HLCD_voidSetCursorPosition(2,0);
    4f26:	82 e0       	ldi	r24, 0x02	; 2
    4f28:	60 e0       	ldi	r22, 0x00	; 0
    4f2a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
	HLCD_voidSendString("Pass:");
    4f2e:	87 ea       	ldi	r24, 0xA7	; 167
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>

}
    4f36:	cf 91       	pop	r28
    4f38:	df 91       	pop	r29
    4f3a:	08 95       	ret

00004f3c <enterUserData>:

void enterUserData (){
    4f3c:	df 93       	push	r29
    4f3e:	cf 93       	push	r28
    4f40:	cd b7       	in	r28, 0x3d	; 61
    4f42:	de b7       	in	r29, 0x3e	; 62
    4f44:	ae 97       	sbiw	r28, 0x2e	; 46
    4f46:	0f b6       	in	r0, 0x3f	; 63
    4f48:	f8 94       	cli
    4f4a:	de bf       	out	0x3e, r29	; 62
    4f4c:	0f be       	out	0x3f, r0	; 63
    4f4e:	cd bf       	out	0x3d, r28	; 61
	nameAndPassScreen();
    4f50:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <nameAndPassScreen>

	u8* savedNameAndPass  = (u8*) "NAMEPASS" ;
    4f54:	8d ea       	ldi	r24, 0xAD	; 173
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	9e a7       	std	Y+46, r25	; 0x2e
    4f5a:	8d a7       	std	Y+45, r24	; 0x2d
	u8* enterdNameAndPass = (u8*) "Amr00000" ;
    4f5c:	86 eb       	ldi	r24, 0xB6	; 182
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	9c a7       	std	Y+44, r25	; 0x2c
    4f62:	8b a7       	std	Y+43, r24	; 0x2b

	gettingNameAndPass(enterdNameAndPass);
    4f64:	8b a5       	ldd	r24, Y+43	; 0x2b
    4f66:	9c a5       	ldd	r25, Y+44	; 0x2c
    4f68:	0e 94 41 27 	call	0x4e82	; 0x4e82 <gettingNameAndPass>

	EEPROM_voidReadString(0x50,0x00,8,savedNameAndPass);
    4f6c:	2d a5       	ldd	r18, Y+45	; 0x2d
    4f6e:	3e a5       	ldd	r19, Y+46	; 0x2e
    4f70:	80 e5       	ldi	r24, 0x50	; 80
    4f72:	60 e0       	ldi	r22, 0x00	; 0
    4f74:	48 e0       	ldi	r20, 0x08	; 8
    4f76:	0e 94 67 08 	call	0x10ce	; 0x10ce <EEPROM_voidReadString>
	//	HLCD_voidClearDisplay();
	//	HLCD_voidSendString((s8*)enterdNameAndPass);
	//	HLCD_voidSendString((s8*)savedNameAndPass);

	/* checking name pass */
	if(compareString(savedNameAndPass,enterdNameAndPass,8)){
    4f7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4f7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4f7e:	2b a5       	ldd	r18, Y+43	; 0x2b
    4f80:	3c a5       	ldd	r19, Y+44	; 0x2c
    4f82:	b9 01       	movw	r22, r18
    4f84:	48 e0       	ldi	r20, 0x08	; 8
    4f86:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <compareString>
    4f8a:	88 23       	and	r24, r24
    4f8c:	09 f4       	brne	.+2      	; 0x4f90 <enterUserData+0x54>
    4f8e:	7f c0       	rjmp	.+254    	; 0x508e <enterUserData+0x152>
		HLCD_voidClearDisplay();
    4f90:	0e 94 60 18 	call	0x30c0	; 0x30c0 <HLCD_voidClearDisplay>
		HLCD_voidSendString("     RGHT");
    4f94:	8f eb       	ldi	r24, 0xBF	; 191
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	90 e8       	ldi	r25, 0x80	; 128
    4fa0:	ab eb       	ldi	r26, 0xBB	; 187
    4fa2:	b4 e4       	ldi	r27, 0x44	; 68
    4fa4:	8f a3       	std	Y+39, r24	; 0x27
    4fa6:	98 a7       	std	Y+40, r25	; 0x28
    4fa8:	a9 a7       	std	Y+41, r26	; 0x29
    4faa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fac:	6f a1       	ldd	r22, Y+39	; 0x27
    4fae:	78 a5       	ldd	r23, Y+40	; 0x28
    4fb0:	89 a5       	ldd	r24, Y+41	; 0x29
    4fb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	4a ef       	ldi	r20, 0xFA	; 250
    4fba:	54 e4       	ldi	r21, 0x44	; 68
    4fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc0:	dc 01       	movw	r26, r24
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	8b a3       	std	Y+35, r24	; 0x23
    4fc6:	9c a3       	std	Y+36, r25	; 0x24
    4fc8:	ad a3       	std	Y+37, r26	; 0x25
    4fca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    4fce:	7c a1       	ldd	r23, Y+36	; 0x24
    4fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    4fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	30 e0       	ldi	r19, 0x00	; 0
    4fd8:	40 e8       	ldi	r20, 0x80	; 128
    4fda:	5f e3       	ldi	r21, 0x3F	; 63
    4fdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fe0:	88 23       	and	r24, r24
    4fe2:	2c f4       	brge	.+10     	; 0x4fee <enterUserData+0xb2>
		__ticks = 1;
    4fe4:	81 e0       	ldi	r24, 0x01	; 1
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	9a a3       	std	Y+34, r25	; 0x22
    4fea:	89 a3       	std	Y+33, r24	; 0x21
    4fec:	3f c0       	rjmp	.+126    	; 0x506c <enterUserData+0x130>
	else if (__tmp > 65535)
    4fee:	6b a1       	ldd	r22, Y+35	; 0x23
    4ff0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ff2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ff4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ff6:	20 e0       	ldi	r18, 0x00	; 0
    4ff8:	3f ef       	ldi	r19, 0xFF	; 255
    4ffa:	4f e7       	ldi	r20, 0x7F	; 127
    4ffc:	57 e4       	ldi	r21, 0x47	; 71
    4ffe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5002:	18 16       	cp	r1, r24
    5004:	4c f5       	brge	.+82     	; 0x5058 <enterUserData+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5006:	6f a1       	ldd	r22, Y+39	; 0x27
    5008:	78 a5       	ldd	r23, Y+40	; 0x28
    500a:	89 a5       	ldd	r24, Y+41	; 0x29
    500c:	9a a5       	ldd	r25, Y+42	; 0x2a
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	40 e2       	ldi	r20, 0x20	; 32
    5014:	51 e4       	ldi	r21, 0x41	; 65
    5016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501a:	dc 01       	movw	r26, r24
    501c:	cb 01       	movw	r24, r22
    501e:	bc 01       	movw	r22, r24
    5020:	cd 01       	movw	r24, r26
    5022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5026:	dc 01       	movw	r26, r24
    5028:	cb 01       	movw	r24, r22
    502a:	9a a3       	std	Y+34, r25	; 0x22
    502c:	89 a3       	std	Y+33, r24	; 0x21
    502e:	0f c0       	rjmp	.+30     	; 0x504e <enterUserData+0x112>
    5030:	88 ec       	ldi	r24, 0xC8	; 200
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	98 a3       	std	Y+32, r25	; 0x20
    5036:	8f 8f       	std	Y+31, r24	; 0x1f
    5038:	8f 8d       	ldd	r24, Y+31	; 0x1f
    503a:	98 a1       	ldd	r25, Y+32	; 0x20
    503c:	01 97       	sbiw	r24, 0x01	; 1
    503e:	f1 f7       	brne	.-4      	; 0x503c <enterUserData+0x100>
    5040:	98 a3       	std	Y+32, r25	; 0x20
    5042:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5044:	89 a1       	ldd	r24, Y+33	; 0x21
    5046:	9a a1       	ldd	r25, Y+34	; 0x22
    5048:	01 97       	sbiw	r24, 0x01	; 1
    504a:	9a a3       	std	Y+34, r25	; 0x22
    504c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    504e:	89 a1       	ldd	r24, Y+33	; 0x21
    5050:	9a a1       	ldd	r25, Y+34	; 0x22
    5052:	00 97       	sbiw	r24, 0x00	; 0
    5054:	69 f7       	brne	.-38     	; 0x5030 <enterUserData+0xf4>
    5056:	14 c0       	rjmp	.+40     	; 0x5080 <enterUserData+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5058:	6b a1       	ldd	r22, Y+35	; 0x23
    505a:	7c a1       	ldd	r23, Y+36	; 0x24
    505c:	8d a1       	ldd	r24, Y+37	; 0x25
    505e:	9e a1       	ldd	r25, Y+38	; 0x26
    5060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5064:	dc 01       	movw	r26, r24
    5066:	cb 01       	movw	r24, r22
    5068:	9a a3       	std	Y+34, r25	; 0x22
    506a:	89 a3       	std	Y+33, r24	; 0x21
    506c:	89 a1       	ldd	r24, Y+33	; 0x21
    506e:	9a a1       	ldd	r25, Y+34	; 0x22
    5070:	9e 8f       	std	Y+30, r25	; 0x1e
    5072:	8d 8f       	std	Y+29, r24	; 0x1d
    5074:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5076:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5078:	01 97       	sbiw	r24, 0x01	; 1
    507a:	f1 f7       	brne	.-4      	; 0x5078 <enterUserData+0x13c>
    507c:	9e 8f       	std	Y+30, r25	; 0x1e
    507e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1500);
		flag = 4;
    5080:	84 e0       	ldi	r24, 0x04	; 4
    5082:	80 93 4c 02 	sts	0x024C, r24
		MSPI_u8TransciveByte(SLAVE_START);
    5086:	83 ea       	ldi	r24, 0xA3	; 163
    5088:	0e 94 27 20 	call	0x404e	; 0x404e <MSPI_u8TransciveByte>
    508c:	02 c1       	rjmp	.+516    	; 0x5292 <enterUserData+0x356>
	}
	else{
		HLCD_voidClearDisplay();
    508e:	0e 94 60 18 	call	0x30c0	; 0x30c0 <HLCD_voidClearDisplay>
		HLCD_voidSendString("     Wrong");
    5092:	89 ec       	ldi	r24, 0xC9	; 201
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
    509a:	80 e0       	ldi	r24, 0x00	; 0
    509c:	90 e8       	ldi	r25, 0x80	; 128
    509e:	ab eb       	ldi	r26, 0xBB	; 187
    50a0:	b4 e4       	ldi	r27, 0x44	; 68
    50a2:	89 8f       	std	Y+25, r24	; 0x19
    50a4:	9a 8f       	std	Y+26, r25	; 0x1a
    50a6:	ab 8f       	std	Y+27, r26	; 0x1b
    50a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50aa:	69 8d       	ldd	r22, Y+25	; 0x19
    50ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	30 e0       	ldi	r19, 0x00	; 0
    50b6:	4a ef       	ldi	r20, 0xFA	; 250
    50b8:	54 e4       	ldi	r21, 0x44	; 68
    50ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50be:	dc 01       	movw	r26, r24
    50c0:	cb 01       	movw	r24, r22
    50c2:	8d 8b       	std	Y+21, r24	; 0x15
    50c4:	9e 8b       	std	Y+22, r25	; 0x16
    50c6:	af 8b       	std	Y+23, r26	; 0x17
    50c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    50ca:	6d 89       	ldd	r22, Y+21	; 0x15
    50cc:	7e 89       	ldd	r23, Y+22	; 0x16
    50ce:	8f 89       	ldd	r24, Y+23	; 0x17
    50d0:	98 8d       	ldd	r25, Y+24	; 0x18
    50d2:	20 e0       	ldi	r18, 0x00	; 0
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	40 e8       	ldi	r20, 0x80	; 128
    50d8:	5f e3       	ldi	r21, 0x3F	; 63
    50da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50de:	88 23       	and	r24, r24
    50e0:	2c f4       	brge	.+10     	; 0x50ec <enterUserData+0x1b0>
		__ticks = 1;
    50e2:	81 e0       	ldi	r24, 0x01	; 1
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	9c 8b       	std	Y+20, r25	; 0x14
    50e8:	8b 8b       	std	Y+19, r24	; 0x13
    50ea:	3f c0       	rjmp	.+126    	; 0x516a <enterUserData+0x22e>
	else if (__tmp > 65535)
    50ec:	6d 89       	ldd	r22, Y+21	; 0x15
    50ee:	7e 89       	ldd	r23, Y+22	; 0x16
    50f0:	8f 89       	ldd	r24, Y+23	; 0x17
    50f2:	98 8d       	ldd	r25, Y+24	; 0x18
    50f4:	20 e0       	ldi	r18, 0x00	; 0
    50f6:	3f ef       	ldi	r19, 0xFF	; 255
    50f8:	4f e7       	ldi	r20, 0x7F	; 127
    50fa:	57 e4       	ldi	r21, 0x47	; 71
    50fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5100:	18 16       	cp	r1, r24
    5102:	4c f5       	brge	.+82     	; 0x5156 <enterUserData+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5104:	69 8d       	ldd	r22, Y+25	; 0x19
    5106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    510a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	40 e2       	ldi	r20, 0x20	; 32
    5112:	51 e4       	ldi	r21, 0x41	; 65
    5114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5118:	dc 01       	movw	r26, r24
    511a:	cb 01       	movw	r24, r22
    511c:	bc 01       	movw	r22, r24
    511e:	cd 01       	movw	r24, r26
    5120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	9c 8b       	std	Y+20, r25	; 0x14
    512a:	8b 8b       	std	Y+19, r24	; 0x13
    512c:	0f c0       	rjmp	.+30     	; 0x514c <enterUserData+0x210>
    512e:	88 ec       	ldi	r24, 0xC8	; 200
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	9a 8b       	std	Y+18, r25	; 0x12
    5134:	89 8b       	std	Y+17, r24	; 0x11
    5136:	89 89       	ldd	r24, Y+17	; 0x11
    5138:	9a 89       	ldd	r25, Y+18	; 0x12
    513a:	01 97       	sbiw	r24, 0x01	; 1
    513c:	f1 f7       	brne	.-4      	; 0x513a <enterUserData+0x1fe>
    513e:	9a 8b       	std	Y+18, r25	; 0x12
    5140:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5142:	8b 89       	ldd	r24, Y+19	; 0x13
    5144:	9c 89       	ldd	r25, Y+20	; 0x14
    5146:	01 97       	sbiw	r24, 0x01	; 1
    5148:	9c 8b       	std	Y+20, r25	; 0x14
    514a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    514c:	8b 89       	ldd	r24, Y+19	; 0x13
    514e:	9c 89       	ldd	r25, Y+20	; 0x14
    5150:	00 97       	sbiw	r24, 0x00	; 0
    5152:	69 f7       	brne	.-38     	; 0x512e <enterUserData+0x1f2>
    5154:	14 c0       	rjmp	.+40     	; 0x517e <enterUserData+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5156:	6d 89       	ldd	r22, Y+21	; 0x15
    5158:	7e 89       	ldd	r23, Y+22	; 0x16
    515a:	8f 89       	ldd	r24, Y+23	; 0x17
    515c:	98 8d       	ldd	r25, Y+24	; 0x18
    515e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5162:	dc 01       	movw	r26, r24
    5164:	cb 01       	movw	r24, r22
    5166:	9c 8b       	std	Y+20, r25	; 0x14
    5168:	8b 8b       	std	Y+19, r24	; 0x13
    516a:	8b 89       	ldd	r24, Y+19	; 0x13
    516c:	9c 89       	ldd	r25, Y+20	; 0x14
    516e:	98 8b       	std	Y+16, r25	; 0x10
    5170:	8f 87       	std	Y+15, r24	; 0x0f
    5172:	8f 85       	ldd	r24, Y+15	; 0x0f
    5174:	98 89       	ldd	r25, Y+16	; 0x10
    5176:	01 97       	sbiw	r24, 0x01	; 1
    5178:	f1 f7       	brne	.-4      	; 0x5176 <enterUserData+0x23a>
    517a:	98 8b       	std	Y+16, r25	; 0x10
    517c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1500);
		HLCD_voidSetCursorPosition(2,0);
    517e:	82 e0       	ldi	r24, 0x02	; 2
    5180:	60 e0       	ldi	r22, 0x00	; 0
    5182:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
		HLCD_voidSendString("    Try Again");
    5186:	84 ed       	ldi	r24, 0xD4	; 212
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
    518e:	80 e0       	ldi	r24, 0x00	; 0
    5190:	90 e8       	ldi	r25, 0x80	; 128
    5192:	ab eb       	ldi	r26, 0xBB	; 187
    5194:	b4 e4       	ldi	r27, 0x44	; 68
    5196:	8b 87       	std	Y+11, r24	; 0x0b
    5198:	9c 87       	std	Y+12, r25	; 0x0c
    519a:	ad 87       	std	Y+13, r26	; 0x0d
    519c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    519e:	6b 85       	ldd	r22, Y+11	; 0x0b
    51a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    51a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    51a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    51a6:	20 e0       	ldi	r18, 0x00	; 0
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	4a ef       	ldi	r20, 0xFA	; 250
    51ac:	54 e4       	ldi	r21, 0x44	; 68
    51ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51b2:	dc 01       	movw	r26, r24
    51b4:	cb 01       	movw	r24, r22
    51b6:	8f 83       	std	Y+7, r24	; 0x07
    51b8:	98 87       	std	Y+8, r25	; 0x08
    51ba:	a9 87       	std	Y+9, r26	; 0x09
    51bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51be:	6f 81       	ldd	r22, Y+7	; 0x07
    51c0:	78 85       	ldd	r23, Y+8	; 0x08
    51c2:	89 85       	ldd	r24, Y+9	; 0x09
    51c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	40 e8       	ldi	r20, 0x80	; 128
    51cc:	5f e3       	ldi	r21, 0x3F	; 63
    51ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51d2:	88 23       	and	r24, r24
    51d4:	2c f4       	brge	.+10     	; 0x51e0 <enterUserData+0x2a4>
		__ticks = 1;
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	9e 83       	std	Y+6, r25	; 0x06
    51dc:	8d 83       	std	Y+5, r24	; 0x05
    51de:	3f c0       	rjmp	.+126    	; 0x525e <enterUserData+0x322>
	else if (__tmp > 65535)
    51e0:	6f 81       	ldd	r22, Y+7	; 0x07
    51e2:	78 85       	ldd	r23, Y+8	; 0x08
    51e4:	89 85       	ldd	r24, Y+9	; 0x09
    51e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e8:	20 e0       	ldi	r18, 0x00	; 0
    51ea:	3f ef       	ldi	r19, 0xFF	; 255
    51ec:	4f e7       	ldi	r20, 0x7F	; 127
    51ee:	57 e4       	ldi	r21, 0x47	; 71
    51f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51f4:	18 16       	cp	r1, r24
    51f6:	4c f5       	brge	.+82     	; 0x524a <enterUserData+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    51fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    51fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    51fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	40 e2       	ldi	r20, 0x20	; 32
    5206:	51 e4       	ldi	r21, 0x41	; 65
    5208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    520c:	dc 01       	movw	r26, r24
    520e:	cb 01       	movw	r24, r22
    5210:	bc 01       	movw	r22, r24
    5212:	cd 01       	movw	r24, r26
    5214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5218:	dc 01       	movw	r26, r24
    521a:	cb 01       	movw	r24, r22
    521c:	9e 83       	std	Y+6, r25	; 0x06
    521e:	8d 83       	std	Y+5, r24	; 0x05
    5220:	0f c0       	rjmp	.+30     	; 0x5240 <enterUserData+0x304>
    5222:	88 ec       	ldi	r24, 0xC8	; 200
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	9c 83       	std	Y+4, r25	; 0x04
    5228:	8b 83       	std	Y+3, r24	; 0x03
    522a:	8b 81       	ldd	r24, Y+3	; 0x03
    522c:	9c 81       	ldd	r25, Y+4	; 0x04
    522e:	01 97       	sbiw	r24, 0x01	; 1
    5230:	f1 f7       	brne	.-4      	; 0x522e <enterUserData+0x2f2>
    5232:	9c 83       	std	Y+4, r25	; 0x04
    5234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5236:	8d 81       	ldd	r24, Y+5	; 0x05
    5238:	9e 81       	ldd	r25, Y+6	; 0x06
    523a:	01 97       	sbiw	r24, 0x01	; 1
    523c:	9e 83       	std	Y+6, r25	; 0x06
    523e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5240:	8d 81       	ldd	r24, Y+5	; 0x05
    5242:	9e 81       	ldd	r25, Y+6	; 0x06
    5244:	00 97       	sbiw	r24, 0x00	; 0
    5246:	69 f7       	brne	.-38     	; 0x5222 <enterUserData+0x2e6>
    5248:	14 c0       	rjmp	.+40     	; 0x5272 <enterUserData+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    524a:	6f 81       	ldd	r22, Y+7	; 0x07
    524c:	78 85       	ldd	r23, Y+8	; 0x08
    524e:	89 85       	ldd	r24, Y+9	; 0x09
    5250:	9a 85       	ldd	r25, Y+10	; 0x0a
    5252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5256:	dc 01       	movw	r26, r24
    5258:	cb 01       	movw	r24, r22
    525a:	9e 83       	std	Y+6, r25	; 0x06
    525c:	8d 83       	std	Y+5, r24	; 0x05
    525e:	8d 81       	ldd	r24, Y+5	; 0x05
    5260:	9e 81       	ldd	r25, Y+6	; 0x06
    5262:	9a 83       	std	Y+2, r25	; 0x02
    5264:	89 83       	std	Y+1, r24	; 0x01
    5266:	89 81       	ldd	r24, Y+1	; 0x01
    5268:	9a 81       	ldd	r25, Y+2	; 0x02
    526a:	01 97       	sbiw	r24, 0x01	; 1
    526c:	f1 f7       	brne	.-4      	; 0x526a <enterUserData+0x32e>
    526e:	9a 83       	std	Y+2, r25	; 0x02
    5270:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		tries++;
    5272:	80 91 4d 02 	lds	r24, 0x024D
    5276:	8f 5f       	subi	r24, 0xFF	; 255
    5278:	80 93 4d 02 	sts	0x024D, r24
		flag = 3;
    527c:	83 e0       	ldi	r24, 0x03	; 3
    527e:	80 93 4c 02 	sts	0x024C, r24
		if (tries == 3){
    5282:	80 91 4d 02 	lds	r24, 0x024D
    5286:	83 30       	cpi	r24, 0x03	; 3
    5288:	21 f4       	brne	.+8      	; 0x5292 <enterUserData+0x356>

			tries = 0;
    528a:	10 92 4d 02 	sts	0x024D, r1
			flag = 0;
    528e:	10 92 4c 02 	sts	0x024C, r1
		}
	}
}
    5292:	ae 96       	adiw	r28, 0x2e	; 46
    5294:	0f b6       	in	r0, 0x3f	; 63
    5296:	f8 94       	cli
    5298:	de bf       	out	0x3e, r29	; 62
    529a:	0f be       	out	0x3f, r0	; 63
    529c:	cd bf       	out	0x3d, r28	; 61
    529e:	cf 91       	pop	r28
    52a0:	df 91       	pop	r29
    52a2:	08 95       	ret

000052a4 <enterNewUserData>:

void enterNewUserData(){
    52a4:	df 93       	push	r29
    52a6:	cf 93       	push	r28
    52a8:	cd b7       	in	r28, 0x3d	; 61
    52aa:	de b7       	in	r29, 0x3e	; 62
    52ac:	6e 97       	sbiw	r28, 0x1e	; 30
    52ae:	0f b6       	in	r0, 0x3f	; 63
    52b0:	f8 94       	cli
    52b2:	de bf       	out	0x3e, r29	; 62
    52b4:	0f be       	out	0x3f, r0	; 63
    52b6:	cd bf       	out	0x3d, r28	; 61
	nameAndPassScreen();
    52b8:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <nameAndPassScreen>
	u8* nameAndPass = (u8*)"NAMEPASS" ;
    52bc:	8d ea       	ldi	r24, 0xAD	; 173
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	9e 8f       	std	Y+30, r25	; 0x1e
    52c2:	8d 8f       	std	Y+29, r24	; 0x1d
	gettingNameAndPass(nameAndPass);
    52c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52c8:	0e 94 41 27 	call	0x4e82	; 0x4e82 <gettingNameAndPass>

	EEPROM_voidWriteString(nameAndPass,8,0x50,0x00);
    52cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52d0:	68 e0       	ldi	r22, 0x08	; 8
    52d2:	40 e5       	ldi	r20, 0x50	; 80
    52d4:	20 e0       	ldi	r18, 0x00	; 0
    52d6:	0e 94 b9 07 	call	0xf72	; 0xf72 <EEPROM_voidWriteString>

	HLCD_voidClearDisplay();
    52da:	0e 94 60 18 	call	0x30c0	; 0x30c0 <HLCD_voidClearDisplay>

	HLCD_voidSendString("  Done Entring  ");
    52de:	82 ee       	ldi	r24, 0xE2	; 226
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
    52e6:	80 e0       	ldi	r24, 0x00	; 0
    52e8:	90 e8       	ldi	r25, 0x80	; 128
    52ea:	ab eb       	ldi	r26, 0xBB	; 187
    52ec:	b4 e4       	ldi	r27, 0x44	; 68
    52ee:	89 8f       	std	Y+25, r24	; 0x19
    52f0:	9a 8f       	std	Y+26, r25	; 0x1a
    52f2:	ab 8f       	std	Y+27, r26	; 0x1b
    52f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52f6:	69 8d       	ldd	r22, Y+25	; 0x19
    52f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52fe:	20 e0       	ldi	r18, 0x00	; 0
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	4a ef       	ldi	r20, 0xFA	; 250
    5304:	54 e4       	ldi	r21, 0x44	; 68
    5306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    530a:	dc 01       	movw	r26, r24
    530c:	cb 01       	movw	r24, r22
    530e:	8d 8b       	std	Y+21, r24	; 0x15
    5310:	9e 8b       	std	Y+22, r25	; 0x16
    5312:	af 8b       	std	Y+23, r26	; 0x17
    5314:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5316:	6d 89       	ldd	r22, Y+21	; 0x15
    5318:	7e 89       	ldd	r23, Y+22	; 0x16
    531a:	8f 89       	ldd	r24, Y+23	; 0x17
    531c:	98 8d       	ldd	r25, Y+24	; 0x18
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	40 e8       	ldi	r20, 0x80	; 128
    5324:	5f e3       	ldi	r21, 0x3F	; 63
    5326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    532a:	88 23       	and	r24, r24
    532c:	2c f4       	brge	.+10     	; 0x5338 <enterNewUserData+0x94>
		__ticks = 1;
    532e:	81 e0       	ldi	r24, 0x01	; 1
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	9c 8b       	std	Y+20, r25	; 0x14
    5334:	8b 8b       	std	Y+19, r24	; 0x13
    5336:	3f c0       	rjmp	.+126    	; 0x53b6 <enterNewUserData+0x112>
	else if (__tmp > 65535)
    5338:	6d 89       	ldd	r22, Y+21	; 0x15
    533a:	7e 89       	ldd	r23, Y+22	; 0x16
    533c:	8f 89       	ldd	r24, Y+23	; 0x17
    533e:	98 8d       	ldd	r25, Y+24	; 0x18
    5340:	20 e0       	ldi	r18, 0x00	; 0
    5342:	3f ef       	ldi	r19, 0xFF	; 255
    5344:	4f e7       	ldi	r20, 0x7F	; 127
    5346:	57 e4       	ldi	r21, 0x47	; 71
    5348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    534c:	18 16       	cp	r1, r24
    534e:	4c f5       	brge	.+82     	; 0x53a2 <enterNewUserData+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5350:	69 8d       	ldd	r22, Y+25	; 0x19
    5352:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5354:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5356:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5358:	20 e0       	ldi	r18, 0x00	; 0
    535a:	30 e0       	ldi	r19, 0x00	; 0
    535c:	40 e2       	ldi	r20, 0x20	; 32
    535e:	51 e4       	ldi	r21, 0x41	; 65
    5360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5364:	dc 01       	movw	r26, r24
    5366:	cb 01       	movw	r24, r22
    5368:	bc 01       	movw	r22, r24
    536a:	cd 01       	movw	r24, r26
    536c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5370:	dc 01       	movw	r26, r24
    5372:	cb 01       	movw	r24, r22
    5374:	9c 8b       	std	Y+20, r25	; 0x14
    5376:	8b 8b       	std	Y+19, r24	; 0x13
    5378:	0f c0       	rjmp	.+30     	; 0x5398 <enterNewUserData+0xf4>
    537a:	88 ec       	ldi	r24, 0xC8	; 200
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	9a 8b       	std	Y+18, r25	; 0x12
    5380:	89 8b       	std	Y+17, r24	; 0x11
    5382:	89 89       	ldd	r24, Y+17	; 0x11
    5384:	9a 89       	ldd	r25, Y+18	; 0x12
    5386:	01 97       	sbiw	r24, 0x01	; 1
    5388:	f1 f7       	brne	.-4      	; 0x5386 <enterNewUserData+0xe2>
    538a:	9a 8b       	std	Y+18, r25	; 0x12
    538c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    538e:	8b 89       	ldd	r24, Y+19	; 0x13
    5390:	9c 89       	ldd	r25, Y+20	; 0x14
    5392:	01 97       	sbiw	r24, 0x01	; 1
    5394:	9c 8b       	std	Y+20, r25	; 0x14
    5396:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5398:	8b 89       	ldd	r24, Y+19	; 0x13
    539a:	9c 89       	ldd	r25, Y+20	; 0x14
    539c:	00 97       	sbiw	r24, 0x00	; 0
    539e:	69 f7       	brne	.-38     	; 0x537a <enterNewUserData+0xd6>
    53a0:	14 c0       	rjmp	.+40     	; 0x53ca <enterNewUserData+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53a2:	6d 89       	ldd	r22, Y+21	; 0x15
    53a4:	7e 89       	ldd	r23, Y+22	; 0x16
    53a6:	8f 89       	ldd	r24, Y+23	; 0x17
    53a8:	98 8d       	ldd	r25, Y+24	; 0x18
    53aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ae:	dc 01       	movw	r26, r24
    53b0:	cb 01       	movw	r24, r22
    53b2:	9c 8b       	std	Y+20, r25	; 0x14
    53b4:	8b 8b       	std	Y+19, r24	; 0x13
    53b6:	8b 89       	ldd	r24, Y+19	; 0x13
    53b8:	9c 89       	ldd	r25, Y+20	; 0x14
    53ba:	98 8b       	std	Y+16, r25	; 0x10
    53bc:	8f 87       	std	Y+15, r24	; 0x0f
    53be:	8f 85       	ldd	r24, Y+15	; 0x0f
    53c0:	98 89       	ldd	r25, Y+16	; 0x10
    53c2:	01 97       	sbiw	r24, 0x01	; 1
    53c4:	f1 f7       	brne	.-4      	; 0x53c2 <enterNewUserData+0x11e>
    53c6:	98 8b       	std	Y+16, r25	; 0x10
    53c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1500);
	HLCD_voidSetCursorPosition(0,0);
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	60 e0       	ldi	r22, 0x00	; 0
    53ce:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
	HLCD_voidSendString("   now enter    ");
    53d2:	83 ef       	ldi	r24, 0xF3	; 243
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
	HLCD_voidSetCursorPosition(2,0);
    53da:	82 e0       	ldi	r24, 0x02	; 2
    53dc:	60 e0       	ldi	r22, 0x00	; 0
    53de:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
	HLCD_voidSendString(" Name and Pass  ");
    53e2:	84 e0       	ldi	r24, 0x04	; 4
    53e4:	91 e0       	ldi	r25, 0x01	; 1
    53e6:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
    53ea:	80 e0       	ldi	r24, 0x00	; 0
    53ec:	90 e8       	ldi	r25, 0x80	; 128
    53ee:	ab eb       	ldi	r26, 0xBB	; 187
    53f0:	b4 e4       	ldi	r27, 0x44	; 68
    53f2:	8b 87       	std	Y+11, r24	; 0x0b
    53f4:	9c 87       	std	Y+12, r25	; 0x0c
    53f6:	ad 87       	std	Y+13, r26	; 0x0d
    53f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    53fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    53fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5400:	9e 85       	ldd	r25, Y+14	; 0x0e
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	4a ef       	ldi	r20, 0xFA	; 250
    5408:	54 e4       	ldi	r21, 0x44	; 68
    540a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	8f 83       	std	Y+7, r24	; 0x07
    5414:	98 87       	std	Y+8, r25	; 0x08
    5416:	a9 87       	std	Y+9, r26	; 0x09
    5418:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    541a:	6f 81       	ldd	r22, Y+7	; 0x07
    541c:	78 85       	ldd	r23, Y+8	; 0x08
    541e:	89 85       	ldd	r24, Y+9	; 0x09
    5420:	9a 85       	ldd	r25, Y+10	; 0x0a
    5422:	20 e0       	ldi	r18, 0x00	; 0
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	40 e8       	ldi	r20, 0x80	; 128
    5428:	5f e3       	ldi	r21, 0x3F	; 63
    542a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    542e:	88 23       	and	r24, r24
    5430:	2c f4       	brge	.+10     	; 0x543c <enterNewUserData+0x198>
		__ticks = 1;
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	9e 83       	std	Y+6, r25	; 0x06
    5438:	8d 83       	std	Y+5, r24	; 0x05
    543a:	3f c0       	rjmp	.+126    	; 0x54ba <enterNewUserData+0x216>
	else if (__tmp > 65535)
    543c:	6f 81       	ldd	r22, Y+7	; 0x07
    543e:	78 85       	ldd	r23, Y+8	; 0x08
    5440:	89 85       	ldd	r24, Y+9	; 0x09
    5442:	9a 85       	ldd	r25, Y+10	; 0x0a
    5444:	20 e0       	ldi	r18, 0x00	; 0
    5446:	3f ef       	ldi	r19, 0xFF	; 255
    5448:	4f e7       	ldi	r20, 0x7F	; 127
    544a:	57 e4       	ldi	r21, 0x47	; 71
    544c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5450:	18 16       	cp	r1, r24
    5452:	4c f5       	brge	.+82     	; 0x54a6 <enterNewUserData+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5454:	6b 85       	ldd	r22, Y+11	; 0x0b
    5456:	7c 85       	ldd	r23, Y+12	; 0x0c
    5458:	8d 85       	ldd	r24, Y+13	; 0x0d
    545a:	9e 85       	ldd	r25, Y+14	; 0x0e
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	40 e2       	ldi	r20, 0x20	; 32
    5462:	51 e4       	ldi	r21, 0x41	; 65
    5464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
    546c:	bc 01       	movw	r22, r24
    546e:	cd 01       	movw	r24, r26
    5470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5474:	dc 01       	movw	r26, r24
    5476:	cb 01       	movw	r24, r22
    5478:	9e 83       	std	Y+6, r25	; 0x06
    547a:	8d 83       	std	Y+5, r24	; 0x05
    547c:	0f c0       	rjmp	.+30     	; 0x549c <enterNewUserData+0x1f8>
    547e:	88 ec       	ldi	r24, 0xC8	; 200
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	9c 83       	std	Y+4, r25	; 0x04
    5484:	8b 83       	std	Y+3, r24	; 0x03
    5486:	8b 81       	ldd	r24, Y+3	; 0x03
    5488:	9c 81       	ldd	r25, Y+4	; 0x04
    548a:	01 97       	sbiw	r24, 0x01	; 1
    548c:	f1 f7       	brne	.-4      	; 0x548a <enterNewUserData+0x1e6>
    548e:	9c 83       	std	Y+4, r25	; 0x04
    5490:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5492:	8d 81       	ldd	r24, Y+5	; 0x05
    5494:	9e 81       	ldd	r25, Y+6	; 0x06
    5496:	01 97       	sbiw	r24, 0x01	; 1
    5498:	9e 83       	std	Y+6, r25	; 0x06
    549a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    549c:	8d 81       	ldd	r24, Y+5	; 0x05
    549e:	9e 81       	ldd	r25, Y+6	; 0x06
    54a0:	00 97       	sbiw	r24, 0x00	; 0
    54a2:	69 f7       	brne	.-38     	; 0x547e <enterNewUserData+0x1da>
    54a4:	14 c0       	rjmp	.+40     	; 0x54ce <enterNewUserData+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54a6:	6f 81       	ldd	r22, Y+7	; 0x07
    54a8:	78 85       	ldd	r23, Y+8	; 0x08
    54aa:	89 85       	ldd	r24, Y+9	; 0x09
    54ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    54ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54b2:	dc 01       	movw	r26, r24
    54b4:	cb 01       	movw	r24, r22
    54b6:	9e 83       	std	Y+6, r25	; 0x06
    54b8:	8d 83       	std	Y+5, r24	; 0x05
    54ba:	8d 81       	ldd	r24, Y+5	; 0x05
    54bc:	9e 81       	ldd	r25, Y+6	; 0x06
    54be:	9a 83       	std	Y+2, r25	; 0x02
    54c0:	89 83       	std	Y+1, r24	; 0x01
    54c2:	89 81       	ldd	r24, Y+1	; 0x01
    54c4:	9a 81       	ldd	r25, Y+2	; 0x02
    54c6:	01 97       	sbiw	r24, 0x01	; 1
    54c8:	f1 f7       	brne	.-4      	; 0x54c6 <enterNewUserData+0x222>
    54ca:	9a 83       	std	Y+2, r25	; 0x02
    54cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	enterUserData();
    54ce:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <enterUserData>

	//	HLCD_voidSetCursorPosition(2,0);
	//	HLCD_voidSendString((s8*)nameAndPass);
}
    54d2:	6e 96       	adiw	r28, 0x1e	; 30
    54d4:	0f b6       	in	r0, 0x3f	; 63
    54d6:	f8 94       	cli
    54d8:	de bf       	out	0x3e, r29	; 62
    54da:	0f be       	out	0x3f, r0	; 63
    54dc:	cd bf       	out	0x3d, r28	; 61
    54de:	cf 91       	pop	r28
    54e0:	df 91       	pop	r29
    54e2:	08 95       	ret

000054e4 <displayLightAndTemp>:

void displayLightAndTemp(){
    54e4:	df 93       	push	r29
    54e6:	cf 93       	push	r28
    54e8:	cd b7       	in	r28, 0x3d	; 61
    54ea:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidClearDisplay();
    54ec:	0e 94 60 18 	call	0x30c0	; 0x30c0 <HLCD_voidClearDisplay>
	HLCD_voidSendString("Temprature:");
    54f0:	85 e1       	ldi	r24, 0x15	; 21
    54f2:	91 e0       	ldi	r25, 0x01	; 1
    54f4:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
	HLCD_voidSendInt(currentTemprature%100);
    54f8:	80 91 4b 02 	lds	r24, 0x024B
    54fc:	94 e6       	ldi	r25, 0x64	; 100
    54fe:	69 2f       	mov	r22, r25
    5500:	0e 94 03 2b 	call	0x5606	; 0x5606 <__udivmodqi4>
    5504:	89 2f       	mov	r24, r25
    5506:	88 2f       	mov	r24, r24
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	a0 e0       	ldi	r26, 0x00	; 0
    550c:	b0 e0       	ldi	r27, 0x00	; 0
    550e:	bc 01       	movw	r22, r24
    5510:	cd 01       	movw	r24, r26
    5512:	0e 94 3b 18 	call	0x3076	; 0x3076 <HLCD_voidSendInt>

	HLCD_voidSetCursorPosition(2,0);
    5516:	82 e0       	ldi	r24, 0x02	; 2
    5518:	60 e0       	ldi	r22, 0x00	; 0
    551a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
	HLCD_voidSendString("Lumen:");
    551e:	81 e2       	ldi	r24, 0x21	; 33
    5520:	91 e0       	ldi	r25, 0x01	; 1
    5522:	0e 94 10 18 	call	0x3020	; 0x3020 <HLCD_voidSendString>
	HLCD_voidSendInt(currentLux);
    5526:	80 91 48 02 	lds	r24, 0x0248
    552a:	90 91 49 02 	lds	r25, 0x0249
    552e:	cc 01       	movw	r24, r24
    5530:	a0 e0       	ldi	r26, 0x00	; 0
    5532:	b0 e0       	ldi	r27, 0x00	; 0
    5534:	bc 01       	movw	r22, r24
    5536:	cd 01       	movw	r24, r26
    5538:	0e 94 3b 18 	call	0x3076	; 0x3076 <HLCD_voidSendInt>

}
    553c:	cf 91       	pop	r28
    553e:	df 91       	pop	r29
    5540:	08 95       	ret

00005542 <getDataFromBluetooth>:

void getDataFromBluetooth(){
    5542:	df 93       	push	r29
    5544:	cf 93       	push	r28
    5546:	cd b7       	in	r28, 0x3d	; 61
    5548:	de b7       	in	r29, 0x3e	; 62
	bluetoothOrder = MUART_u8ReciveByte();
    554a:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <MUART_u8ReciveByte>
    554e:	80 93 30 02 	sts	0x0230, r24
	HLCD_voidSetCursorPosition(2,13);
    5552:	82 e0       	ldi	r24, 0x02	; 2
    5554:	6d e0       	ldi	r22, 0x0D	; 13
    5556:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HLCD_voidSetCursorPosition>
	HLCD_voidSendInt(bluetoothOrder);
    555a:	80 91 30 02 	lds	r24, 0x0230
    555e:	88 2f       	mov	r24, r24
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	a0 e0       	ldi	r26, 0x00	; 0
    5564:	b0 e0       	ldi	r27, 0x00	; 0
    5566:	bc 01       	movw	r22, r24
    5568:	cd 01       	movw	r24, r26
    556a:	0e 94 3b 18 	call	0x3076	; 0x3076 <HLCD_voidSendInt>
}
    556e:	cf 91       	pop	r28
    5570:	df 91       	pop	r29
    5572:	08 95       	ret

00005574 <IsRecivedFromBluetooth>:

u8 IsRecivedFromBluetooth(){
    5574:	df 93       	push	r29
    5576:	cf 93       	push	r28
    5578:	0f 92       	push	r0
    557a:	cd b7       	in	r28, 0x3d	; 61
    557c:	de b7       	in	r29, 0x3e	; 62
	u8 data = MUART_u8IsRecivedData();
    557e:	0e 94 df 24 	call	0x49be	; 0x49be <MUART_u8IsRecivedData>
    5582:	89 83       	std	Y+1, r24	; 0x01
	return data;
    5584:	89 81       	ldd	r24, Y+1	; 0x01
}
    5586:	0f 90       	pop	r0
    5588:	cf 91       	pop	r28
    558a:	df 91       	pop	r29
    558c:	08 95       	ret

0000558e <sendTempToSlave>:

void sendTempToSlave(){
    558e:	df 93       	push	r29
    5590:	cf 93       	push	r28
    5592:	cd b7       	in	r28, 0x3d	; 61
    5594:	de b7       	in	r29, 0x3e	; 62
	MSPI_u8TransciveByte(currentTemprature%151);
    5596:	80 91 4b 02 	lds	r24, 0x024B
    559a:	97 e9       	ldi	r25, 0x97	; 151
    559c:	69 2f       	mov	r22, r25
    559e:	0e 94 03 2b 	call	0x5606	; 0x5606 <__udivmodqi4>
    55a2:	89 2f       	mov	r24, r25
    55a4:	0e 94 27 20 	call	0x404e	; 0x404e <MSPI_u8TransciveByte>
}
    55a8:	cf 91       	pop	r28
    55aa:	df 91       	pop	r29
    55ac:	08 95       	ret

000055ae <sendFanOrderToSlave>:

void sendFanOrderToSlave(){
    55ae:	df 93       	push	r29
    55b0:	cf 93       	push	r28
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
	MSPI_u8TransciveByte(slaveFanOrder);
    55b6:	80 91 31 02 	lds	r24, 0x0231
    55ba:	0e 94 27 20 	call	0x404e	; 0x404e <MSPI_u8TransciveByte>
}
    55be:	cf 91       	pop	r28
    55c0:	df 91       	pop	r29
    55c2:	08 95       	ret

000055c4 <sendLightOrderToSlave>:

void sendLightOrderToSlave(){
    55c4:	df 93       	push	r29
    55c6:	cf 93       	push	r28
    55c8:	cd b7       	in	r28, 0x3d	; 61
    55ca:	de b7       	in	r29, 0x3e	; 62
	MSPI_u8TransciveByte(slaveLightOrder);
    55cc:	80 91 32 02 	lds	r24, 0x0232
    55d0:	0e 94 27 20 	call	0x404e	; 0x404e <MSPI_u8TransciveByte>
}
    55d4:	cf 91       	pop	r28
    55d6:	df 91       	pop	r29
    55d8:	08 95       	ret

000055da <sendDoorOrderToSlave>:

void sendDoorOrderToSlave(){
    55da:	df 93       	push	r29
    55dc:	cf 93       	push	r28
    55de:	cd b7       	in	r28, 0x3d	; 61
    55e0:	de b7       	in	r29, 0x3e	; 62
	MSPI_u8TransciveByte(slaveDoorOrder);
    55e2:	80 91 33 02 	lds	r24, 0x0233
    55e6:	0e 94 27 20 	call	0x404e	; 0x404e <MSPI_u8TransciveByte>
}
    55ea:	cf 91       	pop	r28
    55ec:	df 91       	pop	r29
    55ee:	08 95       	ret

000055f0 <sendGarageOrderToSlave>:
void sendGarageOrderToSlave(){
    55f0:	df 93       	push	r29
    55f2:	cf 93       	push	r28
    55f4:	cd b7       	in	r28, 0x3d	; 61
    55f6:	de b7       	in	r29, 0x3e	; 62
	MSPI_u8TransciveByte(slaveGarageOrder);
    55f8:	80 91 34 02 	lds	r24, 0x0234
    55fc:	0e 94 27 20 	call	0x404e	; 0x404e <MSPI_u8TransciveByte>
}
    5600:	cf 91       	pop	r28
    5602:	df 91       	pop	r29
    5604:	08 95       	ret

00005606 <__udivmodqi4>:
    5606:	99 1b       	sub	r25, r25
    5608:	79 e0       	ldi	r23, 0x09	; 9
    560a:	04 c0       	rjmp	.+8      	; 0x5614 <__udivmodqi4_ep>

0000560c <__udivmodqi4_loop>:
    560c:	99 1f       	adc	r25, r25
    560e:	96 17       	cp	r25, r22
    5610:	08 f0       	brcs	.+2      	; 0x5614 <__udivmodqi4_ep>
    5612:	96 1b       	sub	r25, r22

00005614 <__udivmodqi4_ep>:
    5614:	88 1f       	adc	r24, r24
    5616:	7a 95       	dec	r23
    5618:	c9 f7       	brne	.-14     	; 0x560c <__udivmodqi4_loop>
    561a:	80 95       	com	r24
    561c:	08 95       	ret

0000561e <__prologue_saves__>:
    561e:	2f 92       	push	r2
    5620:	3f 92       	push	r3
    5622:	4f 92       	push	r4
    5624:	5f 92       	push	r5
    5626:	6f 92       	push	r6
    5628:	7f 92       	push	r7
    562a:	8f 92       	push	r8
    562c:	9f 92       	push	r9
    562e:	af 92       	push	r10
    5630:	bf 92       	push	r11
    5632:	cf 92       	push	r12
    5634:	df 92       	push	r13
    5636:	ef 92       	push	r14
    5638:	ff 92       	push	r15
    563a:	0f 93       	push	r16
    563c:	1f 93       	push	r17
    563e:	cf 93       	push	r28
    5640:	df 93       	push	r29
    5642:	cd b7       	in	r28, 0x3d	; 61
    5644:	de b7       	in	r29, 0x3e	; 62
    5646:	ca 1b       	sub	r28, r26
    5648:	db 0b       	sbc	r29, r27
    564a:	0f b6       	in	r0, 0x3f	; 63
    564c:	f8 94       	cli
    564e:	de bf       	out	0x3e, r29	; 62
    5650:	0f be       	out	0x3f, r0	; 63
    5652:	cd bf       	out	0x3d, r28	; 61
    5654:	09 94       	ijmp

00005656 <__epilogue_restores__>:
    5656:	2a 88       	ldd	r2, Y+18	; 0x12
    5658:	39 88       	ldd	r3, Y+17	; 0x11
    565a:	48 88       	ldd	r4, Y+16	; 0x10
    565c:	5f 84       	ldd	r5, Y+15	; 0x0f
    565e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5660:	7d 84       	ldd	r7, Y+13	; 0x0d
    5662:	8c 84       	ldd	r8, Y+12	; 0x0c
    5664:	9b 84       	ldd	r9, Y+11	; 0x0b
    5666:	aa 84       	ldd	r10, Y+10	; 0x0a
    5668:	b9 84       	ldd	r11, Y+9	; 0x09
    566a:	c8 84       	ldd	r12, Y+8	; 0x08
    566c:	df 80       	ldd	r13, Y+7	; 0x07
    566e:	ee 80       	ldd	r14, Y+6	; 0x06
    5670:	fd 80       	ldd	r15, Y+5	; 0x05
    5672:	0c 81       	ldd	r16, Y+4	; 0x04
    5674:	1b 81       	ldd	r17, Y+3	; 0x03
    5676:	aa 81       	ldd	r26, Y+2	; 0x02
    5678:	b9 81       	ldd	r27, Y+1	; 0x01
    567a:	ce 0f       	add	r28, r30
    567c:	d1 1d       	adc	r29, r1
    567e:	0f b6       	in	r0, 0x3f	; 63
    5680:	f8 94       	cli
    5682:	de bf       	out	0x3e, r29	; 62
    5684:	0f be       	out	0x3f, r0	; 63
    5686:	cd bf       	out	0x3d, r28	; 61
    5688:	ed 01       	movw	r28, r26
    568a:	08 95       	ret

0000568c <itoa>:
    568c:	fb 01       	movw	r30, r22
    568e:	9f 01       	movw	r18, r30
    5690:	e8 94       	clt
    5692:	42 30       	cpi	r20, 0x02	; 2
    5694:	c4 f0       	brlt	.+48     	; 0x56c6 <itoa+0x3a>
    5696:	45 32       	cpi	r20, 0x25	; 37
    5698:	b4 f4       	brge	.+44     	; 0x56c6 <itoa+0x3a>
    569a:	4a 30       	cpi	r20, 0x0A	; 10
    569c:	29 f4       	brne	.+10     	; 0x56a8 <itoa+0x1c>
    569e:	97 fb       	bst	r25, 7
    56a0:	1e f4       	brtc	.+6      	; 0x56a8 <itoa+0x1c>
    56a2:	90 95       	com	r25
    56a4:	81 95       	neg	r24
    56a6:	9f 4f       	sbci	r25, 0xFF	; 255
    56a8:	64 2f       	mov	r22, r20
    56aa:	77 27       	eor	r23, r23
    56ac:	0e 94 77 2b 	call	0x56ee	; 0x56ee <__udivmodhi4>
    56b0:	80 5d       	subi	r24, 0xD0	; 208
    56b2:	8a 33       	cpi	r24, 0x3A	; 58
    56b4:	0c f0       	brlt	.+2      	; 0x56b8 <itoa+0x2c>
    56b6:	89 5d       	subi	r24, 0xD9	; 217
    56b8:	81 93       	st	Z+, r24
    56ba:	cb 01       	movw	r24, r22
    56bc:	00 97       	sbiw	r24, 0x00	; 0
    56be:	a1 f7       	brne	.-24     	; 0x56a8 <itoa+0x1c>
    56c0:	16 f4       	brtc	.+4      	; 0x56c6 <itoa+0x3a>
    56c2:	5d e2       	ldi	r21, 0x2D	; 45
    56c4:	51 93       	st	Z+, r21
    56c6:	10 82       	st	Z, r1
    56c8:	c9 01       	movw	r24, r18
    56ca:	0c 94 67 2b 	jmp	0x56ce	; 0x56ce <strrev>

000056ce <strrev>:
    56ce:	dc 01       	movw	r26, r24
    56d0:	fc 01       	movw	r30, r24
    56d2:	67 2f       	mov	r22, r23
    56d4:	71 91       	ld	r23, Z+
    56d6:	77 23       	and	r23, r23
    56d8:	e1 f7       	brne	.-8      	; 0x56d2 <strrev+0x4>
    56da:	32 97       	sbiw	r30, 0x02	; 2
    56dc:	04 c0       	rjmp	.+8      	; 0x56e6 <strrev+0x18>
    56de:	7c 91       	ld	r23, X
    56e0:	6d 93       	st	X+, r22
    56e2:	70 83       	st	Z, r23
    56e4:	62 91       	ld	r22, -Z
    56e6:	ae 17       	cp	r26, r30
    56e8:	bf 07       	cpc	r27, r31
    56ea:	c8 f3       	brcs	.-14     	; 0x56de <strrev+0x10>
    56ec:	08 95       	ret

000056ee <__udivmodhi4>:
    56ee:	aa 1b       	sub	r26, r26
    56f0:	bb 1b       	sub	r27, r27
    56f2:	51 e1       	ldi	r21, 0x11	; 17
    56f4:	07 c0       	rjmp	.+14     	; 0x5704 <__udivmodhi4_ep>

000056f6 <__udivmodhi4_loop>:
    56f6:	aa 1f       	adc	r26, r26
    56f8:	bb 1f       	adc	r27, r27
    56fa:	a6 17       	cp	r26, r22
    56fc:	b7 07       	cpc	r27, r23
    56fe:	10 f0       	brcs	.+4      	; 0x5704 <__udivmodhi4_ep>
    5700:	a6 1b       	sub	r26, r22
    5702:	b7 0b       	sbc	r27, r23

00005704 <__udivmodhi4_ep>:
    5704:	88 1f       	adc	r24, r24
    5706:	99 1f       	adc	r25, r25
    5708:	5a 95       	dec	r21
    570a:	a9 f7       	brne	.-22     	; 0x56f6 <__udivmodhi4_loop>
    570c:	80 95       	com	r24
    570e:	90 95       	com	r25
    5710:	bc 01       	movw	r22, r24
    5712:	cd 01       	movw	r24, r26
    5714:	08 95       	ret

00005716 <_exit>:
    5716:	f8 94       	cli

00005718 <__stop_program>:
    5718:	ff cf       	rjmp	.-2      	; 0x5718 <__stop_program>
