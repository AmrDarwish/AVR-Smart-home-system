
0033_Smart_Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00003e4c  00003ee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800174  00800174  00003ff4  2**0
                  ALLOC
  3 .stab         00003618  00000000  00000000  00003ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001524  00000000  00000000  0000760c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00008b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000257  00000000  00000000  00008d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000028a2  00000000  00000000  00008f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000165a  00000000  00000000  0000b829  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014c9  00000000  00000000  0000ce83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000e34c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000361  00000000  00000000  0000e56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ba6  00000000  00000000  0000e8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__vector_11>
      30:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <main>
      8a:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 9d 04 	call	0x93a	; 0x93a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__subsf3>
      be:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixunssfdi>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__prologue_saves__>
      f6:	7b 01       	movw	r14, r22
      f8:	8c 01       	movw	r16, r24
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	40 e8       	ldi	r20, 0x80	; 128
     100:	5f e3       	ldi	r21, 0x3F	; 63
     102:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
     106:	88 23       	and	r24, r24
     108:	4c f4       	brge	.+18     	; 0x11c <__fixunssfdi+0x32>
     10a:	aa 24       	eor	r10, r10
     10c:	bb 24       	eor	r11, r11
     10e:	cc 24       	eor	r12, r12
     110:	dd 24       	eor	r13, r13
     112:	ee 24       	eor	r14, r14
     114:	ff 24       	eor	r15, r15
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	86 c0       	rjmp	.+268    	; 0x228 <__fixunssfdi+0x13e>
     11c:	c8 01       	movw	r24, r16
     11e:	b7 01       	movw	r22, r14
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e8       	ldi	r20, 0x80	; 128
     126:	5f e4       	ldi	r21, 0x4F	; 79
     128:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
     12c:	88 23       	and	r24, r24
     12e:	54 f4       	brge	.+20     	; 0x144 <__fixunssfdi+0x5a>
     130:	c8 01       	movw	r24, r16
     132:	b7 01       	movw	r22, r14
     134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     138:	5b 01       	movw	r10, r22
     13a:	6c 01       	movw	r12, r24
     13c:	ee 24       	eor	r14, r14
     13e:	ff 24       	eor	r15, r15
     140:	87 01       	movw	r16, r14
     142:	72 c0       	rjmp	.+228    	; 0x228 <__fixunssfdi+0x13e>
     144:	c8 01       	movw	r24, r16
     146:	b7 01       	movw	r22, r14
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e8       	ldi	r20, 0x80	; 128
     14e:	5f e5       	ldi	r21, 0x5F	; 95
     150:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
     154:	87 fd       	sbrc	r24, 7
     156:	0f c0       	rjmp	.+30     	; 0x176 <__fixunssfdi+0x8c>
     158:	aa 24       	eor	r10, r10
     15a:	aa 94       	dec	r10
     15c:	bb 24       	eor	r11, r11
     15e:	ba 94       	dec	r11
     160:	cc 24       	eor	r12, r12
     162:	ca 94       	dec	r12
     164:	dd 24       	eor	r13, r13
     166:	da 94       	dec	r13
     168:	ee 24       	eor	r14, r14
     16a:	ea 94       	dec	r14
     16c:	ff 24       	eor	r15, r15
     16e:	fa 94       	dec	r15
     170:	0f ef       	ldi	r16, 0xFF	; 255
     172:	1f ef       	ldi	r17, 0xFF	; 255
     174:	59 c0       	rjmp	.+178    	; 0x228 <__fixunssfdi+0x13e>
     176:	c8 01       	movw	r24, r16
     178:	b7 01       	movw	r22, r14
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 e8       	ldi	r20, 0x80	; 128
     180:	5f e2       	ldi	r21, 0x2F	; 47
     182:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
     186:	7b 01       	movw	r14, r22
     188:	8c 01       	movw	r16, r24
     18a:	22 24       	eor	r2, r2
     18c:	33 24       	eor	r3, r3
     18e:	21 01       	movw	r4, r2
     190:	90 e1       	ldi	r25, 0x10	; 16
     192:	a9 2e       	mov	r10, r25
     194:	b1 2c       	mov	r11, r1
     196:	c1 2c       	mov	r12, r1
     198:	d1 2c       	mov	r13, r1
     19a:	c0 e0       	ldi	r28, 0x00	; 0
     19c:	d0 e0       	ldi	r29, 0x00	; 0
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0a 2c       	mov	r0, r10
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__fixunssfdi+0xc8>
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	88 1f       	adc	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	0a 94       	dec	r0
     1b4:	d2 f7       	brpl	.-12     	; 0x1aa <__fixunssfdi+0xc0>
     1b6:	0e 94 af 05 	call	0xb5e	; 0xb5e <__floatunsisf>
     1ba:	3b 01       	movw	r6, r22
     1bc:	4c 01       	movw	r8, r24
     1be:	c8 01       	movw	r24, r16
     1c0:	b7 01       	movw	r22, r14
     1c2:	a4 01       	movw	r20, r8
     1c4:	93 01       	movw	r18, r6
     1c6:	0e 94 9d 04 	call	0x93a	; 0x93a <__gesf2>
     1ca:	88 23       	and	r24, r24
     1cc:	64 f0       	brlt	.+24     	; 0x1e6 <__fixunssfdi+0xfc>
     1ce:	2a 28       	or	r2, r10
     1d0:	3b 28       	or	r3, r11
     1d2:	4c 28       	or	r4, r12
     1d4:	5d 28       	or	r5, r13
     1d6:	c8 01       	movw	r24, r16
     1d8:	b7 01       	movw	r22, r14
     1da:	a4 01       	movw	r20, r8
     1dc:	93 01       	movw	r18, r6
     1de:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
     1e2:	7b 01       	movw	r14, r22
     1e4:	8c 01       	movw	r16, r24
     1e6:	d6 94       	lsr	r13
     1e8:	c7 94       	ror	r12
     1ea:	b7 94       	ror	r11
     1ec:	a7 94       	ror	r10
     1ee:	21 96       	adiw	r28, 0x01	; 1
     1f0:	c5 30       	cpi	r28, 0x05	; 5
     1f2:	d1 05       	cpc	r29, r1
     1f4:	a1 f6       	brne	.-88     	; 0x19e <__fixunssfdi+0xb4>
     1f6:	c8 01       	movw	r24, r16
     1f8:	b7 01       	movw	r22, r14
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e8       	ldi	r20, 0x80	; 128
     200:	5f e4       	ldi	r21, 0x4F	; 79
     202:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
     206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     20a:	5b 01       	movw	r10, r22
     20c:	6c 01       	movw	r12, r24
     20e:	9b 01       	movw	r18, r22
     210:	a6 01       	movw	r20, r12
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 2d       	mov	r16, r2
     21c:	0e 94 28 06 	call	0xc50	; 0xc50 <__ashldi3>
     220:	59 01       	movw	r10, r18
     222:	6a 01       	movw	r12, r20
     224:	7b 01       	movw	r14, r22
     226:	8c 01       	movw	r16, r24
     228:	95 01       	movw	r18, r10
     22a:	a6 01       	movw	r20, r12
     22c:	b7 01       	movw	r22, r14
     22e:	c8 01       	movw	r24, r16
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	e2 e1       	ldi	r30, 0x12	; 18
     236:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__epilogue_restores__>

0000023a <_fpadd_parts>:
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	e3 e2       	ldi	r30, 0x23	; 35
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__prologue_saves__>
     246:	dc 01       	movw	r26, r24
     248:	2b 01       	movw	r4, r22
     24a:	fa 01       	movw	r30, r20
     24c:	9c 91       	ld	r25, X
     24e:	92 30       	cpi	r25, 0x02	; 2
     250:	08 f4       	brcc	.+2      	; 0x254 <_fpadd_parts+0x1a>
     252:	39 c1       	rjmp	.+626    	; 0x4c6 <_fpadd_parts+0x28c>
     254:	eb 01       	movw	r28, r22
     256:	88 81       	ld	r24, Y
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	08 f4       	brcc	.+2      	; 0x25e <_fpadd_parts+0x24>
     25c:	33 c1       	rjmp	.+614    	; 0x4c4 <_fpadd_parts+0x28a>
     25e:	94 30       	cpi	r25, 0x04	; 4
     260:	69 f4       	brne	.+26     	; 0x27c <_fpadd_parts+0x42>
     262:	84 30       	cpi	r24, 0x04	; 4
     264:	09 f0       	breq	.+2      	; 0x268 <_fpadd_parts+0x2e>
     266:	2f c1       	rjmp	.+606    	; 0x4c6 <_fpadd_parts+0x28c>
     268:	11 96       	adiw	r26, 0x01	; 1
     26a:	9c 91       	ld	r25, X
     26c:	11 97       	sbiw	r26, 0x01	; 1
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	98 17       	cp	r25, r24
     272:	09 f4       	brne	.+2      	; 0x276 <_fpadd_parts+0x3c>
     274:	28 c1       	rjmp	.+592    	; 0x4c6 <_fpadd_parts+0x28c>
     276:	a0 e6       	ldi	r26, 0x60	; 96
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	25 c1       	rjmp	.+586    	; 0x4c6 <_fpadd_parts+0x28c>
     27c:	84 30       	cpi	r24, 0x04	; 4
     27e:	09 f4       	brne	.+2      	; 0x282 <_fpadd_parts+0x48>
     280:	21 c1       	rjmp	.+578    	; 0x4c4 <_fpadd_parts+0x28a>
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	a9 f4       	brne	.+42     	; 0x2b0 <_fpadd_parts+0x76>
     286:	92 30       	cpi	r25, 0x02	; 2
     288:	09 f0       	breq	.+2      	; 0x28c <_fpadd_parts+0x52>
     28a:	1d c1       	rjmp	.+570    	; 0x4c6 <_fpadd_parts+0x28c>
     28c:	9a 01       	movw	r18, r20
     28e:	ad 01       	movw	r20, r26
     290:	88 e0       	ldi	r24, 0x08	; 8
     292:	ea 01       	movw	r28, r20
     294:	09 90       	ld	r0, Y+
     296:	ae 01       	movw	r20, r28
     298:	e9 01       	movw	r28, r18
     29a:	09 92       	st	Y+, r0
     29c:	9e 01       	movw	r18, r28
     29e:	81 50       	subi	r24, 0x01	; 1
     2a0:	c1 f7       	brne	.-16     	; 0x292 <_fpadd_parts+0x58>
     2a2:	e2 01       	movw	r28, r4
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	11 96       	adiw	r26, 0x01	; 1
     2a8:	9c 91       	ld	r25, X
     2aa:	89 23       	and	r24, r25
     2ac:	81 83       	std	Z+1, r24	; 0x01
     2ae:	08 c1       	rjmp	.+528    	; 0x4c0 <_fpadd_parts+0x286>
     2b0:	92 30       	cpi	r25, 0x02	; 2
     2b2:	09 f4       	brne	.+2      	; 0x2b6 <_fpadd_parts+0x7c>
     2b4:	07 c1       	rjmp	.+526    	; 0x4c4 <_fpadd_parts+0x28a>
     2b6:	12 96       	adiw	r26, 0x02	; 2
     2b8:	2d 90       	ld	r2, X+
     2ba:	3c 90       	ld	r3, X
     2bc:	13 97       	sbiw	r26, 0x03	; 3
     2be:	eb 01       	movw	r28, r22
     2c0:	8a 81       	ldd	r24, Y+2	; 0x02
     2c2:	9b 81       	ldd	r25, Y+3	; 0x03
     2c4:	14 96       	adiw	r26, 0x04	; 4
     2c6:	ad 90       	ld	r10, X+
     2c8:	bd 90       	ld	r11, X+
     2ca:	cd 90       	ld	r12, X+
     2cc:	dc 90       	ld	r13, X
     2ce:	17 97       	sbiw	r26, 0x07	; 7
     2d0:	ec 80       	ldd	r14, Y+4	; 0x04
     2d2:	fd 80       	ldd	r15, Y+5	; 0x05
     2d4:	0e 81       	ldd	r16, Y+6	; 0x06
     2d6:	1f 81       	ldd	r17, Y+7	; 0x07
     2d8:	91 01       	movw	r18, r2
     2da:	28 1b       	sub	r18, r24
     2dc:	39 0b       	sbc	r19, r25
     2de:	b9 01       	movw	r22, r18
     2e0:	37 ff       	sbrs	r19, 7
     2e2:	04 c0       	rjmp	.+8      	; 0x2ec <_fpadd_parts+0xb2>
     2e4:	66 27       	eor	r22, r22
     2e6:	77 27       	eor	r23, r23
     2e8:	62 1b       	sub	r22, r18
     2ea:	73 0b       	sbc	r23, r19
     2ec:	60 32       	cpi	r22, 0x20	; 32
     2ee:	71 05       	cpc	r23, r1
     2f0:	0c f0       	brlt	.+2      	; 0x2f4 <_fpadd_parts+0xba>
     2f2:	61 c0       	rjmp	.+194    	; 0x3b6 <_fpadd_parts+0x17c>
     2f4:	12 16       	cp	r1, r18
     2f6:	13 06       	cpc	r1, r19
     2f8:	6c f5       	brge	.+90     	; 0x354 <_fpadd_parts+0x11a>
     2fa:	37 01       	movw	r6, r14
     2fc:	48 01       	movw	r8, r16
     2fe:	06 2e       	mov	r0, r22
     300:	04 c0       	rjmp	.+8      	; 0x30a <_fpadd_parts+0xd0>
     302:	96 94       	lsr	r9
     304:	87 94       	ror	r8
     306:	77 94       	ror	r7
     308:	67 94       	ror	r6
     30a:	0a 94       	dec	r0
     30c:	d2 f7       	brpl	.-12     	; 0x302 <_fpadd_parts+0xc8>
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	04 c0       	rjmp	.+8      	; 0x320 <_fpadd_parts+0xe6>
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	44 1f       	adc	r20, r20
     31e:	55 1f       	adc	r21, r21
     320:	6a 95       	dec	r22
     322:	d2 f7       	brpl	.-12     	; 0x318 <_fpadd_parts+0xde>
     324:	21 50       	subi	r18, 0x01	; 1
     326:	30 40       	sbci	r19, 0x00	; 0
     328:	40 40       	sbci	r20, 0x00	; 0
     32a:	50 40       	sbci	r21, 0x00	; 0
     32c:	2e 21       	and	r18, r14
     32e:	3f 21       	and	r19, r15
     330:	40 23       	and	r20, r16
     332:	51 23       	and	r21, r17
     334:	21 15       	cp	r18, r1
     336:	31 05       	cpc	r19, r1
     338:	41 05       	cpc	r20, r1
     33a:	51 05       	cpc	r21, r1
     33c:	21 f0       	breq	.+8      	; 0x346 <_fpadd_parts+0x10c>
     33e:	21 e0       	ldi	r18, 0x01	; 1
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	79 01       	movw	r14, r18
     348:	8a 01       	movw	r16, r20
     34a:	e6 28       	or	r14, r6
     34c:	f7 28       	or	r15, r7
     34e:	08 29       	or	r16, r8
     350:	19 29       	or	r17, r9
     352:	3c c0       	rjmp	.+120    	; 0x3cc <_fpadd_parts+0x192>
     354:	23 2b       	or	r18, r19
     356:	d1 f1       	breq	.+116    	; 0x3cc <_fpadd_parts+0x192>
     358:	26 0e       	add	r2, r22
     35a:	37 1e       	adc	r3, r23
     35c:	35 01       	movw	r6, r10
     35e:	46 01       	movw	r8, r12
     360:	06 2e       	mov	r0, r22
     362:	04 c0       	rjmp	.+8      	; 0x36c <_fpadd_parts+0x132>
     364:	96 94       	lsr	r9
     366:	87 94       	ror	r8
     368:	77 94       	ror	r7
     36a:	67 94       	ror	r6
     36c:	0a 94       	dec	r0
     36e:	d2 f7       	brpl	.-12     	; 0x364 <_fpadd_parts+0x12a>
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	04 c0       	rjmp	.+8      	; 0x382 <_fpadd_parts+0x148>
     37a:	22 0f       	add	r18, r18
     37c:	33 1f       	adc	r19, r19
     37e:	44 1f       	adc	r20, r20
     380:	55 1f       	adc	r21, r21
     382:	6a 95       	dec	r22
     384:	d2 f7       	brpl	.-12     	; 0x37a <_fpadd_parts+0x140>
     386:	21 50       	subi	r18, 0x01	; 1
     388:	30 40       	sbci	r19, 0x00	; 0
     38a:	40 40       	sbci	r20, 0x00	; 0
     38c:	50 40       	sbci	r21, 0x00	; 0
     38e:	2a 21       	and	r18, r10
     390:	3b 21       	and	r19, r11
     392:	4c 21       	and	r20, r12
     394:	5d 21       	and	r21, r13
     396:	21 15       	cp	r18, r1
     398:	31 05       	cpc	r19, r1
     39a:	41 05       	cpc	r20, r1
     39c:	51 05       	cpc	r21, r1
     39e:	21 f0       	breq	.+8      	; 0x3a8 <_fpadd_parts+0x16e>
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	59 01       	movw	r10, r18
     3aa:	6a 01       	movw	r12, r20
     3ac:	a6 28       	or	r10, r6
     3ae:	b7 28       	or	r11, r7
     3b0:	c8 28       	or	r12, r8
     3b2:	d9 28       	or	r13, r9
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <_fpadd_parts+0x192>
     3b6:	82 15       	cp	r24, r2
     3b8:	93 05       	cpc	r25, r3
     3ba:	2c f0       	brlt	.+10     	; 0x3c6 <_fpadd_parts+0x18c>
     3bc:	1c 01       	movw	r2, r24
     3be:	aa 24       	eor	r10, r10
     3c0:	bb 24       	eor	r11, r11
     3c2:	65 01       	movw	r12, r10
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <_fpadd_parts+0x192>
     3c6:	ee 24       	eor	r14, r14
     3c8:	ff 24       	eor	r15, r15
     3ca:	87 01       	movw	r16, r14
     3cc:	11 96       	adiw	r26, 0x01	; 1
     3ce:	9c 91       	ld	r25, X
     3d0:	d2 01       	movw	r26, r4
     3d2:	11 96       	adiw	r26, 0x01	; 1
     3d4:	8c 91       	ld	r24, X
     3d6:	98 17       	cp	r25, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <_fpadd_parts+0x1a2>
     3da:	45 c0       	rjmp	.+138    	; 0x466 <_fpadd_parts+0x22c>
     3dc:	99 23       	and	r25, r25
     3de:	39 f0       	breq	.+14     	; 0x3ee <_fpadd_parts+0x1b4>
     3e0:	a8 01       	movw	r20, r16
     3e2:	97 01       	movw	r18, r14
     3e4:	2a 19       	sub	r18, r10
     3e6:	3b 09       	sbc	r19, r11
     3e8:	4c 09       	sbc	r20, r12
     3ea:	5d 09       	sbc	r21, r13
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <_fpadd_parts+0x1c0>
     3ee:	a6 01       	movw	r20, r12
     3f0:	95 01       	movw	r18, r10
     3f2:	2e 19       	sub	r18, r14
     3f4:	3f 09       	sbc	r19, r15
     3f6:	40 0b       	sbc	r20, r16
     3f8:	51 0b       	sbc	r21, r17
     3fa:	57 fd       	sbrc	r21, 7
     3fc:	08 c0       	rjmp	.+16     	; 0x40e <_fpadd_parts+0x1d4>
     3fe:	11 82       	std	Z+1, r1	; 0x01
     400:	33 82       	std	Z+3, r3	; 0x03
     402:	22 82       	std	Z+2, r2	; 0x02
     404:	24 83       	std	Z+4, r18	; 0x04
     406:	35 83       	std	Z+5, r19	; 0x05
     408:	46 83       	std	Z+6, r20	; 0x06
     40a:	57 83       	std	Z+7, r21	; 0x07
     40c:	1d c0       	rjmp	.+58     	; 0x448 <_fpadd_parts+0x20e>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	81 83       	std	Z+1, r24	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	88 27       	eor	r24, r24
     418:	99 27       	eor	r25, r25
     41a:	dc 01       	movw	r26, r24
     41c:	82 1b       	sub	r24, r18
     41e:	93 0b       	sbc	r25, r19
     420:	a4 0b       	sbc	r26, r20
     422:	b5 0b       	sbc	r27, r21
     424:	84 83       	std	Z+4, r24	; 0x04
     426:	95 83       	std	Z+5, r25	; 0x05
     428:	a6 83       	std	Z+6, r26	; 0x06
     42a:	b7 83       	std	Z+7, r27	; 0x07
     42c:	0d c0       	rjmp	.+26     	; 0x448 <_fpadd_parts+0x20e>
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	44 1f       	adc	r20, r20
     434:	55 1f       	adc	r21, r21
     436:	24 83       	std	Z+4, r18	; 0x04
     438:	35 83       	std	Z+5, r19	; 0x05
     43a:	46 83       	std	Z+6, r20	; 0x06
     43c:	57 83       	std	Z+7, r21	; 0x07
     43e:	82 81       	ldd	r24, Z+2	; 0x02
     440:	93 81       	ldd	r25, Z+3	; 0x03
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	93 83       	std	Z+3, r25	; 0x03
     446:	82 83       	std	Z+2, r24	; 0x02
     448:	24 81       	ldd	r18, Z+4	; 0x04
     44a:	35 81       	ldd	r19, Z+5	; 0x05
     44c:	46 81       	ldd	r20, Z+6	; 0x06
     44e:	57 81       	ldd	r21, Z+7	; 0x07
     450:	da 01       	movw	r26, r20
     452:	c9 01       	movw	r24, r18
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	a1 09       	sbc	r26, r1
     458:	b1 09       	sbc	r27, r1
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	9f 4f       	sbci	r25, 0xFF	; 255
     45e:	af 4f       	sbci	r26, 0xFF	; 255
     460:	bf 43       	sbci	r27, 0x3F	; 63
     462:	28 f3       	brcs	.-54     	; 0x42e <_fpadd_parts+0x1f4>
     464:	0b c0       	rjmp	.+22     	; 0x47c <_fpadd_parts+0x242>
     466:	91 83       	std	Z+1, r25	; 0x01
     468:	33 82       	std	Z+3, r3	; 0x03
     46a:	22 82       	std	Z+2, r2	; 0x02
     46c:	ea 0c       	add	r14, r10
     46e:	fb 1c       	adc	r15, r11
     470:	0c 1d       	adc	r16, r12
     472:	1d 1d       	adc	r17, r13
     474:	e4 82       	std	Z+4, r14	; 0x04
     476:	f5 82       	std	Z+5, r15	; 0x05
     478:	06 83       	std	Z+6, r16	; 0x06
     47a:	17 83       	std	Z+7, r17	; 0x07
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	80 83       	st	Z, r24
     480:	24 81       	ldd	r18, Z+4	; 0x04
     482:	35 81       	ldd	r19, Z+5	; 0x05
     484:	46 81       	ldd	r20, Z+6	; 0x06
     486:	57 81       	ldd	r21, Z+7	; 0x07
     488:	57 ff       	sbrs	r21, 7
     48a:	1a c0       	rjmp	.+52     	; 0x4c0 <_fpadd_parts+0x286>
     48c:	c9 01       	movw	r24, r18
     48e:	aa 27       	eor	r26, r26
     490:	97 fd       	sbrc	r25, 7
     492:	a0 95       	com	r26
     494:	ba 2f       	mov	r27, r26
     496:	81 70       	andi	r24, 0x01	; 1
     498:	90 70       	andi	r25, 0x00	; 0
     49a:	a0 70       	andi	r26, 0x00	; 0
     49c:	b0 70       	andi	r27, 0x00	; 0
     49e:	56 95       	lsr	r21
     4a0:	47 95       	ror	r20
     4a2:	37 95       	ror	r19
     4a4:	27 95       	ror	r18
     4a6:	82 2b       	or	r24, r18
     4a8:	93 2b       	or	r25, r19
     4aa:	a4 2b       	or	r26, r20
     4ac:	b5 2b       	or	r27, r21
     4ae:	84 83       	std	Z+4, r24	; 0x04
     4b0:	95 83       	std	Z+5, r25	; 0x05
     4b2:	a6 83       	std	Z+6, r26	; 0x06
     4b4:	b7 83       	std	Z+7, r27	; 0x07
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	93 81       	ldd	r25, Z+3	; 0x03
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	93 83       	std	Z+3, r25	; 0x03
     4be:	82 83       	std	Z+2, r24	; 0x02
     4c0:	df 01       	movw	r26, r30
     4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <_fpadd_parts+0x28c>
     4c4:	d2 01       	movw	r26, r4
     4c6:	cd 01       	movw	r24, r26
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	e2 e1       	ldi	r30, 0x12	; 18
     4ce:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__epilogue_restores__>

000004d2 <__subsf3>:
     4d2:	a0 e2       	ldi	r26, 0x20	; 32
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	ef e6       	ldi	r30, 0x6F	; 111
     4d8:	f2 e0       	ldi	r31, 0x02	; 2
     4da:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__prologue_saves__+0x18>
     4de:	69 83       	std	Y+1, r22	; 0x01
     4e0:	7a 83       	std	Y+2, r23	; 0x02
     4e2:	8b 83       	std	Y+3, r24	; 0x03
     4e4:	9c 83       	std	Y+4, r25	; 0x04
     4e6:	2d 83       	std	Y+5, r18	; 0x05
     4e8:	3e 83       	std	Y+6, r19	; 0x06
     4ea:	4f 83       	std	Y+7, r20	; 0x07
     4ec:	58 87       	std	Y+8, r21	; 0x08
     4ee:	e9 e0       	ldi	r30, 0x09	; 9
     4f0:	ee 2e       	mov	r14, r30
     4f2:	f1 2c       	mov	r15, r1
     4f4:	ec 0e       	add	r14, r28
     4f6:	fd 1e       	adc	r15, r29
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	b7 01       	movw	r22, r14
     4fe:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     502:	8e 01       	movw	r16, r28
     504:	0f 5e       	subi	r16, 0xEF	; 239
     506:	1f 4f       	sbci	r17, 0xFF	; 255
     508:	ce 01       	movw	r24, r28
     50a:	05 96       	adiw	r24, 0x05	; 5
     50c:	b8 01       	movw	r22, r16
     50e:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     512:	8a 89       	ldd	r24, Y+18	; 0x12
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	89 27       	eor	r24, r25
     518:	8a 8b       	std	Y+18, r24	; 0x12
     51a:	c7 01       	movw	r24, r14
     51c:	b8 01       	movw	r22, r16
     51e:	ae 01       	movw	r20, r28
     520:	47 5e       	subi	r20, 0xE7	; 231
     522:	5f 4f       	sbci	r21, 0xFF	; 255
     524:	0e 94 1d 01 	call	0x23a	; 0x23a <_fpadd_parts>
     528:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     52c:	a0 96       	adiw	r28, 0x20	; 32
     52e:	e6 e0       	ldi	r30, 0x06	; 6
     530:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__epilogue_restores__+0x18>

00000534 <__addsf3>:
     534:	a0 e2       	ldi	r26, 0x20	; 32
     536:	b0 e0       	ldi	r27, 0x00	; 0
     538:	e0 ea       	ldi	r30, 0xA0	; 160
     53a:	f2 e0       	ldi	r31, 0x02	; 2
     53c:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__prologue_saves__+0x18>
     540:	69 83       	std	Y+1, r22	; 0x01
     542:	7a 83       	std	Y+2, r23	; 0x02
     544:	8b 83       	std	Y+3, r24	; 0x03
     546:	9c 83       	std	Y+4, r25	; 0x04
     548:	2d 83       	std	Y+5, r18	; 0x05
     54a:	3e 83       	std	Y+6, r19	; 0x06
     54c:	4f 83       	std	Y+7, r20	; 0x07
     54e:	58 87       	std	Y+8, r21	; 0x08
     550:	f9 e0       	ldi	r31, 0x09	; 9
     552:	ef 2e       	mov	r14, r31
     554:	f1 2c       	mov	r15, r1
     556:	ec 0e       	add	r14, r28
     558:	fd 1e       	adc	r15, r29
     55a:	ce 01       	movw	r24, r28
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	b7 01       	movw	r22, r14
     560:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     564:	8e 01       	movw	r16, r28
     566:	0f 5e       	subi	r16, 0xEF	; 239
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	ce 01       	movw	r24, r28
     56c:	05 96       	adiw	r24, 0x05	; 5
     56e:	b8 01       	movw	r22, r16
     570:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     574:	c7 01       	movw	r24, r14
     576:	b8 01       	movw	r22, r16
     578:	ae 01       	movw	r20, r28
     57a:	47 5e       	subi	r20, 0xE7	; 231
     57c:	5f 4f       	sbci	r21, 0xFF	; 255
     57e:	0e 94 1d 01 	call	0x23a	; 0x23a <_fpadd_parts>
     582:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     586:	a0 96       	adiw	r28, 0x20	; 32
     588:	e6 e0       	ldi	r30, 0x06	; 6
     58a:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__epilogue_restores__+0x18>

0000058e <__mulsf3>:
     58e:	a0 e2       	ldi	r26, 0x20	; 32
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	ed ec       	ldi	r30, 0xCD	; 205
     594:	f2 e0       	ldi	r31, 0x02	; 2
     596:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__prologue_saves__>
     59a:	69 83       	std	Y+1, r22	; 0x01
     59c:	7a 83       	std	Y+2, r23	; 0x02
     59e:	8b 83       	std	Y+3, r24	; 0x03
     5a0:	9c 83       	std	Y+4, r25	; 0x04
     5a2:	2d 83       	std	Y+5, r18	; 0x05
     5a4:	3e 83       	std	Y+6, r19	; 0x06
     5a6:	4f 83       	std	Y+7, r20	; 0x07
     5a8:	58 87       	std	Y+8, r21	; 0x08
     5aa:	ce 01       	movw	r24, r28
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	be 01       	movw	r22, r28
     5b0:	67 5f       	subi	r22, 0xF7	; 247
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     5b8:	ce 01       	movw	r24, r28
     5ba:	05 96       	adiw	r24, 0x05	; 5
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5e       	subi	r22, 0xEF	; 239
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     5c6:	99 85       	ldd	r25, Y+9	; 0x09
     5c8:	92 30       	cpi	r25, 0x02	; 2
     5ca:	88 f0       	brcs	.+34     	; 0x5ee <__mulsf3+0x60>
     5cc:	89 89       	ldd	r24, Y+17	; 0x11
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	c8 f0       	brcs	.+50     	; 0x604 <__mulsf3+0x76>
     5d2:	94 30       	cpi	r25, 0x04	; 4
     5d4:	19 f4       	brne	.+6      	; 0x5dc <__mulsf3+0x4e>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	51 f4       	brne	.+20     	; 0x5ee <__mulsf3+0x60>
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <__mulsf3+0x56>
     5dc:	84 30       	cpi	r24, 0x04	; 4
     5de:	29 f4       	brne	.+10     	; 0x5ea <__mulsf3+0x5c>
     5e0:	92 30       	cpi	r25, 0x02	; 2
     5e2:	81 f4       	brne	.+32     	; 0x604 <__mulsf3+0x76>
     5e4:	80 e6       	ldi	r24, 0x60	; 96
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	c6 c0       	rjmp	.+396    	; 0x776 <__mulsf3+0x1e8>
     5ea:	92 30       	cpi	r25, 0x02	; 2
     5ec:	49 f4       	brne	.+18     	; 0x600 <__mulsf3+0x72>
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f2:	8a 89       	ldd	r24, Y+18	; 0x12
     5f4:	98 13       	cpse	r25, r24
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	2a 87       	std	Y+10, r18	; 0x0a
     5fa:	ce 01       	movw	r24, r28
     5fc:	09 96       	adiw	r24, 0x09	; 9
     5fe:	bb c0       	rjmp	.+374    	; 0x776 <__mulsf3+0x1e8>
     600:	82 30       	cpi	r24, 0x02	; 2
     602:	49 f4       	brne	.+18     	; 0x616 <__mulsf3+0x88>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	9a 85       	ldd	r25, Y+10	; 0x0a
     608:	8a 89       	ldd	r24, Y+18	; 0x12
     60a:	98 13       	cpse	r25, r24
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	2a 8b       	std	Y+18, r18	; 0x12
     610:	ce 01       	movw	r24, r28
     612:	41 96       	adiw	r24, 0x11	; 17
     614:	b0 c0       	rjmp	.+352    	; 0x776 <__mulsf3+0x1e8>
     616:	2d 84       	ldd	r2, Y+13	; 0x0d
     618:	3e 84       	ldd	r3, Y+14	; 0x0e
     61a:	4f 84       	ldd	r4, Y+15	; 0x0f
     61c:	58 88       	ldd	r5, Y+16	; 0x10
     61e:	6d 88       	ldd	r6, Y+21	; 0x15
     620:	7e 88       	ldd	r7, Y+22	; 0x16
     622:	8f 88       	ldd	r8, Y+23	; 0x17
     624:	98 8c       	ldd	r9, Y+24	; 0x18
     626:	ee 24       	eor	r14, r14
     628:	ff 24       	eor	r15, r15
     62a:	87 01       	movw	r16, r14
     62c:	aa 24       	eor	r10, r10
     62e:	bb 24       	eor	r11, r11
     630:	65 01       	movw	r12, r10
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	e0 e0       	ldi	r30, 0x00	; 0
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	c1 01       	movw	r24, r2
     640:	81 70       	andi	r24, 0x01	; 1
     642:	90 70       	andi	r25, 0x00	; 0
     644:	89 2b       	or	r24, r25
     646:	e9 f0       	breq	.+58     	; 0x682 <__mulsf3+0xf4>
     648:	e6 0c       	add	r14, r6
     64a:	f7 1c       	adc	r15, r7
     64c:	08 1d       	adc	r16, r8
     64e:	19 1d       	adc	r17, r9
     650:	9a 01       	movw	r18, r20
     652:	ab 01       	movw	r20, r22
     654:	2a 0d       	add	r18, r10
     656:	3b 1d       	adc	r19, r11
     658:	4c 1d       	adc	r20, r12
     65a:	5d 1d       	adc	r21, r13
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	a0 e0       	ldi	r26, 0x00	; 0
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	e6 14       	cp	r14, r6
     666:	f7 04       	cpc	r15, r7
     668:	08 05       	cpc	r16, r8
     66a:	19 05       	cpc	r17, r9
     66c:	20 f4       	brcc	.+8      	; 0x676 <__mulsf3+0xe8>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	a0 e0       	ldi	r26, 0x00	; 0
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	ba 01       	movw	r22, r20
     678:	a9 01       	movw	r20, r18
     67a:	48 0f       	add	r20, r24
     67c:	59 1f       	adc	r21, r25
     67e:	6a 1f       	adc	r22, r26
     680:	7b 1f       	adc	r23, r27
     682:	aa 0c       	add	r10, r10
     684:	bb 1c       	adc	r11, r11
     686:	cc 1c       	adc	r12, r12
     688:	dd 1c       	adc	r13, r13
     68a:	97 fe       	sbrs	r9, 7
     68c:	08 c0       	rjmp	.+16     	; 0x69e <__mulsf3+0x110>
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	a8 2a       	or	r10, r24
     698:	b9 2a       	or	r11, r25
     69a:	ca 2a       	or	r12, r26
     69c:	db 2a       	or	r13, r27
     69e:	31 96       	adiw	r30, 0x01	; 1
     6a0:	e0 32       	cpi	r30, 0x20	; 32
     6a2:	f1 05       	cpc	r31, r1
     6a4:	49 f0       	breq	.+18     	; 0x6b8 <__mulsf3+0x12a>
     6a6:	66 0c       	add	r6, r6
     6a8:	77 1c       	adc	r7, r7
     6aa:	88 1c       	adc	r8, r8
     6ac:	99 1c       	adc	r9, r9
     6ae:	56 94       	lsr	r5
     6b0:	47 94       	ror	r4
     6b2:	37 94       	ror	r3
     6b4:	27 94       	ror	r2
     6b6:	c3 cf       	rjmp	.-122    	; 0x63e <__mulsf3+0xb0>
     6b8:	fa 85       	ldd	r31, Y+10	; 0x0a
     6ba:	ea 89       	ldd	r30, Y+18	; 0x12
     6bc:	2b 89       	ldd	r18, Y+19	; 0x13
     6be:	3c 89       	ldd	r19, Y+20	; 0x14
     6c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6c4:	28 0f       	add	r18, r24
     6c6:	39 1f       	adc	r19, r25
     6c8:	2e 5f       	subi	r18, 0xFE	; 254
     6ca:	3f 4f       	sbci	r19, 0xFF	; 255
     6cc:	17 c0       	rjmp	.+46     	; 0x6fc <__mulsf3+0x16e>
     6ce:	ca 01       	movw	r24, r20
     6d0:	81 70       	andi	r24, 0x01	; 1
     6d2:	90 70       	andi	r25, 0x00	; 0
     6d4:	89 2b       	or	r24, r25
     6d6:	61 f0       	breq	.+24     	; 0x6f0 <__mulsf3+0x162>
     6d8:	16 95       	lsr	r17
     6da:	07 95       	ror	r16
     6dc:	f7 94       	ror	r15
     6de:	e7 94       	ror	r14
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	b0 e8       	ldi	r27, 0x80	; 128
     6e8:	e8 2a       	or	r14, r24
     6ea:	f9 2a       	or	r15, r25
     6ec:	0a 2b       	or	r16, r26
     6ee:	1b 2b       	or	r17, r27
     6f0:	76 95       	lsr	r23
     6f2:	67 95       	ror	r22
     6f4:	57 95       	ror	r21
     6f6:	47 95       	ror	r20
     6f8:	2f 5f       	subi	r18, 0xFF	; 255
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	77 fd       	sbrc	r23, 7
     6fe:	e7 cf       	rjmp	.-50     	; 0x6ce <__mulsf3+0x140>
     700:	0c c0       	rjmp	.+24     	; 0x71a <__mulsf3+0x18c>
     702:	44 0f       	add	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	66 1f       	adc	r22, r22
     708:	77 1f       	adc	r23, r23
     70a:	17 fd       	sbrc	r17, 7
     70c:	41 60       	ori	r20, 0x01	; 1
     70e:	ee 0c       	add	r14, r14
     710:	ff 1c       	adc	r15, r15
     712:	00 1f       	adc	r16, r16
     714:	11 1f       	adc	r17, r17
     716:	21 50       	subi	r18, 0x01	; 1
     718:	30 40       	sbci	r19, 0x00	; 0
     71a:	40 30       	cpi	r20, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	59 07       	cpc	r21, r25
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	69 07       	cpc	r22, r25
     724:	90 e4       	ldi	r25, 0x40	; 64
     726:	79 07       	cpc	r23, r25
     728:	60 f3       	brcs	.-40     	; 0x702 <__mulsf3+0x174>
     72a:	2b 8f       	std	Y+27, r18	; 0x1b
     72c:	3c 8f       	std	Y+28, r19	; 0x1c
     72e:	db 01       	movw	r26, r22
     730:	ca 01       	movw	r24, r20
     732:	8f 77       	andi	r24, 0x7F	; 127
     734:	90 70       	andi	r25, 0x00	; 0
     736:	a0 70       	andi	r26, 0x00	; 0
     738:	b0 70       	andi	r27, 0x00	; 0
     73a:	80 34       	cpi	r24, 0x40	; 64
     73c:	91 05       	cpc	r25, r1
     73e:	a1 05       	cpc	r26, r1
     740:	b1 05       	cpc	r27, r1
     742:	61 f4       	brne	.+24     	; 0x75c <__mulsf3+0x1ce>
     744:	47 fd       	sbrc	r20, 7
     746:	0a c0       	rjmp	.+20     	; 0x75c <__mulsf3+0x1ce>
     748:	e1 14       	cp	r14, r1
     74a:	f1 04       	cpc	r15, r1
     74c:	01 05       	cpc	r16, r1
     74e:	11 05       	cpc	r17, r1
     750:	29 f0       	breq	.+10     	; 0x75c <__mulsf3+0x1ce>
     752:	40 5c       	subi	r20, 0xC0	; 192
     754:	5f 4f       	sbci	r21, 0xFF	; 255
     756:	6f 4f       	sbci	r22, 0xFF	; 255
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	40 78       	andi	r20, 0x80	; 128
     75c:	1a 8e       	std	Y+26, r1	; 0x1a
     75e:	fe 17       	cp	r31, r30
     760:	11 f0       	breq	.+4      	; 0x766 <__mulsf3+0x1d8>
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	8a 8f       	std	Y+26, r24	; 0x1a
     766:	4d 8f       	std	Y+29, r20	; 0x1d
     768:	5e 8f       	std	Y+30, r21	; 0x1e
     76a:	6f 8f       	std	Y+31, r22	; 0x1f
     76c:	78 a3       	std	Y+32, r23	; 0x20
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	89 8f       	std	Y+25, r24	; 0x19
     772:	ce 01       	movw	r24, r28
     774:	49 96       	adiw	r24, 0x19	; 25
     776:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     77a:	a0 96       	adiw	r28, 0x20	; 32
     77c:	e2 e1       	ldi	r30, 0x12	; 18
     77e:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__epilogue_restores__>

00000782 <__divsf3>:
     782:	a8 e1       	ldi	r26, 0x18	; 24
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	e7 ec       	ldi	r30, 0xC7	; 199
     788:	f3 e0       	ldi	r31, 0x03	; 3
     78a:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__prologue_saves__+0x10>
     78e:	69 83       	std	Y+1, r22	; 0x01
     790:	7a 83       	std	Y+2, r23	; 0x02
     792:	8b 83       	std	Y+3, r24	; 0x03
     794:	9c 83       	std	Y+4, r25	; 0x04
     796:	2d 83       	std	Y+5, r18	; 0x05
     798:	3e 83       	std	Y+6, r19	; 0x06
     79a:	4f 83       	std	Y+7, r20	; 0x07
     79c:	58 87       	std	Y+8, r21	; 0x08
     79e:	b9 e0       	ldi	r27, 0x09	; 9
     7a0:	eb 2e       	mov	r14, r27
     7a2:	f1 2c       	mov	r15, r1
     7a4:	ec 0e       	add	r14, r28
     7a6:	fd 1e       	adc	r15, r29
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	b7 01       	movw	r22, r14
     7ae:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     7b2:	8e 01       	movw	r16, r28
     7b4:	0f 5e       	subi	r16, 0xEF	; 239
     7b6:	1f 4f       	sbci	r17, 0xFF	; 255
     7b8:	ce 01       	movw	r24, r28
     7ba:	05 96       	adiw	r24, 0x05	; 5
     7bc:	b8 01       	movw	r22, r16
     7be:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     7c2:	29 85       	ldd	r18, Y+9	; 0x09
     7c4:	22 30       	cpi	r18, 0x02	; 2
     7c6:	08 f4       	brcc	.+2      	; 0x7ca <__divsf3+0x48>
     7c8:	7e c0       	rjmp	.+252    	; 0x8c6 <__stack+0x67>
     7ca:	39 89       	ldd	r19, Y+17	; 0x11
     7cc:	32 30       	cpi	r19, 0x02	; 2
     7ce:	10 f4       	brcc	.+4      	; 0x7d4 <__divsf3+0x52>
     7d0:	b8 01       	movw	r22, r16
     7d2:	7c c0       	rjmp	.+248    	; 0x8cc <__stack+0x6d>
     7d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     7d6:	9a 89       	ldd	r25, Y+18	; 0x12
     7d8:	89 27       	eor	r24, r25
     7da:	8a 87       	std	Y+10, r24	; 0x0a
     7dc:	24 30       	cpi	r18, 0x04	; 4
     7de:	11 f0       	breq	.+4      	; 0x7e4 <__divsf3+0x62>
     7e0:	22 30       	cpi	r18, 0x02	; 2
     7e2:	31 f4       	brne	.+12     	; 0x7f0 <__divsf3+0x6e>
     7e4:	23 17       	cp	r18, r19
     7e6:	09 f0       	breq	.+2      	; 0x7ea <__divsf3+0x68>
     7e8:	6e c0       	rjmp	.+220    	; 0x8c6 <__stack+0x67>
     7ea:	60 e6       	ldi	r22, 0x60	; 96
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	6e c0       	rjmp	.+220    	; 0x8cc <__stack+0x6d>
     7f0:	34 30       	cpi	r19, 0x04	; 4
     7f2:	39 f4       	brne	.+14     	; 0x802 <__divsf3+0x80>
     7f4:	1d 86       	std	Y+13, r1	; 0x0d
     7f6:	1e 86       	std	Y+14, r1	; 0x0e
     7f8:	1f 86       	std	Y+15, r1	; 0x0f
     7fa:	18 8a       	std	Y+16, r1	; 0x10
     7fc:	1c 86       	std	Y+12, r1	; 0x0c
     7fe:	1b 86       	std	Y+11, r1	; 0x0b
     800:	04 c0       	rjmp	.+8      	; 0x80a <__divsf3+0x88>
     802:	32 30       	cpi	r19, 0x02	; 2
     804:	21 f4       	brne	.+8      	; 0x80e <__divsf3+0x8c>
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	89 87       	std	Y+9, r24	; 0x09
     80a:	b7 01       	movw	r22, r14
     80c:	5f c0       	rjmp	.+190    	; 0x8cc <__stack+0x6d>
     80e:	2b 85       	ldd	r18, Y+11	; 0x0b
     810:	3c 85       	ldd	r19, Y+12	; 0x0c
     812:	8b 89       	ldd	r24, Y+19	; 0x13
     814:	9c 89       	ldd	r25, Y+20	; 0x14
     816:	28 1b       	sub	r18, r24
     818:	39 0b       	sbc	r19, r25
     81a:	3c 87       	std	Y+12, r19	; 0x0c
     81c:	2b 87       	std	Y+11, r18	; 0x0b
     81e:	ed 84       	ldd	r14, Y+13	; 0x0d
     820:	fe 84       	ldd	r15, Y+14	; 0x0e
     822:	0f 85       	ldd	r16, Y+15	; 0x0f
     824:	18 89       	ldd	r17, Y+16	; 0x10
     826:	ad 88       	ldd	r10, Y+21	; 0x15
     828:	be 88       	ldd	r11, Y+22	; 0x16
     82a:	cf 88       	ldd	r12, Y+23	; 0x17
     82c:	d8 8c       	ldd	r13, Y+24	; 0x18
     82e:	ea 14       	cp	r14, r10
     830:	fb 04       	cpc	r15, r11
     832:	0c 05       	cpc	r16, r12
     834:	1d 05       	cpc	r17, r13
     836:	40 f4       	brcc	.+16     	; 0x848 <__divsf3+0xc6>
     838:	ee 0c       	add	r14, r14
     83a:	ff 1c       	adc	r15, r15
     83c:	00 1f       	adc	r16, r16
     83e:	11 1f       	adc	r17, r17
     840:	21 50       	subi	r18, 0x01	; 1
     842:	30 40       	sbci	r19, 0x00	; 0
     844:	3c 87       	std	Y+12, r19	; 0x0c
     846:	2b 87       	std	Y+11, r18	; 0x0b
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	b0 e4       	ldi	r27, 0x40	; 64
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	ea 14       	cp	r14, r10
     85e:	fb 04       	cpc	r15, r11
     860:	0c 05       	cpc	r16, r12
     862:	1d 05       	cpc	r17, r13
     864:	40 f0       	brcs	.+16     	; 0x876 <__stack+0x17>
     866:	28 2b       	or	r18, r24
     868:	39 2b       	or	r19, r25
     86a:	4a 2b       	or	r20, r26
     86c:	5b 2b       	or	r21, r27
     86e:	ea 18       	sub	r14, r10
     870:	fb 08       	sbc	r15, r11
     872:	0c 09       	sbc	r16, r12
     874:	1d 09       	sbc	r17, r13
     876:	b6 95       	lsr	r27
     878:	a7 95       	ror	r26
     87a:	97 95       	ror	r25
     87c:	87 95       	ror	r24
     87e:	ee 0c       	add	r14, r14
     880:	ff 1c       	adc	r15, r15
     882:	00 1f       	adc	r16, r16
     884:	11 1f       	adc	r17, r17
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	6f 31       	cpi	r22, 0x1F	; 31
     88c:	71 05       	cpc	r23, r1
     88e:	31 f7       	brne	.-52     	; 0x85c <__divsf3+0xda>
     890:	da 01       	movw	r26, r20
     892:	c9 01       	movw	r24, r18
     894:	8f 77       	andi	r24, 0x7F	; 127
     896:	90 70       	andi	r25, 0x00	; 0
     898:	a0 70       	andi	r26, 0x00	; 0
     89a:	b0 70       	andi	r27, 0x00	; 0
     89c:	80 34       	cpi	r24, 0x40	; 64
     89e:	91 05       	cpc	r25, r1
     8a0:	a1 05       	cpc	r26, r1
     8a2:	b1 05       	cpc	r27, r1
     8a4:	61 f4       	brne	.+24     	; 0x8be <__stack+0x5f>
     8a6:	27 fd       	sbrc	r18, 7
     8a8:	0a c0       	rjmp	.+20     	; 0x8be <__stack+0x5f>
     8aa:	e1 14       	cp	r14, r1
     8ac:	f1 04       	cpc	r15, r1
     8ae:	01 05       	cpc	r16, r1
     8b0:	11 05       	cpc	r17, r1
     8b2:	29 f0       	breq	.+10     	; 0x8be <__stack+0x5f>
     8b4:	20 5c       	subi	r18, 0xC0	; 192
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	20 78       	andi	r18, 0x80	; 128
     8be:	2d 87       	std	Y+13, r18	; 0x0d
     8c0:	3e 87       	std	Y+14, r19	; 0x0e
     8c2:	4f 87       	std	Y+15, r20	; 0x0f
     8c4:	58 8b       	std	Y+16, r21	; 0x10
     8c6:	be 01       	movw	r22, r28
     8c8:	67 5f       	subi	r22, 0xF7	; 247
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	cb 01       	movw	r24, r22
     8ce:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     8d2:	68 96       	adiw	r28, 0x18	; 24
     8d4:	ea e0       	ldi	r30, 0x0A	; 10
     8d6:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__+0x10>

000008da <__gtsf2>:
     8da:	a8 e1       	ldi	r26, 0x18	; 24
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e3 e7       	ldi	r30, 0x73	; 115
     8e0:	f4 e0       	ldi	r31, 0x04	; 4
     8e2:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__prologue_saves__+0x18>
     8e6:	69 83       	std	Y+1, r22	; 0x01
     8e8:	7a 83       	std	Y+2, r23	; 0x02
     8ea:	8b 83       	std	Y+3, r24	; 0x03
     8ec:	9c 83       	std	Y+4, r25	; 0x04
     8ee:	2d 83       	std	Y+5, r18	; 0x05
     8f0:	3e 83       	std	Y+6, r19	; 0x06
     8f2:	4f 83       	std	Y+7, r20	; 0x07
     8f4:	58 87       	std	Y+8, r21	; 0x08
     8f6:	89 e0       	ldi	r24, 0x09	; 9
     8f8:	e8 2e       	mov	r14, r24
     8fa:	f1 2c       	mov	r15, r1
     8fc:	ec 0e       	add	r14, r28
     8fe:	fd 1e       	adc	r15, r29
     900:	ce 01       	movw	r24, r28
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	b7 01       	movw	r22, r14
     906:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     90a:	8e 01       	movw	r16, r28
     90c:	0f 5e       	subi	r16, 0xEF	; 239
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	ce 01       	movw	r24, r28
     912:	05 96       	adiw	r24, 0x05	; 5
     914:	b8 01       	movw	r22, r16
     916:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     91a:	89 85       	ldd	r24, Y+9	; 0x09
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	40 f0       	brcs	.+16     	; 0x930 <__gtsf2+0x56>
     920:	89 89       	ldd	r24, Y+17	; 0x11
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	28 f0       	brcs	.+10     	; 0x930 <__gtsf2+0x56>
     926:	c7 01       	movw	r24, r14
     928:	b8 01       	movw	r22, r16
     92a:	0e 94 43 08 	call	0x1086	; 0x1086 <__fpcmp_parts_f>
     92e:	01 c0       	rjmp	.+2      	; 0x932 <__gtsf2+0x58>
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	68 96       	adiw	r28, 0x18	; 24
     934:	e6 e0       	ldi	r30, 0x06	; 6
     936:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__epilogue_restores__+0x18>

0000093a <__gesf2>:
     93a:	a8 e1       	ldi	r26, 0x18	; 24
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	e3 ea       	ldi	r30, 0xA3	; 163
     940:	f4 e0       	ldi	r31, 0x04	; 4
     942:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__prologue_saves__+0x18>
     946:	69 83       	std	Y+1, r22	; 0x01
     948:	7a 83       	std	Y+2, r23	; 0x02
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	9c 83       	std	Y+4, r25	; 0x04
     94e:	2d 83       	std	Y+5, r18	; 0x05
     950:	3e 83       	std	Y+6, r19	; 0x06
     952:	4f 83       	std	Y+7, r20	; 0x07
     954:	58 87       	std	Y+8, r21	; 0x08
     956:	89 e0       	ldi	r24, 0x09	; 9
     958:	e8 2e       	mov	r14, r24
     95a:	f1 2c       	mov	r15, r1
     95c:	ec 0e       	add	r14, r28
     95e:	fd 1e       	adc	r15, r29
     960:	ce 01       	movw	r24, r28
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	b7 01       	movw	r22, r14
     966:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     96a:	8e 01       	movw	r16, r28
     96c:	0f 5e       	subi	r16, 0xEF	; 239
     96e:	1f 4f       	sbci	r17, 0xFF	; 255
     970:	ce 01       	movw	r24, r28
     972:	05 96       	adiw	r24, 0x05	; 5
     974:	b8 01       	movw	r22, r16
     976:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     97a:	89 85       	ldd	r24, Y+9	; 0x09
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	40 f0       	brcs	.+16     	; 0x990 <__gesf2+0x56>
     980:	89 89       	ldd	r24, Y+17	; 0x11
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	28 f0       	brcs	.+10     	; 0x990 <__gesf2+0x56>
     986:	c7 01       	movw	r24, r14
     988:	b8 01       	movw	r22, r16
     98a:	0e 94 43 08 	call	0x1086	; 0x1086 <__fpcmp_parts_f>
     98e:	01 c0       	rjmp	.+2      	; 0x992 <__gesf2+0x58>
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	68 96       	adiw	r28, 0x18	; 24
     994:	e6 e0       	ldi	r30, 0x06	; 6
     996:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__epilogue_restores__+0x18>

0000099a <__ltsf2>:
     99a:	a8 e1       	ldi	r26, 0x18	; 24
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e3 ed       	ldi	r30, 0xD3	; 211
     9a0:	f4 e0       	ldi	r31, 0x04	; 4
     9a2:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__prologue_saves__+0x18>
     9a6:	69 83       	std	Y+1, r22	; 0x01
     9a8:	7a 83       	std	Y+2, r23	; 0x02
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	9c 83       	std	Y+4, r25	; 0x04
     9ae:	2d 83       	std	Y+5, r18	; 0x05
     9b0:	3e 83       	std	Y+6, r19	; 0x06
     9b2:	4f 83       	std	Y+7, r20	; 0x07
     9b4:	58 87       	std	Y+8, r21	; 0x08
     9b6:	89 e0       	ldi	r24, 0x09	; 9
     9b8:	e8 2e       	mov	r14, r24
     9ba:	f1 2c       	mov	r15, r1
     9bc:	ec 0e       	add	r14, r28
     9be:	fd 1e       	adc	r15, r29
     9c0:	ce 01       	movw	r24, r28
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	b7 01       	movw	r22, r14
     9c6:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     9ca:	8e 01       	movw	r16, r28
     9cc:	0f 5e       	subi	r16, 0xEF	; 239
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	ce 01       	movw	r24, r28
     9d2:	05 96       	adiw	r24, 0x05	; 5
     9d4:	b8 01       	movw	r22, r16
     9d6:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     9da:	89 85       	ldd	r24, Y+9	; 0x09
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	40 f0       	brcs	.+16     	; 0x9f0 <__ltsf2+0x56>
     9e0:	89 89       	ldd	r24, Y+17	; 0x11
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	28 f0       	brcs	.+10     	; 0x9f0 <__ltsf2+0x56>
     9e6:	c7 01       	movw	r24, r14
     9e8:	b8 01       	movw	r22, r16
     9ea:	0e 94 43 08 	call	0x1086	; 0x1086 <__fpcmp_parts_f>
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <__ltsf2+0x58>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	68 96       	adiw	r28, 0x18	; 24
     9f4:	e6 e0       	ldi	r30, 0x06	; 6
     9f6:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__epilogue_restores__+0x18>

000009fa <__floatsisf>:
     9fa:	a8 e0       	ldi	r26, 0x08	; 8
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e3 e0       	ldi	r30, 0x03	; 3
     a00:	f5 e0       	ldi	r31, 0x05	; 5
     a02:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <__prologue_saves__+0x12>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	88 27       	eor	r24, r24
     a14:	b7 fd       	sbrc	r27, 7
     a16:	83 95       	inc	r24
     a18:	99 27       	eor	r25, r25
     a1a:	aa 27       	eor	r26, r26
     a1c:	bb 27       	eor	r27, r27
     a1e:	b8 2e       	mov	r11, r24
     a20:	21 15       	cp	r18, r1
     a22:	31 05       	cpc	r19, r1
     a24:	41 05       	cpc	r20, r1
     a26:	51 05       	cpc	r21, r1
     a28:	19 f4       	brne	.+6      	; 0xa30 <__floatsisf+0x36>
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	3a c0       	rjmp	.+116    	; 0xaa4 <__floatsisf+0xaa>
     a30:	88 23       	and	r24, r24
     a32:	a9 f0       	breq	.+42     	; 0xa5e <__floatsisf+0x64>
     a34:	20 30       	cpi	r18, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	38 07       	cpc	r19, r24
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	48 07       	cpc	r20, r24
     a3e:	80 e8       	ldi	r24, 0x80	; 128
     a40:	58 07       	cpc	r21, r24
     a42:	29 f4       	brne	.+10     	; 0xa4e <__floatsisf+0x54>
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	9f ec       	ldi	r25, 0xCF	; 207
     a4c:	30 c0       	rjmp	.+96     	; 0xaae <__floatsisf+0xb4>
     a4e:	ee 24       	eor	r14, r14
     a50:	ff 24       	eor	r15, r15
     a52:	87 01       	movw	r16, r14
     a54:	e2 1a       	sub	r14, r18
     a56:	f3 0a       	sbc	r15, r19
     a58:	04 0b       	sbc	r16, r20
     a5a:	15 0b       	sbc	r17, r21
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <__floatsisf+0x68>
     a5e:	79 01       	movw	r14, r18
     a60:	8a 01       	movw	r16, r20
     a62:	8e e1       	ldi	r24, 0x1E	; 30
     a64:	c8 2e       	mov	r12, r24
     a66:	d1 2c       	mov	r13, r1
     a68:	dc 82       	std	Y+4, r13	; 0x04
     a6a:	cb 82       	std	Y+3, r12	; 0x03
     a6c:	ed 82       	std	Y+5, r14	; 0x05
     a6e:	fe 82       	std	Y+6, r15	; 0x06
     a70:	0f 83       	std	Y+7, r16	; 0x07
     a72:	18 87       	std	Y+8, r17	; 0x08
     a74:	c8 01       	movw	r24, r16
     a76:	b7 01       	movw	r22, r14
     a78:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__clzsi2>
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	18 16       	cp	r1, r24
     a80:	19 06       	cpc	r1, r25
     a82:	84 f4       	brge	.+32     	; 0xaa4 <__floatsisf+0xaa>
     a84:	08 2e       	mov	r0, r24
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__floatsisf+0x96>
     a88:	ee 0c       	add	r14, r14
     a8a:	ff 1c       	adc	r15, r15
     a8c:	00 1f       	adc	r16, r16
     a8e:	11 1f       	adc	r17, r17
     a90:	0a 94       	dec	r0
     a92:	d2 f7       	brpl	.-12     	; 0xa88 <__floatsisf+0x8e>
     a94:	ed 82       	std	Y+5, r14	; 0x05
     a96:	fe 82       	std	Y+6, r15	; 0x06
     a98:	0f 83       	std	Y+7, r16	; 0x07
     a9a:	18 87       	std	Y+8, r17	; 0x08
     a9c:	c8 1a       	sub	r12, r24
     a9e:	d9 0a       	sbc	r13, r25
     aa0:	dc 82       	std	Y+4, r13	; 0x04
     aa2:	cb 82       	std	Y+3, r12	; 0x03
     aa4:	ba 82       	std	Y+2, r11	; 0x02
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     aae:	28 96       	adiw	r28, 0x08	; 8
     ab0:	e9 e0       	ldi	r30, 0x09	; 9
     ab2:	0c 94 12 1f 	jmp	0x3e24	; 0x3e24 <__epilogue_restores__+0x12>

00000ab6 <__fixsfsi>:
     ab6:	ac e0       	ldi	r26, 0x0C	; 12
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e1 e6       	ldi	r30, 0x61	; 97
     abc:	f5 e0       	ldi	r31, 0x05	; 5
     abe:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__prologue_saves__+0x20>
     ac2:	69 83       	std	Y+1, r22	; 0x01
     ac4:	7a 83       	std	Y+2, r23	; 0x02
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	be 01       	movw	r22, r28
     ad0:	6b 5f       	subi	r22, 0xFB	; 251
     ad2:	7f 4f       	sbci	r23, 0xFF	; 255
     ad4:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     ad8:	8d 81       	ldd	r24, Y+5	; 0x05
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	61 f1       	breq	.+88     	; 0xb36 <__fixsfsi+0x80>
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	50 f1       	brcs	.+84     	; 0xb36 <__fixsfsi+0x80>
     ae2:	84 30       	cpi	r24, 0x04	; 4
     ae4:	21 f4       	brne	.+8      	; 0xaee <__fixsfsi+0x38>
     ae6:	8e 81       	ldd	r24, Y+6	; 0x06
     ae8:	88 23       	and	r24, r24
     aea:	51 f1       	breq	.+84     	; 0xb40 <__fixsfsi+0x8a>
     aec:	2e c0       	rjmp	.+92     	; 0xb4a <__fixsfsi+0x94>
     aee:	2f 81       	ldd	r18, Y+7	; 0x07
     af0:	38 85       	ldd	r19, Y+8	; 0x08
     af2:	37 fd       	sbrc	r19, 7
     af4:	20 c0       	rjmp	.+64     	; 0xb36 <__fixsfsi+0x80>
     af6:	6e 81       	ldd	r22, Y+6	; 0x06
     af8:	2f 31       	cpi	r18, 0x1F	; 31
     afa:	31 05       	cpc	r19, r1
     afc:	1c f0       	brlt	.+6      	; 0xb04 <__fixsfsi+0x4e>
     afe:	66 23       	and	r22, r22
     b00:	f9 f0       	breq	.+62     	; 0xb40 <__fixsfsi+0x8a>
     b02:	23 c0       	rjmp	.+70     	; 0xb4a <__fixsfsi+0x94>
     b04:	8e e1       	ldi	r24, 0x1E	; 30
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	82 1b       	sub	r24, r18
     b0a:	93 0b       	sbc	r25, r19
     b0c:	29 85       	ldd	r18, Y+9	; 0x09
     b0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     b10:	4b 85       	ldd	r20, Y+11	; 0x0b
     b12:	5c 85       	ldd	r21, Y+12	; 0x0c
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__fixsfsi+0x68>
     b16:	56 95       	lsr	r21
     b18:	47 95       	ror	r20
     b1a:	37 95       	ror	r19
     b1c:	27 95       	ror	r18
     b1e:	8a 95       	dec	r24
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__fixsfsi+0x60>
     b22:	66 23       	and	r22, r22
     b24:	b1 f0       	breq	.+44     	; 0xb52 <__fixsfsi+0x9c>
     b26:	50 95       	com	r21
     b28:	40 95       	com	r20
     b2a:	30 95       	com	r19
     b2c:	21 95       	neg	r18
     b2e:	3f 4f       	sbci	r19, 0xFF	; 255
     b30:	4f 4f       	sbci	r20, 0xFF	; 255
     b32:	5f 4f       	sbci	r21, 0xFF	; 255
     b34:	0e c0       	rjmp	.+28     	; 0xb52 <__fixsfsi+0x9c>
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <__fixsfsi+0x9c>
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	4f ef       	ldi	r20, 0xFF	; 255
     b46:	5f e7       	ldi	r21, 0x7F	; 127
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <__fixsfsi+0x9c>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e8       	ldi	r21, 0x80	; 128
     b52:	b9 01       	movw	r22, r18
     b54:	ca 01       	movw	r24, r20
     b56:	2c 96       	adiw	r28, 0x0c	; 12
     b58:	e2 e0       	ldi	r30, 0x02	; 2
     b5a:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__epilogue_restores__+0x20>

00000b5e <__floatunsisf>:
     b5e:	a8 e0       	ldi	r26, 0x08	; 8
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e5 eb       	ldi	r30, 0xB5	; 181
     b64:	f5 e0       	ldi	r31, 0x05	; 5
     b66:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__prologue_saves__+0x10>
     b6a:	7b 01       	movw	r14, r22
     b6c:	8c 01       	movw	r16, r24
     b6e:	61 15       	cp	r22, r1
     b70:	71 05       	cpc	r23, r1
     b72:	81 05       	cpc	r24, r1
     b74:	91 05       	cpc	r25, r1
     b76:	19 f4       	brne	.+6      	; 0xb7e <__floatunsisf+0x20>
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	60 c0       	rjmp	.+192    	; 0xc3e <__floatunsisf+0xe0>
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	8e e1       	ldi	r24, 0x1E	; 30
     b84:	c8 2e       	mov	r12, r24
     b86:	d1 2c       	mov	r13, r1
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ed 82       	std	Y+5, r14	; 0x05
     b8e:	fe 82       	std	Y+6, r15	; 0x06
     b90:	0f 83       	std	Y+7, r16	; 0x07
     b92:	18 87       	std	Y+8, r17	; 0x08
     b94:	c8 01       	movw	r24, r16
     b96:	b7 01       	movw	r22, r14
     b98:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__clzsi2>
     b9c:	fc 01       	movw	r30, r24
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	f7 ff       	sbrs	r31, 7
     ba2:	3b c0       	rjmp	.+118    	; 0xc1a <__floatunsisf+0xbc>
     ba4:	22 27       	eor	r18, r18
     ba6:	33 27       	eor	r19, r19
     ba8:	2e 1b       	sub	r18, r30
     baa:	3f 0b       	sbc	r19, r31
     bac:	57 01       	movw	r10, r14
     bae:	68 01       	movw	r12, r16
     bb0:	02 2e       	mov	r0, r18
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__floatunsisf+0x5e>
     bb4:	d6 94       	lsr	r13
     bb6:	c7 94       	ror	r12
     bb8:	b7 94       	ror	r11
     bba:	a7 94       	ror	r10
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__floatunsisf+0x56>
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <__floatunsisf+0x7c>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	2a 95       	dec	r18
     bdc:	d2 f7       	brpl	.-12     	; 0xbd2 <__floatunsisf+0x74>
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	8e 21       	and	r24, r14
     be6:	9f 21       	and	r25, r15
     be8:	a0 23       	and	r26, r16
     bea:	b1 23       	and	r27, r17
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	21 f0       	breq	.+8      	; 0xbfc <__floatunsisf+0x9e>
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	4a 29       	or	r20, r10
     bfe:	5b 29       	or	r21, r11
     c00:	6c 29       	or	r22, r12
     c02:	7d 29       	or	r23, r13
     c04:	4d 83       	std	Y+5, r20	; 0x05
     c06:	5e 83       	std	Y+6, r21	; 0x06
     c08:	6f 83       	std	Y+7, r22	; 0x07
     c0a:	78 87       	std	Y+8, r23	; 0x08
     c0c:	8e e1       	ldi	r24, 0x1E	; 30
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	8e 1b       	sub	r24, r30
     c12:	9f 0b       	sbc	r25, r31
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
     c18:	12 c0       	rjmp	.+36     	; 0xc3e <__floatunsisf+0xe0>
     c1a:	30 97       	sbiw	r30, 0x00	; 0
     c1c:	81 f0       	breq	.+32     	; 0xc3e <__floatunsisf+0xe0>
     c1e:	0e 2e       	mov	r0, r30
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__floatunsisf+0xcc>
     c22:	ee 0c       	add	r14, r14
     c24:	ff 1c       	adc	r15, r15
     c26:	00 1f       	adc	r16, r16
     c28:	11 1f       	adc	r17, r17
     c2a:	0a 94       	dec	r0
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__floatunsisf+0xc4>
     c2e:	ed 82       	std	Y+5, r14	; 0x05
     c30:	fe 82       	std	Y+6, r15	; 0x06
     c32:	0f 83       	std	Y+7, r16	; 0x07
     c34:	18 87       	std	Y+8, r17	; 0x08
     c36:	ce 1a       	sub	r12, r30
     c38:	df 0a       	sbc	r13, r31
     c3a:	dc 82       	std	Y+4, r13	; 0x04
     c3c:	cb 82       	std	Y+3, r12	; 0x03
     c3e:	1a 82       	std	Y+2, r1	; 0x02
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     c48:	28 96       	adiw	r28, 0x08	; 8
     c4a:	ea e0       	ldi	r30, 0x0A	; 10
     c4c:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__+0x10>

00000c50 <__ashldi3>:
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	60 97       	sbiw	r28, 0x10	; 16
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	a8 2f       	mov	r26, r24
     c6c:	00 23       	and	r16, r16
     c6e:	09 f4       	brne	.+2      	; 0xc72 <__ashldi3+0x22>
     c70:	61 c0       	rjmp	.+194    	; 0xd34 <__ashldi3+0xe4>
     c72:	7e 01       	movw	r14, r28
     c74:	08 94       	sec
     c76:	e1 1c       	adc	r14, r1
     c78:	f1 1c       	adc	r15, r1
     c7a:	88 e0       	ldi	r24, 0x08	; 8
     c7c:	f7 01       	movw	r30, r14
     c7e:	11 92       	st	Z+, r1
     c80:	8a 95       	dec	r24
     c82:	e9 f7       	brne	.-6      	; 0xc7e <__ashldi3+0x2e>
     c84:	29 83       	std	Y+1, r18	; 0x01
     c86:	3a 83       	std	Y+2, r19	; 0x02
     c88:	4b 83       	std	Y+3, r20	; 0x03
     c8a:	5c 83       	std	Y+4, r21	; 0x04
     c8c:	6d 83       	std	Y+5, r22	; 0x05
     c8e:	7e 83       	std	Y+6, r23	; 0x06
     c90:	af 83       	std	Y+7, r26	; 0x07
     c92:	98 87       	std	Y+8, r25	; 0x08
     c94:	80 e2       	ldi	r24, 0x20	; 32
     c96:	80 1b       	sub	r24, r16
     c98:	e8 2f       	mov	r30, r24
     c9a:	ff 27       	eor	r31, r31
     c9c:	e7 fd       	sbrc	r30, 7
     c9e:	f0 95       	com	r31
     ca0:	49 81       	ldd	r20, Y+1	; 0x01
     ca2:	5a 81       	ldd	r21, Y+2	; 0x02
     ca4:	6b 81       	ldd	r22, Y+3	; 0x03
     ca6:	7c 81       	ldd	r23, Y+4	; 0x04
     ca8:	18 16       	cp	r1, r24
     caa:	84 f0       	brlt	.+32     	; 0xccc <__ashldi3+0x7c>
     cac:	19 86       	std	Y+9, r1	; 0x09
     cae:	1a 86       	std	Y+10, r1	; 0x0a
     cb0:	1b 86       	std	Y+11, r1	; 0x0b
     cb2:	1c 86       	std	Y+12, r1	; 0x0c
     cb4:	88 27       	eor	r24, r24
     cb6:	99 27       	eor	r25, r25
     cb8:	8e 1b       	sub	r24, r30
     cba:	9f 0b       	sbc	r25, r31
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <__ashldi3+0x76>
     cbe:	44 0f       	add	r20, r20
     cc0:	55 1f       	adc	r21, r21
     cc2:	66 1f       	adc	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	8a 95       	dec	r24
     cc8:	d2 f7       	brpl	.-12     	; 0xcbe <__ashldi3+0x6e>
     cca:	28 c0       	rjmp	.+80     	; 0xd1c <__ashldi3+0xcc>
     ccc:	20 2f       	mov	r18, r16
     cce:	33 27       	eor	r19, r19
     cd0:	27 fd       	sbrc	r18, 7
     cd2:	30 95       	com	r19
     cd4:	db 01       	movw	r26, r22
     cd6:	ca 01       	movw	r24, r20
     cd8:	02 2e       	mov	r0, r18
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__ashldi3+0x94>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	aa 1f       	adc	r26, r26
     ce2:	bb 1f       	adc	r27, r27
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__ashldi3+0x8c>
     ce8:	89 87       	std	Y+9, r24	; 0x09
     cea:	9a 87       	std	Y+10, r25	; 0x0a
     cec:	ab 87       	std	Y+11, r26	; 0x0b
     cee:	bc 87       	std	Y+12, r27	; 0x0c
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__ashldi3+0xaa>
     cf2:	76 95       	lsr	r23
     cf4:	67 95       	ror	r22
     cf6:	57 95       	ror	r21
     cf8:	47 95       	ror	r20
     cfa:	ea 95       	dec	r30
     cfc:	d2 f7       	brpl	.-12     	; 0xcf2 <__ashldi3+0xa2>
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	af 81       	ldd	r26, Y+7	; 0x07
     d04:	b8 85       	ldd	r27, Y+8	; 0x08
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <__ashldi3+0xc0>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	aa 1f       	adc	r26, r26
     d0e:	bb 1f       	adc	r27, r27
     d10:	2a 95       	dec	r18
     d12:	d2 f7       	brpl	.-12     	; 0xd08 <__ashldi3+0xb8>
     d14:	48 2b       	or	r20, r24
     d16:	59 2b       	or	r21, r25
     d18:	6a 2b       	or	r22, r26
     d1a:	7b 2b       	or	r23, r27
     d1c:	4d 87       	std	Y+13, r20	; 0x0d
     d1e:	5e 87       	std	Y+14, r21	; 0x0e
     d20:	6f 87       	std	Y+15, r22	; 0x0f
     d22:	78 8b       	std	Y+16, r23	; 0x10
     d24:	29 85       	ldd	r18, Y+9	; 0x09
     d26:	3a 85       	ldd	r19, Y+10	; 0x0a
     d28:	4b 85       	ldd	r20, Y+11	; 0x0b
     d2a:	5c 85       	ldd	r21, Y+12	; 0x0c
     d2c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d2e:	7e 85       	ldd	r23, Y+14	; 0x0e
     d30:	af 85       	ldd	r26, Y+15	; 0x0f
     d32:	98 89       	ldd	r25, Y+16	; 0x10
     d34:	8a 2f       	mov	r24, r26
     d36:	60 96       	adiw	r28, 0x10	; 16
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	08 95       	ret

00000d4e <__clzsi2>:
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	7b 01       	movw	r14, r22
     d58:	8c 01       	movw	r16, r24
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	e8 16       	cp	r14, r24
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	f8 06       	cpc	r15, r24
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	08 07       	cpc	r16, r24
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	18 07       	cpc	r17, r24
     d6a:	88 f4       	brcc	.+34     	; 0xd8e <__clzsi2+0x40>
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	e8 16       	cp	r14, r24
     d70:	f1 04       	cpc	r15, r1
     d72:	01 05       	cpc	r16, r1
     d74:	11 05       	cpc	r17, r1
     d76:	31 f0       	breq	.+12     	; 0xd84 <__clzsi2+0x36>
     d78:	28 f0       	brcs	.+10     	; 0xd84 <__clzsi2+0x36>
     d7a:	88 e0       	ldi	r24, 0x08	; 8
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	a0 e0       	ldi	r26, 0x00	; 0
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	17 c0       	rjmp	.+46     	; 0xdb2 <__clzsi2+0x64>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a0 e0       	ldi	r26, 0x00	; 0
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	12 c0       	rjmp	.+36     	; 0xdb2 <__clzsi2+0x64>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	e8 16       	cp	r14, r24
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	f8 06       	cpc	r15, r24
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	08 07       	cpc	r16, r24
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	18 07       	cpc	r17, r24
     d9e:	28 f0       	brcs	.+10     	; 0xdaa <__clzsi2+0x5c>
     da0:	88 e1       	ldi	r24, 0x18	; 24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	a0 e0       	ldi	r26, 0x00	; 0
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <__clzsi2+0x64>
     daa:	80 e1       	ldi	r24, 0x10	; 16
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	20 e2       	ldi	r18, 0x20	; 32
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	28 1b       	sub	r18, r24
     dbc:	39 0b       	sbc	r19, r25
     dbe:	4a 0b       	sbc	r20, r26
     dc0:	5b 0b       	sbc	r21, r27
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__clzsi2+0x7e>
     dc4:	16 95       	lsr	r17
     dc6:	07 95       	ror	r16
     dc8:	f7 94       	ror	r15
     dca:	e7 94       	ror	r14
     dcc:	8a 95       	dec	r24
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__clzsi2+0x76>
     dd0:	f7 01       	movw	r30, r14
     dd2:	e8 59       	subi	r30, 0x98	; 152
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 81       	ld	r24, Z
     dd8:	28 1b       	sub	r18, r24
     dda:	31 09       	sbc	r19, r1
     ddc:	41 09       	sbc	r20, r1
     dde:	51 09       	sbc	r21, r1
     de0:	c9 01       	movw	r24, r18
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	08 95       	ret

00000dec <__pack_f>:
     dec:	df 92       	push	r13
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	fc 01       	movw	r30, r24
     df8:	e4 80       	ldd	r14, Z+4	; 0x04
     dfa:	f5 80       	ldd	r15, Z+5	; 0x05
     dfc:	06 81       	ldd	r16, Z+6	; 0x06
     dfe:	17 81       	ldd	r17, Z+7	; 0x07
     e00:	d1 80       	ldd	r13, Z+1	; 0x01
     e02:	80 81       	ld	r24, Z
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	48 f4       	brcc	.+18     	; 0xe1a <__pack_f+0x2e>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e1       	ldi	r26, 0x10	; 16
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 2a       	or	r14, r24
     e12:	f9 2a       	or	r15, r25
     e14:	0a 2b       	or	r16, r26
     e16:	1b 2b       	or	r17, r27
     e18:	a5 c0       	rjmp	.+330    	; 0xf64 <__pack_f+0x178>
     e1a:	84 30       	cpi	r24, 0x04	; 4
     e1c:	09 f4       	brne	.+2      	; 0xe20 <__pack_f+0x34>
     e1e:	9f c0       	rjmp	.+318    	; 0xf5e <__pack_f+0x172>
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	21 f4       	brne	.+8      	; 0xe2c <__pack_f+0x40>
     e24:	ee 24       	eor	r14, r14
     e26:	ff 24       	eor	r15, r15
     e28:	87 01       	movw	r16, r14
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <__pack_f+0x4a>
     e2c:	e1 14       	cp	r14, r1
     e2e:	f1 04       	cpc	r15, r1
     e30:	01 05       	cpc	r16, r1
     e32:	11 05       	cpc	r17, r1
     e34:	19 f4       	brne	.+6      	; 0xe3c <__pack_f+0x50>
     e36:	e0 e0       	ldi	r30, 0x00	; 0
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	96 c0       	rjmp	.+300    	; 0xf68 <__pack_f+0x17c>
     e3c:	62 81       	ldd	r22, Z+2	; 0x02
     e3e:	73 81       	ldd	r23, Z+3	; 0x03
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	62 38       	cpi	r22, 0x82	; 130
     e44:	79 07       	cpc	r23, r25
     e46:	0c f0       	brlt	.+2      	; 0xe4a <__pack_f+0x5e>
     e48:	5b c0       	rjmp	.+182    	; 0xf00 <__pack_f+0x114>
     e4a:	22 e8       	ldi	r18, 0x82	; 130
     e4c:	3f ef       	ldi	r19, 0xFF	; 255
     e4e:	26 1b       	sub	r18, r22
     e50:	37 0b       	sbc	r19, r23
     e52:	2a 31       	cpi	r18, 0x1A	; 26
     e54:	31 05       	cpc	r19, r1
     e56:	2c f0       	brlt	.+10     	; 0xe62 <__pack_f+0x76>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	2a c0       	rjmp	.+84     	; 0xeb6 <__pack_f+0xca>
     e62:	b8 01       	movw	r22, r16
     e64:	a7 01       	movw	r20, r14
     e66:	02 2e       	mov	r0, r18
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <__pack_f+0x86>
     e6a:	76 95       	lsr	r23
     e6c:	67 95       	ror	r22
     e6e:	57 95       	ror	r21
     e70:	47 95       	ror	r20
     e72:	0a 94       	dec	r0
     e74:	d2 f7       	brpl	.-12     	; 0xe6a <__pack_f+0x7e>
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <__pack_f+0x9c>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	aa 1f       	adc	r26, r26
     e86:	bb 1f       	adc	r27, r27
     e88:	2a 95       	dec	r18
     e8a:	d2 f7       	brpl	.-12     	; 0xe80 <__pack_f+0x94>
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	a1 09       	sbc	r26, r1
     e90:	b1 09       	sbc	r27, r1
     e92:	8e 21       	and	r24, r14
     e94:	9f 21       	and	r25, r15
     e96:	a0 23       	and	r26, r16
     e98:	b1 23       	and	r27, r17
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	a1 05       	cpc	r26, r1
     e9e:	b1 05       	cpc	r27, r1
     ea0:	21 f0       	breq	.+8      	; 0xeaa <__pack_f+0xbe>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	9a 01       	movw	r18, r20
     eac:	ab 01       	movw	r20, r22
     eae:	28 2b       	or	r18, r24
     eb0:	39 2b       	or	r19, r25
     eb2:	4a 2b       	or	r20, r26
     eb4:	5b 2b       	or	r21, r27
     eb6:	da 01       	movw	r26, r20
     eb8:	c9 01       	movw	r24, r18
     eba:	8f 77       	andi	r24, 0x7F	; 127
     ebc:	90 70       	andi	r25, 0x00	; 0
     ebe:	a0 70       	andi	r26, 0x00	; 0
     ec0:	b0 70       	andi	r27, 0x00	; 0
     ec2:	80 34       	cpi	r24, 0x40	; 64
     ec4:	91 05       	cpc	r25, r1
     ec6:	a1 05       	cpc	r26, r1
     ec8:	b1 05       	cpc	r27, r1
     eca:	39 f4       	brne	.+14     	; 0xeda <__pack_f+0xee>
     ecc:	27 ff       	sbrs	r18, 7
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <__pack_f+0xf6>
     ed0:	20 5c       	subi	r18, 0xC0	; 192
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	4f 4f       	sbci	r20, 0xFF	; 255
     ed6:	5f 4f       	sbci	r21, 0xFF	; 255
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <__pack_f+0xf6>
     eda:	21 5c       	subi	r18, 0xC1	; 193
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	4f 4f       	sbci	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	e0 e0       	ldi	r30, 0x00	; 0
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	20 30       	cpi	r18, 0x00	; 0
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	3a 07       	cpc	r19, r26
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	4a 07       	cpc	r20, r26
     ef0:	a0 e4       	ldi	r26, 0x40	; 64
     ef2:	5a 07       	cpc	r21, r26
     ef4:	10 f0       	brcs	.+4      	; 0xefa <__pack_f+0x10e>
     ef6:	e1 e0       	ldi	r30, 0x01	; 1
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	79 01       	movw	r14, r18
     efc:	8a 01       	movw	r16, r20
     efe:	27 c0       	rjmp	.+78     	; 0xf4e <__pack_f+0x162>
     f00:	60 38       	cpi	r22, 0x80	; 128
     f02:	71 05       	cpc	r23, r1
     f04:	64 f5       	brge	.+88     	; 0xf5e <__pack_f+0x172>
     f06:	fb 01       	movw	r30, r22
     f08:	e1 58       	subi	r30, 0x81	; 129
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	d8 01       	movw	r26, r16
     f0e:	c7 01       	movw	r24, r14
     f10:	8f 77       	andi	r24, 0x7F	; 127
     f12:	90 70       	andi	r25, 0x00	; 0
     f14:	a0 70       	andi	r26, 0x00	; 0
     f16:	b0 70       	andi	r27, 0x00	; 0
     f18:	80 34       	cpi	r24, 0x40	; 64
     f1a:	91 05       	cpc	r25, r1
     f1c:	a1 05       	cpc	r26, r1
     f1e:	b1 05       	cpc	r27, r1
     f20:	39 f4       	brne	.+14     	; 0xf30 <__pack_f+0x144>
     f22:	e7 fe       	sbrs	r14, 7
     f24:	0d c0       	rjmp	.+26     	; 0xf40 <__pack_f+0x154>
     f26:	80 e4       	ldi	r24, 0x40	; 64
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <__pack_f+0x14c>
     f30:	8f e3       	ldi	r24, 0x3F	; 63
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	a0 e0       	ldi	r26, 0x00	; 0
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e8 0e       	add	r14, r24
     f3a:	f9 1e       	adc	r15, r25
     f3c:	0a 1f       	adc	r16, r26
     f3e:	1b 1f       	adc	r17, r27
     f40:	17 ff       	sbrs	r17, 7
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <__pack_f+0x162>
     f44:	16 95       	lsr	r17
     f46:	07 95       	ror	r16
     f48:	f7 94       	ror	r15
     f4a:	e7 94       	ror	r14
     f4c:	31 96       	adiw	r30, 0x01	; 1
     f4e:	87 e0       	ldi	r24, 0x07	; 7
     f50:	16 95       	lsr	r17
     f52:	07 95       	ror	r16
     f54:	f7 94       	ror	r15
     f56:	e7 94       	ror	r14
     f58:	8a 95       	dec	r24
     f5a:	d1 f7       	brne	.-12     	; 0xf50 <__pack_f+0x164>
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <__pack_f+0x17c>
     f5e:	ee 24       	eor	r14, r14
     f60:	ff 24       	eor	r15, r15
     f62:	87 01       	movw	r16, r14
     f64:	ef ef       	ldi	r30, 0xFF	; 255
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	6e 2f       	mov	r22, r30
     f6a:	67 95       	ror	r22
     f6c:	66 27       	eor	r22, r22
     f6e:	67 95       	ror	r22
     f70:	90 2f       	mov	r25, r16
     f72:	9f 77       	andi	r25, 0x7F	; 127
     f74:	d7 94       	ror	r13
     f76:	dd 24       	eor	r13, r13
     f78:	d7 94       	ror	r13
     f7a:	8e 2f       	mov	r24, r30
     f7c:	86 95       	lsr	r24
     f7e:	49 2f       	mov	r20, r25
     f80:	46 2b       	or	r20, r22
     f82:	58 2f       	mov	r21, r24
     f84:	5d 29       	or	r21, r13
     f86:	b7 01       	movw	r22, r14
     f88:	ca 01       	movw	r24, r20
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	df 90       	pop	r13
     f94:	08 95       	ret

00000f96 <__unpack_f>:
     f96:	fc 01       	movw	r30, r24
     f98:	db 01       	movw	r26, r22
     f9a:	40 81       	ld	r20, Z
     f9c:	51 81       	ldd	r21, Z+1	; 0x01
     f9e:	22 81       	ldd	r18, Z+2	; 0x02
     fa0:	62 2f       	mov	r22, r18
     fa2:	6f 77       	andi	r22, 0x7F	; 127
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	22 1f       	adc	r18, r18
     fa8:	22 27       	eor	r18, r18
     faa:	22 1f       	adc	r18, r18
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	89 2f       	mov	r24, r25
     fb0:	88 0f       	add	r24, r24
     fb2:	82 2b       	or	r24, r18
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	99 1f       	adc	r25, r25
     fba:	99 27       	eor	r25, r25
     fbc:	99 1f       	adc	r25, r25
     fbe:	11 96       	adiw	r26, 0x01	; 1
     fc0:	9c 93       	st	X, r25
     fc2:	11 97       	sbiw	r26, 0x01	; 1
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	a9 f5       	brne	.+106    	; 0x1034 <__unpack_f+0x9e>
     fca:	41 15       	cp	r20, r1
     fcc:	51 05       	cpc	r21, r1
     fce:	61 05       	cpc	r22, r1
     fd0:	71 05       	cpc	r23, r1
     fd2:	11 f4       	brne	.+4      	; 0xfd8 <__unpack_f+0x42>
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	37 c0       	rjmp	.+110    	; 0x1046 <__unpack_f+0xb0>
     fd8:	82 e8       	ldi	r24, 0x82	; 130
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	13 96       	adiw	r26, 0x03	; 3
     fde:	9c 93       	st	X, r25
     fe0:	8e 93       	st	-X, r24
     fe2:	12 97       	sbiw	r26, 0x02	; 2
     fe4:	9a 01       	movw	r18, r20
     fe6:	ab 01       	movw	r20, r22
     fe8:	67 e0       	ldi	r22, 0x07	; 7
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	44 1f       	adc	r20, r20
     ff0:	55 1f       	adc	r21, r21
     ff2:	6a 95       	dec	r22
     ff4:	d1 f7       	brne	.-12     	; 0xfea <__unpack_f+0x54>
     ff6:	83 e0       	ldi	r24, 0x03	; 3
     ff8:	8c 93       	st	X, r24
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <__unpack_f+0x80>
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	44 1f       	adc	r20, r20
    1002:	55 1f       	adc	r21, r21
    1004:	12 96       	adiw	r26, 0x02	; 2
    1006:	8d 91       	ld	r24, X+
    1008:	9c 91       	ld	r25, X
    100a:	13 97       	sbiw	r26, 0x03	; 3
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	13 96       	adiw	r26, 0x03	; 3
    1010:	9c 93       	st	X, r25
    1012:	8e 93       	st	-X, r24
    1014:	12 97       	sbiw	r26, 0x02	; 2
    1016:	20 30       	cpi	r18, 0x00	; 0
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	38 07       	cpc	r19, r24
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	48 07       	cpc	r20, r24
    1020:	80 e4       	ldi	r24, 0x40	; 64
    1022:	58 07       	cpc	r21, r24
    1024:	58 f3       	brcs	.-42     	; 0xffc <__unpack_f+0x66>
    1026:	14 96       	adiw	r26, 0x04	; 4
    1028:	2d 93       	st	X+, r18
    102a:	3d 93       	st	X+, r19
    102c:	4d 93       	st	X+, r20
    102e:	5c 93       	st	X, r21
    1030:	17 97       	sbiw	r26, 0x07	; 7
    1032:	08 95       	ret
    1034:	2f 3f       	cpi	r18, 0xFF	; 255
    1036:	31 05       	cpc	r19, r1
    1038:	79 f4       	brne	.+30     	; 0x1058 <__unpack_f+0xc2>
    103a:	41 15       	cp	r20, r1
    103c:	51 05       	cpc	r21, r1
    103e:	61 05       	cpc	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	19 f4       	brne	.+6      	; 0x104a <__unpack_f+0xb4>
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	8c 93       	st	X, r24
    1048:	08 95       	ret
    104a:	64 ff       	sbrs	r22, 4
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <__unpack_f+0xbe>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	8c 93       	st	X, r24
    1052:	12 c0       	rjmp	.+36     	; 0x1078 <__unpack_f+0xe2>
    1054:	1c 92       	st	X, r1
    1056:	10 c0       	rjmp	.+32     	; 0x1078 <__unpack_f+0xe2>
    1058:	2f 57       	subi	r18, 0x7F	; 127
    105a:	30 40       	sbci	r19, 0x00	; 0
    105c:	13 96       	adiw	r26, 0x03	; 3
    105e:	3c 93       	st	X, r19
    1060:	2e 93       	st	-X, r18
    1062:	12 97       	sbiw	r26, 0x02	; 2
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	8c 93       	st	X, r24
    1068:	87 e0       	ldi	r24, 0x07	; 7
    106a:	44 0f       	add	r20, r20
    106c:	55 1f       	adc	r21, r21
    106e:	66 1f       	adc	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	8a 95       	dec	r24
    1074:	d1 f7       	brne	.-12     	; 0x106a <__unpack_f+0xd4>
    1076:	70 64       	ori	r23, 0x40	; 64
    1078:	14 96       	adiw	r26, 0x04	; 4
    107a:	4d 93       	st	X+, r20
    107c:	5d 93       	st	X+, r21
    107e:	6d 93       	st	X+, r22
    1080:	7c 93       	st	X, r23
    1082:	17 97       	sbiw	r26, 0x07	; 7
    1084:	08 95       	ret

00001086 <__fpcmp_parts_f>:
    1086:	1f 93       	push	r17
    1088:	dc 01       	movw	r26, r24
    108a:	fb 01       	movw	r30, r22
    108c:	9c 91       	ld	r25, X
    108e:	92 30       	cpi	r25, 0x02	; 2
    1090:	08 f4       	brcc	.+2      	; 0x1094 <__fpcmp_parts_f+0xe>
    1092:	47 c0       	rjmp	.+142    	; 0x1122 <__fpcmp_parts_f+0x9c>
    1094:	80 81       	ld	r24, Z
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	08 f4       	brcc	.+2      	; 0x109c <__fpcmp_parts_f+0x16>
    109a:	43 c0       	rjmp	.+134    	; 0x1122 <__fpcmp_parts_f+0x9c>
    109c:	94 30       	cpi	r25, 0x04	; 4
    109e:	51 f4       	brne	.+20     	; 0x10b4 <__fpcmp_parts_f+0x2e>
    10a0:	11 96       	adiw	r26, 0x01	; 1
    10a2:	1c 91       	ld	r17, X
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	99 f5       	brne	.+102    	; 0x110e <__fpcmp_parts_f+0x88>
    10a8:	81 81       	ldd	r24, Z+1	; 0x01
    10aa:	68 2f       	mov	r22, r24
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	61 1b       	sub	r22, r17
    10b0:	71 09       	sbc	r23, r1
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <__fpcmp_parts_f+0xac>
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	21 f0       	breq	.+8      	; 0x10c0 <__fpcmp_parts_f+0x3a>
    10b8:	92 30       	cpi	r25, 0x02	; 2
    10ba:	31 f4       	brne	.+12     	; 0x10c8 <__fpcmp_parts_f+0x42>
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	b9 f1       	breq	.+110    	; 0x112e <__fpcmp_parts_f+0xa8>
    10c0:	81 81       	ldd	r24, Z+1	; 0x01
    10c2:	88 23       	and	r24, r24
    10c4:	89 f1       	breq	.+98     	; 0x1128 <__fpcmp_parts_f+0xa2>
    10c6:	2d c0       	rjmp	.+90     	; 0x1122 <__fpcmp_parts_f+0x9c>
    10c8:	11 96       	adiw	r26, 0x01	; 1
    10ca:	1c 91       	ld	r17, X
    10cc:	11 97       	sbiw	r26, 0x01	; 1
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	f1 f0       	breq	.+60     	; 0x110e <__fpcmp_parts_f+0x88>
    10d2:	81 81       	ldd	r24, Z+1	; 0x01
    10d4:	18 17       	cp	r17, r24
    10d6:	d9 f4       	brne	.+54     	; 0x110e <__fpcmp_parts_f+0x88>
    10d8:	12 96       	adiw	r26, 0x02	; 2
    10da:	2d 91       	ld	r18, X+
    10dc:	3c 91       	ld	r19, X
    10de:	13 97       	sbiw	r26, 0x03	; 3
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	82 17       	cp	r24, r18
    10e6:	93 07       	cpc	r25, r19
    10e8:	94 f0       	brlt	.+36     	; 0x110e <__fpcmp_parts_f+0x88>
    10ea:	28 17       	cp	r18, r24
    10ec:	39 07       	cpc	r19, r25
    10ee:	bc f0       	brlt	.+46     	; 0x111e <__fpcmp_parts_f+0x98>
    10f0:	14 96       	adiw	r26, 0x04	; 4
    10f2:	8d 91       	ld	r24, X+
    10f4:	9d 91       	ld	r25, X+
    10f6:	0d 90       	ld	r0, X+
    10f8:	bc 91       	ld	r27, X
    10fa:	a0 2d       	mov	r26, r0
    10fc:	24 81       	ldd	r18, Z+4	; 0x04
    10fe:	35 81       	ldd	r19, Z+5	; 0x05
    1100:	46 81       	ldd	r20, Z+6	; 0x06
    1102:	57 81       	ldd	r21, Z+7	; 0x07
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	4a 07       	cpc	r20, r26
    110a:	5b 07       	cpc	r21, r27
    110c:	18 f4       	brcc	.+6      	; 0x1114 <__fpcmp_parts_f+0x8e>
    110e:	11 23       	and	r17, r17
    1110:	41 f0       	breq	.+16     	; 0x1122 <__fpcmp_parts_f+0x9c>
    1112:	0a c0       	rjmp	.+20     	; 0x1128 <__fpcmp_parts_f+0xa2>
    1114:	82 17       	cp	r24, r18
    1116:	93 07       	cpc	r25, r19
    1118:	a4 07       	cpc	r26, r20
    111a:	b5 07       	cpc	r27, r21
    111c:	40 f4       	brcc	.+16     	; 0x112e <__fpcmp_parts_f+0xa8>
    111e:	11 23       	and	r17, r17
    1120:	19 f0       	breq	.+6      	; 0x1128 <__fpcmp_parts_f+0xa2>
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <__fpcmp_parts_f+0xac>
    1128:	6f ef       	ldi	r22, 0xFF	; 255
    112a:	7f ef       	ldi	r23, 0xFF	; 255
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <__fpcmp_parts_f+0xac>
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	cb 01       	movw	r24, r22
    1134:	1f 91       	pop	r17
    1136:	08 95       	ret

00001138 <H7SEG_voidWrite>:
#include "MDIO_registers.h"
#include "H7SEG_interface.h"
#include "H7SEG_private.h"
#include "H7SEG_config.h"

void  H7SEG_voidWrite(u8 num, u8 SEG7_PORT){
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <H7SEG_voidWrite+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <H7SEG_voidWrite+0x8>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	8b 83       	std	Y+3, r24	; 0x03
    1148:	6c 83       	std	Y+4, r22	; 0x04

	num = u8MappValue(num);
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <u8MappValue>
    1150:	8b 83       	std	Y+3, r24	; 0x03
	u8 tempVal  = 	num & 0x7F;
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	8f 77       	andi	r24, 0x7F	; 127
    1156:	89 83       	std	Y+1, r24	; 0x01
		//0B0XXXXXXX
		u8 tempbit  ;
		MDIO_ErrorS_GetPinValue(DIO_PORTA,DIO_PIN7,&tempbit);
    1158:	9e 01       	movw	r18, r28
    115a:	2e 5f       	subi	r18, 0xFE	; 254
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	67 e0       	ldi	r22, 0x07	; 7
    1162:	a9 01       	movw	r20, r18
    1164:	0e 94 56 17 	call	0x2eac	; 0x2eac <MDIO_ErrorS_GetPinValue>
		tempbit = ! tempbit;
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	1d 82       	std	Y+5, r1	; 0x05
    116c:	88 23       	and	r24, r24
    116e:	11 f4       	brne	.+4      	; 0x1174 <H7SEG_voidWrite+0x3c>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	8d 83       	std	Y+5, r24	; 0x05
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	8a 83       	std	Y+2, r24	; 0x02
		tempbit = (tempbit<<7);
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	87 95       	ror	r24
    117c:	88 27       	eor	r24, r24
    117e:	87 95       	ror	r24
    1180:	8a 83       	std	Y+2, r24	; 0x02

		tempVal 	|= 	tempbit;
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	89 2b       	or	r24, r25
    1188:	89 83       	std	Y+1, r24	; 0x01
	MDIO_ErrorS_SetPortValue(SEG7_PORT,~tempVal);
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	98 2f       	mov	r25, r24
    118e:	90 95       	com	r25
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	69 2f       	mov	r22, r25
    1194:	0e 94 e7 17 	call	0x2fce	; 0x2fce <MDIO_ErrorS_SetPortValue>
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <H7SEG_voidClear>:
void H7SEG_voidClear( u8 SEG7_PORT){
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	89 83       	std	Y+1, r24	; 0x01
	MDIO_ErrorS_SetPortValue(SEG7_PORT,0xff);
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	6f ef       	ldi	r22, 0xFF	; 255
    11b8:	0e 94 e7 17 	call	0x2fce	; 0x2fce <MDIO_ErrorS_SetPortValue>
}
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <u8MappValue>:

u8 u8MappValue(u8 num){
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	60 97       	sbiw	r28, 0x10	; 16
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	8b 87       	std	Y+11, r24	; 0x0b
	u8 values[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	9d 87       	std	Y+13, r25	; 0x0d
    11e0:	8c 87       	std	Y+12, r24	; 0x0c
    11e2:	ea e6       	ldi	r30, 0x6A	; 106
    11e4:	f1 e0       	ldi	r31, 0x01	; 1
    11e6:	ff 87       	std	Y+15, r31	; 0x0f
    11e8:	ee 87       	std	Y+14, r30	; 0x0e
    11ea:	fa e0       	ldi	r31, 0x0A	; 10
    11ec:	f8 8b       	std	Y+16, r31	; 0x10
    11ee:	ee 85       	ldd	r30, Y+14	; 0x0e
    11f0:	ff 85       	ldd	r31, Y+15	; 0x0f
    11f2:	00 80       	ld	r0, Z
    11f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    11f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	9f 87       	std	Y+15, r25	; 0x0f
    11fc:	8e 87       	std	Y+14, r24	; 0x0e
    11fe:	ec 85       	ldd	r30, Y+12	; 0x0c
    1200:	fd 85       	ldd	r31, Y+13	; 0x0d
    1202:	00 82       	st	Z, r0
    1204:	8c 85       	ldd	r24, Y+12	; 0x0c
    1206:	9d 85       	ldd	r25, Y+13	; 0x0d
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	9d 87       	std	Y+13, r25	; 0x0d
    120c:	8c 87       	std	Y+12, r24	; 0x0c
    120e:	98 89       	ldd	r25, Y+16	; 0x10
    1210:	91 50       	subi	r25, 0x01	; 1
    1212:	98 8b       	std	Y+16, r25	; 0x10
    1214:	e8 89       	ldd	r30, Y+16	; 0x10
    1216:	ee 23       	and	r30, r30
    1218:	51 f7       	brne	.-44     	; 0x11ee <u8MappValue+0x2a>
	return values[num];
    121a:	8b 85       	ldd	r24, Y+11	; 0x0b
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	fc 01       	movw	r30, r24
    1226:	e2 0f       	add	r30, r18
    1228:	f3 1f       	adc	r31, r19
    122a:	80 81       	ld	r24, Z
}
    122c:	60 96       	adiw	r28, 0x10	; 16
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <HLED_ErrorState_LEDOn>:
#include "MDIO_interface.h"
#include "HLED_interface.h"
#include "HLED_private.h"
#include "HLED_config.h"

Error_State_t HLED_ErrorState_LEDOn(u8 copy_u8LED_num){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <HLED_ErrorState_LEDOn+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <HLED_ErrorState_LEDOn+0x8>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	8a 83       	std	Y+2, r24	; 0x02
	Error_State_t errorState = return_Ok;
    124c:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8LED_num){
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3c 83       	std	Y+4, r19	; 0x04
    1256:	2b 83       	std	Y+3, r18	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	80 31       	cpi	r24, 0x10	; 16
    125e:	91 05       	cpc	r25, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <HLED_ErrorState_LEDOn+0x26>
    1262:	1c c1       	rjmp	.+568    	; 0x149c <HLED_ErrorState_LEDOn+0x25e>
    1264:	2b 81       	ldd	r18, Y+3	; 0x03
    1266:	3c 81       	ldd	r19, Y+4	; 0x04
    1268:	21 31       	cpi	r18, 0x11	; 17
    126a:	31 05       	cpc	r19, r1
    126c:	0c f0       	brlt	.+2      	; 0x1270 <HLED_ErrorState_LEDOn+0x32>
    126e:	5b c0       	rjmp	.+182    	; 0x1326 <HLED_ErrorState_LEDOn+0xe8>
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	88 30       	cpi	r24, 0x08	; 8
    1276:	91 05       	cpc	r25, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <HLED_ErrorState_LEDOn+0x3e>
    127a:	e0 c0       	rjmp	.+448    	; 0x143c <HLED_ErrorState_LEDOn+0x1fe>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	29 30       	cpi	r18, 0x09	; 9
    1282:	31 05       	cpc	r19, r1
    1284:	5c f5       	brge	.+86     	; 0x12dc <HLED_ErrorState_LEDOn+0x9e>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	84 30       	cpi	r24, 0x04	; 4
    128c:	91 05       	cpc	r25, r1
    128e:	09 f4       	brne	.+2      	; 0x1292 <HLED_ErrorState_LEDOn+0x54>
    1290:	bd c0       	rjmp	.+378    	; 0x140c <HLED_ErrorState_LEDOn+0x1ce>
    1292:	2b 81       	ldd	r18, Y+3	; 0x03
    1294:	3c 81       	ldd	r19, Y+4	; 0x04
    1296:	25 30       	cpi	r18, 0x05	; 5
    1298:	31 05       	cpc	r19, r1
    129a:	9c f4       	brge	.+38     	; 0x12c2 <HLED_ErrorState_LEDOn+0x84>
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <HLED_ErrorState_LEDOn+0x6a>
    12a6:	a6 c0       	rjmp	.+332    	; 0x13f4 <HLED_ErrorState_LEDOn+0x1b6>
    12a8:	2b 81       	ldd	r18, Y+3	; 0x03
    12aa:	3c 81       	ldd	r19, Y+4	; 0x04
    12ac:	23 30       	cpi	r18, 0x03	; 3
    12ae:	31 05       	cpc	r19, r1
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <HLED_ErrorState_LEDOn+0x76>
    12b2:	a6 c0       	rjmp	.+332    	; 0x1400 <HLED_ErrorState_LEDOn+0x1c2>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <HLED_ErrorState_LEDOn+0x82>
    12be:	94 c0       	rjmp	.+296    	; 0x13e8 <HLED_ErrorState_LEDOn+0x1aa>
    12c0:	53 c1       	rjmp	.+678    	; 0x1568 <HLED_ErrorState_LEDOn+0x32a>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	26 30       	cpi	r18, 0x06	; 6
    12c8:	31 05       	cpc	r19, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <HLED_ErrorState_LEDOn+0x90>
    12cc:	ab c0       	rjmp	.+342    	; 0x1424 <HLED_ErrorState_LEDOn+0x1e6>
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	87 30       	cpi	r24, 0x07	; 7
    12d4:	91 05       	cpc	r25, r1
    12d6:	0c f0       	brlt	.+2      	; 0x12da <HLED_ErrorState_LEDOn+0x9c>
    12d8:	ab c0       	rjmp	.+342    	; 0x1430 <HLED_ErrorState_LEDOn+0x1f2>
    12da:	9e c0       	rjmp	.+316    	; 0x1418 <HLED_ErrorState_LEDOn+0x1da>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	2c 30       	cpi	r18, 0x0C	; 12
    12e2:	31 05       	cpc	r19, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <HLED_ErrorState_LEDOn+0xaa>
    12e6:	c2 c0       	rjmp	.+388    	; 0x146c <HLED_ErrorState_LEDOn+0x22e>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	8d 30       	cpi	r24, 0x0D	; 13
    12ee:	91 05       	cpc	r25, r1
    12f0:	6c f4       	brge	.+26     	; 0x130c <HLED_ErrorState_LEDOn+0xce>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	2a 30       	cpi	r18, 0x0A	; 10
    12f8:	31 05       	cpc	r19, r1
    12fa:	09 f4       	brne	.+2      	; 0x12fe <HLED_ErrorState_LEDOn+0xc0>
    12fc:	ab c0       	rjmp	.+342    	; 0x1454 <HLED_ErrorState_LEDOn+0x216>
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	8b 30       	cpi	r24, 0x0B	; 11
    1304:	91 05       	cpc	r25, r1
    1306:	0c f0       	brlt	.+2      	; 0x130a <HLED_ErrorState_LEDOn+0xcc>
    1308:	ab c0       	rjmp	.+342    	; 0x1460 <HLED_ErrorState_LEDOn+0x222>
    130a:	9e c0       	rjmp	.+316    	; 0x1448 <HLED_ErrorState_LEDOn+0x20a>
    130c:	2b 81       	ldd	r18, Y+3	; 0x03
    130e:	3c 81       	ldd	r19, Y+4	; 0x04
    1310:	2e 30       	cpi	r18, 0x0E	; 14
    1312:	31 05       	cpc	r19, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <HLED_ErrorState_LEDOn+0xda>
    1316:	b6 c0       	rjmp	.+364    	; 0x1484 <HLED_ErrorState_LEDOn+0x246>
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	8f 30       	cpi	r24, 0x0F	; 15
    131e:	91 05       	cpc	r25, r1
    1320:	0c f0       	brlt	.+2      	; 0x1324 <HLED_ErrorState_LEDOn+0xe6>
    1322:	b6 c0       	rjmp	.+364    	; 0x1490 <HLED_ErrorState_LEDOn+0x252>
    1324:	a9 c0       	rjmp	.+338    	; 0x1478 <HLED_ErrorState_LEDOn+0x23a>
    1326:	2b 81       	ldd	r18, Y+3	; 0x03
    1328:	3c 81       	ldd	r19, Y+4	; 0x04
    132a:	28 31       	cpi	r18, 0x18	; 24
    132c:	31 05       	cpc	r19, r1
    132e:	09 f4       	brne	.+2      	; 0x1332 <HLED_ErrorState_LEDOn+0xf4>
    1330:	e5 c0       	rjmp	.+458    	; 0x14fc <HLED_ErrorState_LEDOn+0x2be>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	89 31       	cpi	r24, 0x19	; 25
    1338:	91 05       	cpc	r25, r1
    133a:	2c f5       	brge	.+74     	; 0x1386 <HLED_ErrorState_LEDOn+0x148>
    133c:	2b 81       	ldd	r18, Y+3	; 0x03
    133e:	3c 81       	ldd	r19, Y+4	; 0x04
    1340:	24 31       	cpi	r18, 0x14	; 20
    1342:	31 05       	cpc	r19, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <HLED_ErrorState_LEDOn+0x10a>
    1346:	c2 c0       	rjmp	.+388    	; 0x14cc <HLED_ErrorState_LEDOn+0x28e>
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	85 31       	cpi	r24, 0x15	; 21
    134e:	91 05       	cpc	r25, r1
    1350:	6c f4       	brge	.+26     	; 0x136c <HLED_ErrorState_LEDOn+0x12e>
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	22 31       	cpi	r18, 0x12	; 18
    1358:	31 05       	cpc	r19, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <HLED_ErrorState_LEDOn+0x120>
    135c:	ab c0       	rjmp	.+342    	; 0x14b4 <HLED_ErrorState_LEDOn+0x276>
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	83 31       	cpi	r24, 0x13	; 19
    1364:	91 05       	cpc	r25, r1
    1366:	0c f0       	brlt	.+2      	; 0x136a <HLED_ErrorState_LEDOn+0x12c>
    1368:	ab c0       	rjmp	.+342    	; 0x14c0 <HLED_ErrorState_LEDOn+0x282>
    136a:	9e c0       	rjmp	.+316    	; 0x14a8 <HLED_ErrorState_LEDOn+0x26a>
    136c:	2b 81       	ldd	r18, Y+3	; 0x03
    136e:	3c 81       	ldd	r19, Y+4	; 0x04
    1370:	26 31       	cpi	r18, 0x16	; 22
    1372:	31 05       	cpc	r19, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <HLED_ErrorState_LEDOn+0x13a>
    1376:	b6 c0       	rjmp	.+364    	; 0x14e4 <HLED_ErrorState_LEDOn+0x2a6>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	87 31       	cpi	r24, 0x17	; 23
    137e:	91 05       	cpc	r25, r1
    1380:	0c f0       	brlt	.+2      	; 0x1384 <HLED_ErrorState_LEDOn+0x146>
    1382:	b6 c0       	rjmp	.+364    	; 0x14f0 <HLED_ErrorState_LEDOn+0x2b2>
    1384:	a9 c0       	rjmp	.+338    	; 0x14d8 <HLED_ErrorState_LEDOn+0x29a>
    1386:	2b 81       	ldd	r18, Y+3	; 0x03
    1388:	3c 81       	ldd	r19, Y+4	; 0x04
    138a:	2c 31       	cpi	r18, 0x1C	; 28
    138c:	31 05       	cpc	r19, r1
    138e:	09 f4       	brne	.+2      	; 0x1392 <HLED_ErrorState_LEDOn+0x154>
    1390:	cd c0       	rjmp	.+410    	; 0x152c <HLED_ErrorState_LEDOn+0x2ee>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	8d 31       	cpi	r24, 0x1D	; 29
    1398:	91 05       	cpc	r25, r1
    139a:	6c f4       	brge	.+26     	; 0x13b6 <HLED_ErrorState_LEDOn+0x178>
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	2a 31       	cpi	r18, 0x1A	; 26
    13a2:	31 05       	cpc	r19, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <HLED_ErrorState_LEDOn+0x16a>
    13a6:	b6 c0       	rjmp	.+364    	; 0x1514 <HLED_ErrorState_LEDOn+0x2d6>
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	8b 31       	cpi	r24, 0x1B	; 27
    13ae:	91 05       	cpc	r25, r1
    13b0:	0c f0       	brlt	.+2      	; 0x13b4 <HLED_ErrorState_LEDOn+0x176>
    13b2:	b6 c0       	rjmp	.+364    	; 0x1520 <HLED_ErrorState_LEDOn+0x2e2>
    13b4:	a9 c0       	rjmp	.+338    	; 0x1508 <HLED_ErrorState_LEDOn+0x2ca>
    13b6:	2b 81       	ldd	r18, Y+3	; 0x03
    13b8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ba:	2e 31       	cpi	r18, 0x1E	; 30
    13bc:	31 05       	cpc	r19, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <HLED_ErrorState_LEDOn+0x184>
    13c0:	c1 c0       	rjmp	.+386    	; 0x1544 <HLED_ErrorState_LEDOn+0x306>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	8e 31       	cpi	r24, 0x1E	; 30
    13c8:	91 05       	cpc	r25, r1
    13ca:	0c f4       	brge	.+2      	; 0x13ce <HLED_ErrorState_LEDOn+0x190>
    13cc:	b5 c0       	rjmp	.+362    	; 0x1538 <HLED_ErrorState_LEDOn+0x2fa>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	2f 31       	cpi	r18, 0x1F	; 31
    13d4:	31 05       	cpc	r19, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <HLED_ErrorState_LEDOn+0x19c>
    13d8:	bb c0       	rjmp	.+374    	; 0x1550 <HLED_ErrorState_LEDOn+0x312>
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	80 32       	cpi	r24, 0x20	; 32
    13e0:	91 05       	cpc	r25, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <HLED_ErrorState_LEDOn+0x1a8>
    13e4:	bb c0       	rjmp	.+374    	; 0x155c <HLED_ErrorState_LEDOn+0x31e>
    13e6:	c0 c0       	rjmp	.+384    	; 0x1568 <HLED_ErrorState_LEDOn+0x32a>
	case HLED_PORTA_P0 :	MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN0, (LED_PORTA_P0_ACTIVE - 1) );	break;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    13f2:	bc c0       	rjmp	.+376    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTA_P1 :	MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN1, (LED_PORTA_P1_ACTIVE - 1) );	break;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    13fe:	b6 c0       	rjmp	.+364    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTA_P2 :	MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN2, (LED_PORTA_P2_ACTIVE - 1) );	break;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	62 e0       	ldi	r22, 0x02	; 2
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    140a:	b0 c0       	rjmp	.+352    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTA_P3 :	MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN3, (LED_PORTA_P3_ACTIVE - 1) );	break;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	63 e0       	ldi	r22, 0x03	; 3
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1416:	aa c0       	rjmp	.+340    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTA_P4 :	MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN4, (LED_PORTA_P4_ACTIVE - 1) );	break;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	64 e0       	ldi	r22, 0x04	; 4
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1422:	a4 c0       	rjmp	.+328    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTA_P5 :	MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN5, (LED_PORTA_P5_ACTIVE - 1) );	break;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	65 e0       	ldi	r22, 0x05	; 5
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    142e:	9e c0       	rjmp	.+316    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTA_P6 :	MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN6, (LED_PORTA_P6_ACTIVE - 1) );	break;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	66 e0       	ldi	r22, 0x06	; 6
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    143a:	98 c0       	rjmp	.+304    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTA_P7 :	MDIO_ErrorS_SetPinValue(DIO_PORTA,DIO_PIN7, (LED_PORTA_P7_ACTIVE - 1) );	break;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	67 e0       	ldi	r22, 0x07	; 7
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1446:	92 c0       	rjmp	.+292    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>

	case HLED_PORTB_P0 :	MDIO_ErrorS_SetPinValue(DIO_PORTB,DIO_PIN0, (LED_PORTB_P0_ACTIVE - 1) );	break;
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1452:	8c c0       	rjmp	.+280    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTB_P1 :	MDIO_ErrorS_SetPinValue(DIO_PORTB,DIO_PIN1, (LED_PORTB_P1_ACTIVE - 1) );	break;
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    145e:	86 c0       	rjmp	.+268    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTB_P2 :	MDIO_ErrorS_SetPinValue(DIO_PORTB,DIO_PIN2, (LED_PORTB_P2_ACTIVE - 1) );	break;
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	62 e0       	ldi	r22, 0x02	; 2
    1464:	41 e0       	ldi	r20, 0x01	; 1
    1466:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    146a:	80 c0       	rjmp	.+256    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTB_P3 :	MDIO_ErrorS_SetPinValue(DIO_PORTB,DIO_PIN3, (LED_PORTB_P3_ACTIVE - 1) );	break;
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	63 e0       	ldi	r22, 0x03	; 3
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1476:	7a c0       	rjmp	.+244    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTB_P4 :	MDIO_ErrorS_SetPinValue(DIO_PORTB,DIO_PIN4, (LED_PORTB_P4_ACTIVE - 1) );	break;
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	64 e0       	ldi	r22, 0x04	; 4
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1482:	74 c0       	rjmp	.+232    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTB_P5 :	MDIO_ErrorS_SetPinValue(DIO_PORTB,DIO_PIN5, (LED_PORTB_P5_ACTIVE - 1) );	break;
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	65 e0       	ldi	r22, 0x05	; 5
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    148e:	6e c0       	rjmp	.+220    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTB_P6 :	MDIO_ErrorS_SetPinValue(DIO_PORTB,DIO_PIN6, (LED_PORTB_P6_ACTIVE - 1) );	break;
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	66 e0       	ldi	r22, 0x06	; 6
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    149a:	68 c0       	rjmp	.+208    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTB_P7 :	MDIO_ErrorS_SetPinValue(DIO_PORTB,DIO_PIN7, (LED_PORTB_P7_ACTIVE - 1) );	break;
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	67 e0       	ldi	r22, 0x07	; 7
    14a0:	41 e0       	ldi	r20, 0x01	; 1
    14a2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    14a6:	62 c0       	rjmp	.+196    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>

	case HLED_PORTC_P0 :	MDIO_ErrorS_SetPinValue(DIO_PORTC,DIO_PIN0, (LED_PORTC_P0_ACTIVE - 1) );	break;
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    14ae:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    14b2:	5c c0       	rjmp	.+184    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTC_P1 :	MDIO_ErrorS_SetPinValue(DIO_PORTC,DIO_PIN1, (LED_PORTC_P1_ACTIVE - 1) );	break;
    14b4:	83 e0       	ldi	r24, 0x03	; 3
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	41 e0       	ldi	r20, 0x01	; 1
    14ba:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    14be:	56 c0       	rjmp	.+172    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTC_P2 :	MDIO_ErrorS_SetPinValue(DIO_PORTC,DIO_PIN2, (LED_PORTC_P2_ACTIVE - 1) );	break;
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	41 e0       	ldi	r20, 0x01	; 1
    14c6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    14ca:	50 c0       	rjmp	.+160    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTC_P3 :	MDIO_ErrorS_SetPinValue(DIO_PORTC,DIO_PIN3, (LED_PORTC_P3_ACTIVE - 1) );	break;
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	63 e0       	ldi	r22, 0x03	; 3
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    14d6:	4a c0       	rjmp	.+148    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTC_P4 :	MDIO_ErrorS_SetPinValue(DIO_PORTC,DIO_PIN4, (LED_PORTC_P4_ACTIVE - 1) );	break;
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	64 e0       	ldi	r22, 0x04	; 4
    14dc:	41 e0       	ldi	r20, 0x01	; 1
    14de:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    14e2:	44 c0       	rjmp	.+136    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTC_P5 :	MDIO_ErrorS_SetPinValue(DIO_PORTC,DIO_PIN5, (LED_PORTC_P5_ACTIVE - 1) );	break;
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	65 e0       	ldi	r22, 0x05	; 5
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    14ee:	3e c0       	rjmp	.+124    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTC_P6 :	MDIO_ErrorS_SetPinValue(DIO_PORTC,DIO_PIN6, (LED_PORTC_P6_ACTIVE - 1) );	break;
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	66 e0       	ldi	r22, 0x06	; 6
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    14fa:	38 c0       	rjmp	.+112    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTC_P7 :	MDIO_ErrorS_SetPinValue(DIO_PORTC,DIO_PIN7, (LED_PORTC_P7_ACTIVE - 1) );	break;
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	67 e0       	ldi	r22, 0x07	; 7
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1506:	32 c0       	rjmp	.+100    	; 0x156c <HLED_ErrorState_LEDOn+0x32e>

	case HLED_PORTD_P0 :	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN0, (LED_PORTD_P0_ACTIVE - 1) );	break;
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1512:	2c c0       	rjmp	.+88     	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTD_P1 :	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN1, (LED_PORTD_P1_ACTIVE - 1) );	break;
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	61 e0       	ldi	r22, 0x01	; 1
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    151e:	26 c0       	rjmp	.+76     	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTD_P2 :	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN2, (LED_PORTD_P2_ACTIVE - 1) );	break;
    1520:	84 e0       	ldi	r24, 0x04	; 4
    1522:	62 e0       	ldi	r22, 0x02	; 2
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    152a:	20 c0       	rjmp	.+64     	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTD_P3 :	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN3, (LED_PORTD_P3_ACTIVE - 1) );	break;
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	63 e0       	ldi	r22, 0x03	; 3
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1536:	1a c0       	rjmp	.+52     	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTD_P4 :	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN4, (LED_PORTD_P4_ACTIVE - 1) );	break;
    1538:	84 e0       	ldi	r24, 0x04	; 4
    153a:	64 e0       	ldi	r22, 0x04	; 4
    153c:	41 e0       	ldi	r20, 0x01	; 1
    153e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1542:	14 c0       	rjmp	.+40     	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTD_P5 :	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN5, (LED_PORTD_P5_ACTIVE - 1) );	break;
    1544:	84 e0       	ldi	r24, 0x04	; 4
    1546:	65 e0       	ldi	r22, 0x05	; 5
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    154e:	0e c0       	rjmp	.+28     	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTD_P6 :	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN6, (LED_PORTD_P6_ACTIVE - 1) );	break;
    1550:	84 e0       	ldi	r24, 0x04	; 4
    1552:	66 e0       	ldi	r22, 0x06	; 6
    1554:	41 e0       	ldi	r20, 0x01	; 1
    1556:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    155a:	08 c0       	rjmp	.+16     	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	case HLED_PORTD_P7 :	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN7, (LED_PORTD_P7_ACTIVE - 1) );	break;
    155c:	84 e0       	ldi	r24, 0x04	; 4
    155e:	67 e0       	ldi	r22, 0x07	; 7
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1566:	02 c0       	rjmp	.+4      	; 0x156c <HLED_ErrorState_LEDOn+0x32e>
	default			  : errorState = return_Nok;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorState;
    156c:	89 81       	ldd	r24, Y+1	; 0x01

}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <HLED_ErrorState_LEDOff>:

Error_State_t HLED_ErrorState_LEDOff(u8 copy_u8LED_num){
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <HLED_ErrorState_LEDOff+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <HLED_ErrorState_LEDOff+0x8>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	8a 83       	std	Y+2, r24	; 0x02
	Error_State_t errorState = return_Ok;
    158a:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8LED_num){
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3c 83       	std	Y+4, r19	; 0x04
    1594:	2b 83       	std	Y+3, r18	; 0x03
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	80 31       	cpi	r24, 0x10	; 16
    159c:	91 05       	cpc	r25, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <HLED_ErrorState_LEDOff+0x26>
    15a0:	1c c1       	rjmp	.+568    	; 0x17da <HLED_ErrorState_LEDOff+0x25e>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	21 31       	cpi	r18, 0x11	; 17
    15a8:	31 05       	cpc	r19, r1
    15aa:	0c f0       	brlt	.+2      	; 0x15ae <HLED_ErrorState_LEDOff+0x32>
    15ac:	5b c0       	rjmp	.+182    	; 0x1664 <HLED_ErrorState_LEDOff+0xe8>
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	88 30       	cpi	r24, 0x08	; 8
    15b4:	91 05       	cpc	r25, r1
    15b6:	09 f4       	brne	.+2      	; 0x15ba <HLED_ErrorState_LEDOff+0x3e>
    15b8:	e0 c0       	rjmp	.+448    	; 0x177a <HLED_ErrorState_LEDOff+0x1fe>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	29 30       	cpi	r18, 0x09	; 9
    15c0:	31 05       	cpc	r19, r1
    15c2:	5c f5       	brge	.+86     	; 0x161a <HLED_ErrorState_LEDOff+0x9e>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <HLED_ErrorState_LEDOff+0x54>
    15ce:	bd c0       	rjmp	.+378    	; 0x174a <HLED_ErrorState_LEDOff+0x1ce>
    15d0:	2b 81       	ldd	r18, Y+3	; 0x03
    15d2:	3c 81       	ldd	r19, Y+4	; 0x04
    15d4:	25 30       	cpi	r18, 0x05	; 5
    15d6:	31 05       	cpc	r19, r1
    15d8:	9c f4       	brge	.+38     	; 0x1600 <HLED_ErrorState_LEDOff+0x84>
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	91 05       	cpc	r25, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <HLED_ErrorState_LEDOff+0x6a>
    15e4:	a6 c0       	rjmp	.+332    	; 0x1732 <HLED_ErrorState_LEDOff+0x1b6>
    15e6:	2b 81       	ldd	r18, Y+3	; 0x03
    15e8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ea:	23 30       	cpi	r18, 0x03	; 3
    15ec:	31 05       	cpc	r19, r1
    15ee:	0c f0       	brlt	.+2      	; 0x15f2 <HLED_ErrorState_LEDOff+0x76>
    15f0:	a6 c0       	rjmp	.+332    	; 0x173e <HLED_ErrorState_LEDOff+0x1c2>
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <HLED_ErrorState_LEDOff+0x82>
    15fc:	94 c0       	rjmp	.+296    	; 0x1726 <HLED_ErrorState_LEDOff+0x1aa>
    15fe:	53 c1       	rjmp	.+678    	; 0x18a6 <HLED_ErrorState_LEDOff+0x32a>
    1600:	2b 81       	ldd	r18, Y+3	; 0x03
    1602:	3c 81       	ldd	r19, Y+4	; 0x04
    1604:	26 30       	cpi	r18, 0x06	; 6
    1606:	31 05       	cpc	r19, r1
    1608:	09 f4       	brne	.+2      	; 0x160c <HLED_ErrorState_LEDOff+0x90>
    160a:	ab c0       	rjmp	.+342    	; 0x1762 <HLED_ErrorState_LEDOff+0x1e6>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	87 30       	cpi	r24, 0x07	; 7
    1612:	91 05       	cpc	r25, r1
    1614:	0c f0       	brlt	.+2      	; 0x1618 <HLED_ErrorState_LEDOff+0x9c>
    1616:	ab c0       	rjmp	.+342    	; 0x176e <HLED_ErrorState_LEDOff+0x1f2>
    1618:	9e c0       	rjmp	.+316    	; 0x1756 <HLED_ErrorState_LEDOff+0x1da>
    161a:	2b 81       	ldd	r18, Y+3	; 0x03
    161c:	3c 81       	ldd	r19, Y+4	; 0x04
    161e:	2c 30       	cpi	r18, 0x0C	; 12
    1620:	31 05       	cpc	r19, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <HLED_ErrorState_LEDOff+0xaa>
    1624:	c2 c0       	rjmp	.+388    	; 0x17aa <HLED_ErrorState_LEDOff+0x22e>
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	8d 30       	cpi	r24, 0x0D	; 13
    162c:	91 05       	cpc	r25, r1
    162e:	6c f4       	brge	.+26     	; 0x164a <HLED_ErrorState_LEDOff+0xce>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	2a 30       	cpi	r18, 0x0A	; 10
    1636:	31 05       	cpc	r19, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <HLED_ErrorState_LEDOff+0xc0>
    163a:	ab c0       	rjmp	.+342    	; 0x1792 <HLED_ErrorState_LEDOff+0x216>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	8b 30       	cpi	r24, 0x0B	; 11
    1642:	91 05       	cpc	r25, r1
    1644:	0c f0       	brlt	.+2      	; 0x1648 <HLED_ErrorState_LEDOff+0xcc>
    1646:	ab c0       	rjmp	.+342    	; 0x179e <HLED_ErrorState_LEDOff+0x222>
    1648:	9e c0       	rjmp	.+316    	; 0x1786 <HLED_ErrorState_LEDOff+0x20a>
    164a:	2b 81       	ldd	r18, Y+3	; 0x03
    164c:	3c 81       	ldd	r19, Y+4	; 0x04
    164e:	2e 30       	cpi	r18, 0x0E	; 14
    1650:	31 05       	cpc	r19, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <HLED_ErrorState_LEDOff+0xda>
    1654:	b6 c0       	rjmp	.+364    	; 0x17c2 <HLED_ErrorState_LEDOff+0x246>
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	8f 30       	cpi	r24, 0x0F	; 15
    165c:	91 05       	cpc	r25, r1
    165e:	0c f0       	brlt	.+2      	; 0x1662 <HLED_ErrorState_LEDOff+0xe6>
    1660:	b6 c0       	rjmp	.+364    	; 0x17ce <HLED_ErrorState_LEDOff+0x252>
    1662:	a9 c0       	rjmp	.+338    	; 0x17b6 <HLED_ErrorState_LEDOff+0x23a>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	28 31       	cpi	r18, 0x18	; 24
    166a:	31 05       	cpc	r19, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <HLED_ErrorState_LEDOff+0xf4>
    166e:	e5 c0       	rjmp	.+458    	; 0x183a <HLED_ErrorState_LEDOff+0x2be>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	89 31       	cpi	r24, 0x19	; 25
    1676:	91 05       	cpc	r25, r1
    1678:	2c f5       	brge	.+74     	; 0x16c4 <HLED_ErrorState_LEDOff+0x148>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	24 31       	cpi	r18, 0x14	; 20
    1680:	31 05       	cpc	r19, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <HLED_ErrorState_LEDOff+0x10a>
    1684:	c2 c0       	rjmp	.+388    	; 0x180a <HLED_ErrorState_LEDOff+0x28e>
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	85 31       	cpi	r24, 0x15	; 21
    168c:	91 05       	cpc	r25, r1
    168e:	6c f4       	brge	.+26     	; 0x16aa <HLED_ErrorState_LEDOff+0x12e>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	22 31       	cpi	r18, 0x12	; 18
    1696:	31 05       	cpc	r19, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <HLED_ErrorState_LEDOff+0x120>
    169a:	ab c0       	rjmp	.+342    	; 0x17f2 <HLED_ErrorState_LEDOff+0x276>
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	83 31       	cpi	r24, 0x13	; 19
    16a2:	91 05       	cpc	r25, r1
    16a4:	0c f0       	brlt	.+2      	; 0x16a8 <HLED_ErrorState_LEDOff+0x12c>
    16a6:	ab c0       	rjmp	.+342    	; 0x17fe <HLED_ErrorState_LEDOff+0x282>
    16a8:	9e c0       	rjmp	.+316    	; 0x17e6 <HLED_ErrorState_LEDOff+0x26a>
    16aa:	2b 81       	ldd	r18, Y+3	; 0x03
    16ac:	3c 81       	ldd	r19, Y+4	; 0x04
    16ae:	26 31       	cpi	r18, 0x16	; 22
    16b0:	31 05       	cpc	r19, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <HLED_ErrorState_LEDOff+0x13a>
    16b4:	b6 c0       	rjmp	.+364    	; 0x1822 <HLED_ErrorState_LEDOff+0x2a6>
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	87 31       	cpi	r24, 0x17	; 23
    16bc:	91 05       	cpc	r25, r1
    16be:	0c f0       	brlt	.+2      	; 0x16c2 <HLED_ErrorState_LEDOff+0x146>
    16c0:	b6 c0       	rjmp	.+364    	; 0x182e <HLED_ErrorState_LEDOff+0x2b2>
    16c2:	a9 c0       	rjmp	.+338    	; 0x1816 <HLED_ErrorState_LEDOff+0x29a>
    16c4:	2b 81       	ldd	r18, Y+3	; 0x03
    16c6:	3c 81       	ldd	r19, Y+4	; 0x04
    16c8:	2c 31       	cpi	r18, 0x1C	; 28
    16ca:	31 05       	cpc	r19, r1
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <HLED_ErrorState_LEDOff+0x154>
    16ce:	cd c0       	rjmp	.+410    	; 0x186a <HLED_ErrorState_LEDOff+0x2ee>
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	8d 31       	cpi	r24, 0x1D	; 29
    16d6:	91 05       	cpc	r25, r1
    16d8:	6c f4       	brge	.+26     	; 0x16f4 <HLED_ErrorState_LEDOff+0x178>
    16da:	2b 81       	ldd	r18, Y+3	; 0x03
    16dc:	3c 81       	ldd	r19, Y+4	; 0x04
    16de:	2a 31       	cpi	r18, 0x1A	; 26
    16e0:	31 05       	cpc	r19, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <HLED_ErrorState_LEDOff+0x16a>
    16e4:	b6 c0       	rjmp	.+364    	; 0x1852 <HLED_ErrorState_LEDOff+0x2d6>
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	8b 31       	cpi	r24, 0x1B	; 27
    16ec:	91 05       	cpc	r25, r1
    16ee:	0c f0       	brlt	.+2      	; 0x16f2 <HLED_ErrorState_LEDOff+0x176>
    16f0:	b6 c0       	rjmp	.+364    	; 0x185e <HLED_ErrorState_LEDOff+0x2e2>
    16f2:	a9 c0       	rjmp	.+338    	; 0x1846 <HLED_ErrorState_LEDOff+0x2ca>
    16f4:	2b 81       	ldd	r18, Y+3	; 0x03
    16f6:	3c 81       	ldd	r19, Y+4	; 0x04
    16f8:	2e 31       	cpi	r18, 0x1E	; 30
    16fa:	31 05       	cpc	r19, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <HLED_ErrorState_LEDOff+0x184>
    16fe:	c1 c0       	rjmp	.+386    	; 0x1882 <HLED_ErrorState_LEDOff+0x306>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	8e 31       	cpi	r24, 0x1E	; 30
    1706:	91 05       	cpc	r25, r1
    1708:	0c f4       	brge	.+2      	; 0x170c <HLED_ErrorState_LEDOff+0x190>
    170a:	b5 c0       	rjmp	.+362    	; 0x1876 <HLED_ErrorState_LEDOff+0x2fa>
    170c:	2b 81       	ldd	r18, Y+3	; 0x03
    170e:	3c 81       	ldd	r19, Y+4	; 0x04
    1710:	2f 31       	cpi	r18, 0x1F	; 31
    1712:	31 05       	cpc	r19, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <HLED_ErrorState_LEDOff+0x19c>
    1716:	bb c0       	rjmp	.+374    	; 0x188e <HLED_ErrorState_LEDOff+0x312>
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	80 32       	cpi	r24, 0x20	; 32
    171e:	91 05       	cpc	r25, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <HLED_ErrorState_LEDOff+0x1a8>
    1722:	bb c0       	rjmp	.+374    	; 0x189a <HLED_ErrorState_LEDOff+0x31e>
    1724:	c0 c0       	rjmp	.+384    	; 0x18a6 <HLED_ErrorState_LEDOff+0x32a>
	case HLED_PORTA_P0 :	disable(DIO_PORTA,DIO_PIN0,LED_PORTA_P0_ACTIVE);			break;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	42 e0       	ldi	r20, 0x02	; 2
    172c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1730:	bc c0       	rjmp	.+376    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTA_P1 :	disable(DIO_PORTA,DIO_PIN1,LED_PORTA_P1_ACTIVE);	break;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	61 e0       	ldi	r22, 0x01	; 1
    1736:	42 e0       	ldi	r20, 0x02	; 2
    1738:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    173c:	b6 c0       	rjmp	.+364    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTA_P2 :	disable(DIO_PORTA,DIO_PIN2,LED_PORTA_P2_ACTIVE);	break;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	62 e0       	ldi	r22, 0x02	; 2
    1742:	42 e0       	ldi	r20, 0x02	; 2
    1744:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1748:	b0 c0       	rjmp	.+352    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTA_P3 :	disable(DIO_PORTA,DIO_PIN3,LED_PORTA_P3_ACTIVE);	break;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	63 e0       	ldi	r22, 0x03	; 3
    174e:	42 e0       	ldi	r20, 0x02	; 2
    1750:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1754:	aa c0       	rjmp	.+340    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTA_P4 :	disable(DIO_PORTA,DIO_PIN4,LED_PORTA_P4_ACTIVE);	break;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	64 e0       	ldi	r22, 0x04	; 4
    175a:	42 e0       	ldi	r20, 0x02	; 2
    175c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1760:	a4 c0       	rjmp	.+328    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTA_P5 :	disable(DIO_PORTA,DIO_PIN5,LED_PORTA_P5_ACTIVE);	break;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	65 e0       	ldi	r22, 0x05	; 5
    1766:	42 e0       	ldi	r20, 0x02	; 2
    1768:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    176c:	9e c0       	rjmp	.+316    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTA_P6 :	disable(DIO_PORTA,DIO_PIN6,LED_PORTA_P6_ACTIVE);	break;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	66 e0       	ldi	r22, 0x06	; 6
    1772:	42 e0       	ldi	r20, 0x02	; 2
    1774:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1778:	98 c0       	rjmp	.+304    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTA_P7 :	disable(DIO_PORTA,DIO_PIN7,LED_PORTA_P7_ACTIVE);	break;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	67 e0       	ldi	r22, 0x07	; 7
    177e:	42 e0       	ldi	r20, 0x02	; 2
    1780:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1784:	92 c0       	rjmp	.+292    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>

	case HLED_PORTB_P0 :	disable(DIO_PORTB,DIO_PIN0,LED_PORTB_P0_ACTIVE);	break;
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	42 e0       	ldi	r20, 0x02	; 2
    178c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1790:	8c c0       	rjmp	.+280    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTB_P1 :	disable(DIO_PORTB,DIO_PIN1,LED_PORTB_P1_ACTIVE);	break;
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	42 e0       	ldi	r20, 0x02	; 2
    1798:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    179c:	86 c0       	rjmp	.+268    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTB_P2 :	disable(DIO_PORTB,DIO_PIN2,LED_PORTB_P2_ACTIVE);	break;
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	62 e0       	ldi	r22, 0x02	; 2
    17a2:	42 e0       	ldi	r20, 0x02	; 2
    17a4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    17a8:	80 c0       	rjmp	.+256    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTB_P3 :	disable(DIO_PORTB,DIO_PIN3,LED_PORTB_P3_ACTIVE);	break;
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	63 e0       	ldi	r22, 0x03	; 3
    17ae:	42 e0       	ldi	r20, 0x02	; 2
    17b0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    17b4:	7a c0       	rjmp	.+244    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTB_P4 :	disable(DIO_PORTB,DIO_PIN4,LED_PORTB_P4_ACTIVE);	break;
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	64 e0       	ldi	r22, 0x04	; 4
    17ba:	42 e0       	ldi	r20, 0x02	; 2
    17bc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    17c0:	74 c0       	rjmp	.+232    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTB_P5 :	disable(DIO_PORTB,DIO_PIN5,LED_PORTB_P5_ACTIVE);	break;
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	65 e0       	ldi	r22, 0x05	; 5
    17c6:	42 e0       	ldi	r20, 0x02	; 2
    17c8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    17cc:	6e c0       	rjmp	.+220    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTB_P6 :	disable(DIO_PORTB,DIO_PIN6,LED_PORTB_P6_ACTIVE);	break;
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	66 e0       	ldi	r22, 0x06	; 6
    17d2:	42 e0       	ldi	r20, 0x02	; 2
    17d4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    17d8:	68 c0       	rjmp	.+208    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTB_P7 :	disable(DIO_PORTB,DIO_PIN7,LED_PORTB_P7_ACTIVE);	break;
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	67 e0       	ldi	r22, 0x07	; 7
    17de:	42 e0       	ldi	r20, 0x02	; 2
    17e0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    17e4:	62 c0       	rjmp	.+196    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>

	case HLED_PORTC_P0 :	disable(DIO_PORTC,DIO_PIN0,LED_PORTC_P0_ACTIVE);	break;
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	42 e0       	ldi	r20, 0x02	; 2
    17ec:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    17f0:	5c c0       	rjmp	.+184    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTC_P1 :	disable(DIO_PORTC,DIO_PIN1,LED_PORTC_P1_ACTIVE);	break;
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	61 e0       	ldi	r22, 0x01	; 1
    17f6:	42 e0       	ldi	r20, 0x02	; 2
    17f8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    17fc:	56 c0       	rjmp	.+172    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTC_P2 :	disable(DIO_PORTC,DIO_PIN2,LED_PORTC_P2_ACTIVE);	break;
    17fe:	83 e0       	ldi	r24, 0x03	; 3
    1800:	62 e0       	ldi	r22, 0x02	; 2
    1802:	42 e0       	ldi	r20, 0x02	; 2
    1804:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1808:	50 c0       	rjmp	.+160    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTC_P3 :	disable(DIO_PORTC,DIO_PIN3,LED_PORTC_P3_ACTIVE);	break;
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	63 e0       	ldi	r22, 0x03	; 3
    180e:	42 e0       	ldi	r20, 0x02	; 2
    1810:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1814:	4a c0       	rjmp	.+148    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTC_P4 :	disable(DIO_PORTC,DIO_PIN4,LED_PORTC_P4_ACTIVE);	break;
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	64 e0       	ldi	r22, 0x04	; 4
    181a:	42 e0       	ldi	r20, 0x02	; 2
    181c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1820:	44 c0       	rjmp	.+136    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTC_P5 :	disable(DIO_PORTC,DIO_PIN5,LED_PORTC_P5_ACTIVE);	break;
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	65 e0       	ldi	r22, 0x05	; 5
    1826:	42 e0       	ldi	r20, 0x02	; 2
    1828:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    182c:	3e c0       	rjmp	.+124    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTC_P6 :	disable(DIO_PORTC,DIO_PIN6,LED_PORTC_P6_ACTIVE);	break;
    182e:	83 e0       	ldi	r24, 0x03	; 3
    1830:	66 e0       	ldi	r22, 0x06	; 6
    1832:	42 e0       	ldi	r20, 0x02	; 2
    1834:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1838:	38 c0       	rjmp	.+112    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTC_P7 :	disable(DIO_PORTC,DIO_PIN7,LED_PORTC_P7_ACTIVE);	break;
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	67 e0       	ldi	r22, 0x07	; 7
    183e:	42 e0       	ldi	r20, 0x02	; 2
    1840:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1844:	32 c0       	rjmp	.+100    	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>

	case HLED_PORTD_P0 :	disable(DIO_PORTD,DIO_PIN0,LED_PORTD_P0_ACTIVE);	break;
    1846:	84 e0       	ldi	r24, 0x04	; 4
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	42 e0       	ldi	r20, 0x02	; 2
    184c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1850:	2c c0       	rjmp	.+88     	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTD_P1 :	disable(DIO_PORTD,DIO_PIN1,LED_PORTD_P1_ACTIVE);	break;
    1852:	84 e0       	ldi	r24, 0x04	; 4
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	42 e0       	ldi	r20, 0x02	; 2
    1858:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    185c:	26 c0       	rjmp	.+76     	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTD_P2 :	disable(DIO_PORTD,DIO_PIN2,LED_PORTD_P2_ACTIVE);	break;
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	62 e0       	ldi	r22, 0x02	; 2
    1862:	42 e0       	ldi	r20, 0x02	; 2
    1864:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1868:	20 c0       	rjmp	.+64     	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTD_P3 :	disable(DIO_PORTD,DIO_PIN3,LED_PORTD_P3_ACTIVE);	break;
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	63 e0       	ldi	r22, 0x03	; 3
    186e:	42 e0       	ldi	r20, 0x02	; 2
    1870:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1874:	1a c0       	rjmp	.+52     	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTD_P4 :	disable(DIO_PORTD,DIO_PIN4,LED_PORTD_P4_ACTIVE);	break;
    1876:	84 e0       	ldi	r24, 0x04	; 4
    1878:	64 e0       	ldi	r22, 0x04	; 4
    187a:	42 e0       	ldi	r20, 0x02	; 2
    187c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTD_P5 :	disable(DIO_PORTD,DIO_PIN5,LED_PORTD_P5_ACTIVE);	break;
    1882:	84 e0       	ldi	r24, 0x04	; 4
    1884:	65 e0       	ldi	r22, 0x05	; 5
    1886:	42 e0       	ldi	r20, 0x02	; 2
    1888:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    188c:	0e c0       	rjmp	.+28     	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTD_P6 :	disable(DIO_PORTD,DIO_PIN6,LED_PORTD_P6_ACTIVE);	break;
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	66 e0       	ldi	r22, 0x06	; 6
    1892:	42 e0       	ldi	r20, 0x02	; 2
    1894:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	case HLED_PORTD_P7 :	disable(DIO_PORTD,DIO_PIN7,LED_PORTD_P7_ACTIVE);	break;
    189a:	84 e0       	ldi	r24, 0x04	; 4
    189c:	67 e0       	ldi	r22, 0x07	; 7
    189e:	42 e0       	ldi	r20, 0x02	; 2
    18a0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <disable>
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <HLED_ErrorState_LEDOff+0x32e>
	default			  : errorState = return_Nok;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorState;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01

}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <disable>:

void disable(u8 port,u8 pin_num, u8 led_active_type){
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <disable+0x6>
    18c0:	0f 92       	push	r0
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	6a 83       	std	Y+2, r22	; 0x02
    18ca:	4b 83       	std	Y+3, r20	; 0x03
	if(led_active_type == LED_ACTIVE_H){
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	82 30       	cpi	r24, 0x02	; 2
    18d0:	31 f4       	brne	.+12     	; 0x18de <disable+0x24>
		MDIO_ErrorS_SetPinValue(port,pin_num,DIO_LOW);
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	6a 81       	ldd	r22, Y+2	; 0x02
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    18dc:	08 c0       	rjmp	.+16     	; 0x18ee <disable+0x34>
	}
	else if (led_active_type == LED_ACTIVE_L){
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	29 f4       	brne	.+10     	; 0x18ee <disable+0x34>
		MDIO_ErrorS_SetPinValue(port,pin_num,DIO_HIGH);
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	6a 81       	ldd	r22, Y+2	; 0x02
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
	}
}
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <HServo_voidSetAngle>:
 * sonfig this part as
 * simulation: DUTY: 2000:1000 while ADC_s32Mapped_Servo and HServo_voidSetAngleSimulation takes from 90:90-
 * real      : DUTY: 2550:450  while ADC_s32Mapped_Servo and HServo_voidSetAngle			 takes from 180:0
 * */

void HServo_voidSetAngle(u32 Copy_u8Angle){
    18fa:	af 92       	push	r10
    18fc:	bf 92       	push	r11
    18fe:	cf 92       	push	r12
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	2c 97       	sbiw	r28, 0x0c	; 12
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	69 87       	std	Y+9, r22	; 0x09
    1920:	7a 87       	std	Y+10, r23	; 0x0a
    1922:	8b 87       	std	Y+11, r24	; 0x0b
    1924:	9c 87       	std	Y+12, r25	; 0x0c

	u64 duty = MAX_DUTY - ((f64)((MAX_DUTY - MINI_DUTY)*(MAX_ANGLE - Copy_u8Angle))/(f64)(MAX_ANGLE - MINI_ANGLE));
    1926:	24 eb       	ldi	r18, 0xB4	; 180
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	ab 85       	ldd	r26, Y+11	; 0x0b
    1934:	bc 85       	ldd	r27, Y+12	; 0x0c
    1936:	79 01       	movw	r14, r18
    1938:	8a 01       	movw	r16, r20
    193a:	e8 1a       	sub	r14, r24
    193c:	f9 0a       	sbc	r15, r25
    193e:	0a 0b       	sbc	r16, r26
    1940:	1b 0b       	sbc	r17, r27
    1942:	d8 01       	movw	r26, r16
    1944:	c7 01       	movw	r24, r14
    1946:	24 e3       	ldi	r18, 0x34	; 52
    1948:	38 e0       	ldi	r19, 0x08	; 8
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__mulsi3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__floatunsisf>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	44 e3       	ldi	r20, 0x34	; 52
    1970:	53 ec       	ldi	r21, 0xC3	; 195
    1972:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e6       	ldi	r19, 0x60	; 96
    1982:	4f e1       	ldi	r20, 0x1F	; 31
    1984:	55 e4       	ldi	r21, 0x45	; 69
    1986:	0e 94 9a 02 	call	0x534	; 0x534 <__addsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 75 00 	call	0xea	; 0xea <__fixunssfdi>
    1996:	a2 2e       	mov	r10, r18
    1998:	b3 2e       	mov	r11, r19
    199a:	c4 2e       	mov	r12, r20
    199c:	d5 2e       	mov	r13, r21
    199e:	e6 2e       	mov	r14, r22
    19a0:	f7 2e       	mov	r15, r23
    19a2:	08 2f       	mov	r16, r24
    19a4:	19 2f       	mov	r17, r25
    19a6:	a9 82       	std	Y+1, r10	; 0x01
    19a8:	ba 82       	std	Y+2, r11	; 0x02
    19aa:	cb 82       	std	Y+3, r12	; 0x03
    19ac:	dc 82       	std	Y+4, r13	; 0x04
    19ae:	ed 82       	std	Y+5, r14	; 0x05
    19b0:	fe 82       	std	Y+6, r15	; 0x06
    19b2:	0f 83       	std	Y+7, r16	; 0x07
    19b4:	18 87       	std	Y+8, r17	; 0x08

#if SERVO_PIN == PD5_OC1A
	MTIMER1_voidSetDutyCycle(duty);
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ba:	0e 94 92 1c 	call	0x3924	; 0x3924 <MTIMER1_voidSetDutyCycle>
#elif SERVO_PIN == PD4_OC1B
#elif SERVO_PIN == PD7_OC2
#elif SERVO_PIN == PB3_OC0
#endif
}
    19be:	2c 96       	adiw	r28, 0x0c	; 12
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	08 95       	ret

000019e0 <HServo_voidSetAngleSimulation>:


void HServo_voidSetAngleSimulation(s32 Copy_u8Angle){
    19e0:	af 92       	push	r10
    19e2:	bf 92       	push	r11
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	2c 97       	sbiw	r28, 0x0c	; 12
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	69 87       	std	Y+9, r22	; 0x09
    1a06:	7a 87       	std	Y+10, r23	; 0x0a
    1a08:	8b 87       	std	Y+11, r24	; 0x0b
    1a0a:	9c 87       	std	Y+12, r25	; 0x0c
	Copy_u8Angle+= 90;
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a12:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a14:	86 5a       	subi	r24, 0xA6	; 166
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	af 4f       	sbci	r26, 0xFF	; 255
    1a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1c:	89 87       	std	Y+9, r24	; 0x09
    1a1e:	9a 87       	std	Y+10, r25	; 0x0a
    1a20:	ab 87       	std	Y+11, r26	; 0x0b
    1a22:	bc 87       	std	Y+12, r27	; 0x0c

	u64 duty = MAX_DUTY - ((f64)((MAX_DUTY - MINI_DUTY)*(MAX_ANGLE - Copy_u8Angle))/(f64)(MAX_ANGLE - MINI_ANGLE));
    1a24:	24 eb       	ldi	r18, 0xB4	; 180
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a32:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a34:	79 01       	movw	r14, r18
    1a36:	8a 01       	movw	r16, r20
    1a38:	e8 1a       	sub	r14, r24
    1a3a:	f9 0a       	sbc	r15, r25
    1a3c:	0a 0b       	sbc	r16, r26
    1a3e:	1b 0b       	sbc	r17, r27
    1a40:	d8 01       	movw	r26, r16
    1a42:	c7 01       	movw	r24, r14
    1a44:	24 e3       	ldi	r18, 0x34	; 52
    1a46:	38 e0       	ldi	r19, 0x08	; 8
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	cd 01       	movw	r24, r26
    1a50:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__mulsi3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	44 e3       	ldi	r20, 0x34	; 52
    1a6e:	53 ec       	ldi	r21, 0xC3	; 195
    1a70:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e6       	ldi	r19, 0x60	; 96
    1a80:	4f e1       	ldi	r20, 0x1F	; 31
    1a82:	55 e4       	ldi	r21, 0x45	; 69
    1a84:	0e 94 9a 02 	call	0x534	; 0x534 <__addsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 75 00 	call	0xea	; 0xea <__fixunssfdi>
    1a94:	a2 2e       	mov	r10, r18
    1a96:	b3 2e       	mov	r11, r19
    1a98:	c4 2e       	mov	r12, r20
    1a9a:	d5 2e       	mov	r13, r21
    1a9c:	e6 2e       	mov	r14, r22
    1a9e:	f7 2e       	mov	r15, r23
    1aa0:	08 2f       	mov	r16, r24
    1aa2:	19 2f       	mov	r17, r25
    1aa4:	a9 82       	std	Y+1, r10	; 0x01
    1aa6:	ba 82       	std	Y+2, r11	; 0x02
    1aa8:	cb 82       	std	Y+3, r12	; 0x03
    1aaa:	dc 82       	std	Y+4, r13	; 0x04
    1aac:	ed 82       	std	Y+5, r14	; 0x05
    1aae:	fe 82       	std	Y+6, r15	; 0x06
    1ab0:	0f 83       	std	Y+7, r16	; 0x07
    1ab2:	18 87       	std	Y+8, r17	; 0x08

#if SERVO_PIN == PD5_OC1A
	MTIMER1_voidSetDutyCycle(duty);
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	0e 94 92 1c 	call	0x3924	; 0x3924 <MTIMER1_voidSetDutyCycle>
#elif SERVO_PIN == PD4_OC1B
#elif SERVO_PIN == PD7_OC2
#elif SERVO_PIN == PB3_OC0
#endif
}
    1abc:	2c 96       	adiw	r28, 0x0c	; 12
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	bf 90       	pop	r11
    1ada:	af 90       	pop	r10
    1adc:	08 95       	ret

00001ade <Hstepper_rotate_CW>:
#include "BIT_MATH.h"
#include "MDIO_interface.h"
#include "HStpper_config.h"
#include "HStpper_interface.h"
#include "HStpper_private.h"
void Hstepper_rotate_CW (u16 deg){
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	ec 97       	sbiw	r28, 0x3c	; 60
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	9c af       	std	Y+60, r25	; 0x3c
    1af4:	8b af       	std	Y+59, r24	; 0x3b

	deg *= 10;
    1af6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1af8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1afa:	9c 01       	movw	r18, r24
    1afc:	22 0f       	add	r18, r18
    1afe:	33 1f       	adc	r19, r19
    1b00:	c9 01       	movw	r24, r18
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	82 0f       	add	r24, r18
    1b0c:	93 1f       	adc	r25, r19
    1b0e:	9c af       	std	Y+60, r25	; 0x3c
    1b10:	8b af       	std	Y+59, r24	; 0x3b
	deg /= 7 ;
    1b12:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b14:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b16:	27 e0       	ldi	r18, 0x07	; 7
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	b9 01       	movw	r22, r18
    1b1c:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__udivmodhi4>
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c af       	std	Y+60, r25	; 0x3c
    1b24:	8b af       	std	Y+59, r24	; 0x3b

	u16 i = 0;
    1b26:	1a ae       	std	Y+58, r1	; 0x3a
    1b28:	19 ae       	std	Y+57, r1	; 0x39
    1b2a:	1d c2       	rjmp	.+1082   	; 0x1f66 <Hstepper_rotate_CW+0x488>
	for (;i < deg;i++){

		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	62 e0       	ldi	r22, 0x02	; 2
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_HIGH);
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	63 e0       	ldi	r22, 0x03	; 3
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a0 e0       	ldi	r26, 0x00	; 0
    1b5a:	b0 e4       	ldi	r27, 0x40	; 64
    1b5c:	8d ab       	std	Y+53, r24	; 0x35
    1b5e:	9e ab       	std	Y+54, r25	; 0x36
    1b60:	af ab       	std	Y+55, r26	; 0x37
    1b62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b64:	6d a9       	ldd	r22, Y+53	; 0x35
    1b66:	7e a9       	ldd	r23, Y+54	; 0x36
    1b68:	8f a9       	ldd	r24, Y+55	; 0x37
    1b6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4a ef       	ldi	r20, 0xFA	; 250
    1b72:	54 e4       	ldi	r21, 0x44	; 68
    1b74:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	89 ab       	std	Y+49, r24	; 0x31
    1b7e:	9a ab       	std	Y+50, r25	; 0x32
    1b80:	ab ab       	std	Y+51, r26	; 0x33
    1b82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b84:	69 a9       	ldd	r22, Y+49	; 0x31
    1b86:	7a a9       	ldd	r23, Y+50	; 0x32
    1b88:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e8       	ldi	r20, 0x80	; 128
    1b92:	5f e3       	ldi	r21, 0x3F	; 63
    1b94:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    1b98:	88 23       	and	r24, r24
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <Hstepper_rotate_CW+0xc8>
		__ticks = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	98 ab       	std	Y+48, r25	; 0x30
    1ba2:	8f a7       	std	Y+47, r24	; 0x2f
    1ba4:	3f c0       	rjmp	.+126    	; 0x1c24 <Hstepper_rotate_CW+0x146>
	else if (__tmp > 65535)
    1ba6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba8:	7a a9       	ldd	r23, Y+50	; 0x32
    1baa:	8b a9       	ldd	r24, Y+51	; 0x33
    1bac:	9c a9       	ldd	r25, Y+52	; 0x34
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	3f ef       	ldi	r19, 0xFF	; 255
    1bb2:	4f e7       	ldi	r20, 0x7F	; 127
    1bb4:	57 e4       	ldi	r21, 0x47	; 71
    1bb6:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	4c f5       	brge	.+82     	; 0x1c10 <Hstepper_rotate_CW+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1bc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	98 ab       	std	Y+48, r25	; 0x30
    1be4:	8f a7       	std	Y+47, r24	; 0x2f
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <Hstepper_rotate_CW+0x128>
    1be8:	88 ec       	ldi	r24, 0xC8	; 200
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9e a7       	std	Y+46, r25	; 0x2e
    1bee:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bf2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <Hstepper_rotate_CW+0x116>
    1bf8:	9e a7       	std	Y+46, r25	; 0x2e
    1bfa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	98 ab       	std	Y+48, r25	; 0x30
    1c04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c08:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	69 f7       	brne	.-38     	; 0x1be8 <Hstepper_rotate_CW+0x10a>
    1c0e:	14 c0       	rjmp	.+40     	; 0x1c38 <Hstepper_rotate_CW+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c10:	69 a9       	ldd	r22, Y+49	; 0x31
    1c12:	7a a9       	ldd	r23, Y+50	; 0x32
    1c14:	8b a9       	ldd	r24, Y+51	; 0x33
    1c16:	9c a9       	ldd	r25, Y+52	; 0x34
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	98 ab       	std	Y+48, r25	; 0x30
    1c22:	8f a7       	std	Y+47, r24	; 0x2f
    1c24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c26:	98 a9       	ldd	r25, Y+48	; 0x30
    1c28:	9c a7       	std	Y+44, r25	; 0x2c
    1c2a:	8b a7       	std	Y+43, r24	; 0x2b
    1c2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <Hstepper_rotate_CW+0x152>
    1c34:	9c a7       	std	Y+44, r25	; 0x2c
    1c36:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_HIGH);
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	63 e0       	ldi	r22, 0x03	; 3
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a0 e0       	ldi	r26, 0x00	; 0
    1c66:	b0 e4       	ldi	r27, 0x40	; 64
    1c68:	8f a3       	std	Y+39, r24	; 0x27
    1c6a:	98 a7       	std	Y+40, r25	; 0x28
    1c6c:	a9 a7       	std	Y+41, r26	; 0x29
    1c6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c70:	6f a1       	ldd	r22, Y+39	; 0x27
    1c72:	78 a5       	ldd	r23, Y+40	; 0x28
    1c74:	89 a5       	ldd	r24, Y+41	; 0x29
    1c76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	4a ef       	ldi	r20, 0xFA	; 250
    1c7e:	54 e4       	ldi	r21, 0x44	; 68
    1c80:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	8b a3       	std	Y+35, r24	; 0x23
    1c8a:	9c a3       	std	Y+36, r25	; 0x24
    1c8c:	ad a3       	std	Y+37, r26	; 0x25
    1c8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c90:	6b a1       	ldd	r22, Y+35	; 0x23
    1c92:	7c a1       	ldd	r23, Y+36	; 0x24
    1c94:	8d a1       	ldd	r24, Y+37	; 0x25
    1c96:	9e a1       	ldd	r25, Y+38	; 0x26
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e8       	ldi	r20, 0x80	; 128
    1c9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ca0:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    1ca4:	88 23       	and	r24, r24
    1ca6:	2c f4       	brge	.+10     	; 0x1cb2 <Hstepper_rotate_CW+0x1d4>
		__ticks = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9a a3       	std	Y+34, r25	; 0x22
    1cae:	89 a3       	std	Y+33, r24	; 0x21
    1cb0:	3f c0       	rjmp	.+126    	; 0x1d30 <Hstepper_rotate_CW+0x252>
	else if (__tmp > 65535)
    1cb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	3f ef       	ldi	r19, 0xFF	; 255
    1cbe:	4f e7       	ldi	r20, 0x7F	; 127
    1cc0:	57 e4       	ldi	r21, 0x47	; 71
    1cc2:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    1cc6:	18 16       	cp	r1, r24
    1cc8:	4c f5       	brge	.+82     	; 0x1d1c <Hstepper_rotate_CW+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cca:	6f a1       	ldd	r22, Y+39	; 0x27
    1ccc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cce:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e2       	ldi	r20, 0x20	; 32
    1cd8:	51 e4       	ldi	r21, 0x41	; 65
    1cda:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	9a a3       	std	Y+34, r25	; 0x22
    1cf0:	89 a3       	std	Y+33, r24	; 0x21
    1cf2:	0f c0       	rjmp	.+30     	; 0x1d12 <Hstepper_rotate_CW+0x234>
    1cf4:	88 ec       	ldi	r24, 0xC8	; 200
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	98 a3       	std	Y+32, r25	; 0x20
    1cfa:	8f 8f       	std	Y+31, r24	; 0x1f
    1cfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cfe:	98 a1       	ldd	r25, Y+32	; 0x20
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <Hstepper_rotate_CW+0x222>
    1d04:	98 a3       	std	Y+32, r25	; 0x20
    1d06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d08:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	9a a3       	std	Y+34, r25	; 0x22
    1d10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d12:	89 a1       	ldd	r24, Y+33	; 0x21
    1d14:	9a a1       	ldd	r25, Y+34	; 0x22
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	69 f7       	brne	.-38     	; 0x1cf4 <Hstepper_rotate_CW+0x216>
    1d1a:	14 c0       	rjmp	.+40     	; 0x1d44 <Hstepper_rotate_CW+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d20:	8d a1       	ldd	r24, Y+37	; 0x25
    1d22:	9e a1       	ldd	r25, Y+38	; 0x26
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9a a3       	std	Y+34, r25	; 0x22
    1d2e:	89 a3       	std	Y+33, r24	; 0x21
    1d30:	89 a1       	ldd	r24, Y+33	; 0x21
    1d32:	9a a1       	ldd	r25, Y+34	; 0x22
    1d34:	9e 8f       	std	Y+30, r25	; 0x1e
    1d36:	8d 8f       	std	Y+29, r24	; 0x1d
    1d38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <Hstepper_rotate_CW+0x25e>
    1d40:	9e 8f       	std	Y+30, r25	; 0x1e
    1d42:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_HIGH);
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	41 e0       	ldi	r20, 0x01	; 1
    1d54:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	62 e0       	ldi	r22, 0x02	; 2
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	63 e0       	ldi	r22, 0x03	; 3
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a0 e0       	ldi	r26, 0x00	; 0
    1d72:	b0 e4       	ldi	r27, 0x40	; 64
    1d74:	89 8f       	std	Y+25, r24	; 0x19
    1d76:	9a 8f       	std	Y+26, r25	; 0x1a
    1d78:	ab 8f       	std	Y+27, r26	; 0x1b
    1d7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a ef       	ldi	r20, 0xFA	; 250
    1d8a:	54 e4       	ldi	r21, 0x44	; 68
    1d8c:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	8d 8b       	std	Y+21, r24	; 0x15
    1d96:	9e 8b       	std	Y+22, r25	; 0x16
    1d98:	af 8b       	std	Y+23, r26	; 0x17
    1d9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <Hstepper_rotate_CW+0x2e0>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9c 8b       	std	Y+20, r25	; 0x14
    1dba:	8b 8b       	std	Y+19, r24	; 0x13
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <Hstepper_rotate_CW+0x35e>
	else if (__tmp > 65535)
    1dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <Hstepper_rotate_CW+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9c 8b       	std	Y+20, r25	; 0x14
    1dfc:	8b 8b       	std	Y+19, r24	; 0x13
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <Hstepper_rotate_CW+0x340>
    1e00:	88 ec       	ldi	r24, 0xC8	; 200
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9a 8b       	std	Y+18, r25	; 0x12
    1e06:	89 8b       	std	Y+17, r24	; 0x11
    1e08:	89 89       	ldd	r24, Y+17	; 0x11
    1e0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <Hstepper_rotate_CW+0x32e>
    1e10:	9a 8b       	std	Y+18, r25	; 0x12
    1e12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9c 8b       	std	Y+20, r25	; 0x14
    1e1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e20:	9c 89       	ldd	r25, Y+20	; 0x14
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <Hstepper_rotate_CW+0x322>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <Hstepper_rotate_CW+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9c 8b       	std	Y+20, r25	; 0x14
    1e3a:	8b 8b       	std	Y+19, r24	; 0x13
    1e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e40:	98 8b       	std	Y+16, r25	; 0x10
    1e42:	8f 87       	std	Y+15, r24	; 0x0f
    1e44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e46:	98 89       	ldd	r25, Y+16	; 0x10
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <Hstepper_rotate_CW+0x36a>
    1e4c:	98 8b       	std	Y+16, r25	; 0x10
    1e4e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_HIGH);
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	62 e0       	ldi	r22, 0x02	; 2
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	63 e0       	ldi	r22, 0x03	; 3
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e0       	ldi	r26, 0x00	; 0
    1e7e:	b0 e4       	ldi	r27, 0x40	; 64
    1e80:	8b 87       	std	Y+11, r24	; 0x0b
    1e82:	9c 87       	std	Y+12, r25	; 0x0c
    1e84:	ad 87       	std	Y+13, r26	; 0x0d
    1e86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a ef       	ldi	r20, 0xFA	; 250
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8f 83       	std	Y+7, r24	; 0x07
    1ea2:	98 87       	std	Y+8, r25	; 0x08
    1ea4:	a9 87       	std	Y+9, r26	; 0x09
    1ea6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <Hstepper_rotate_CW+0x3ec>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <Hstepper_rotate_CW+0x46a>
	else if (__tmp > 65535)
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <Hstepper_rotate_CW+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <Hstepper_rotate_CW+0x44c>
    1f0c:	88 ec       	ldi	r24, 0xC8	; 200
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9c 83       	std	Y+4, r25	; 0x04
    1f12:	8b 83       	std	Y+3, r24	; 0x03
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <Hstepper_rotate_CW+0x43a>
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <Hstepper_rotate_CW+0x42e>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <Hstepper_rotate_CW+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	6f 81       	ldd	r22, Y+7	; 0x07
    1f36:	78 85       	ldd	r23, Y+8	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <Hstepper_rotate_CW+0x476>
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01

	deg *= 10;
	deg /= 7 ;

	u16 i = 0;
	for (;i < deg;i++){
    1f5c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f5e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	9a af       	std	Y+58, r25	; 0x3a
    1f64:	89 af       	std	Y+57, r24	; 0x39
    1f66:	29 ad       	ldd	r18, Y+57	; 0x39
    1f68:	3a ad       	ldd	r19, Y+58	; 0x3a
    1f6a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f6c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f6e:	28 17       	cp	r18, r24
    1f70:	39 07       	cpc	r19, r25
    1f72:	08 f4       	brcc	.+2      	; 0x1f76 <Hstepper_rotate_CW+0x498>
    1f74:	db cd       	rjmp	.-1098   	; 0x1b2c <Hstepper_rotate_CW+0x4e>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_HIGH);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
		_delay_ms(2);
	}

}
    1f76:	ec 96       	adiw	r28, 0x3c	; 60
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <Hstepper_rotate_ACW>:

void Hstepper_rotate_ACW (u16 deg){
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	ec 97       	sbiw	r28, 0x3c	; 60
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	9c af       	std	Y+60, r25	; 0x3c
    1f9e:	8b af       	std	Y+59, r24	; 0x3b
	deg *= 10;
    1fa0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fa2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fa4:	9c 01       	movw	r18, r24
    1fa6:	22 0f       	add	r18, r18
    1fa8:	33 1f       	adc	r19, r19
    1faa:	c9 01       	movw	r24, r18
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	82 0f       	add	r24, r18
    1fb6:	93 1f       	adc	r25, r19
    1fb8:	9c af       	std	Y+60, r25	; 0x3c
    1fba:	8b af       	std	Y+59, r24	; 0x3b
	deg /= 7 ;
    1fbc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fbe:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fc0:	27 e0       	ldi	r18, 0x07	; 7
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	b9 01       	movw	r22, r18
    1fc6:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__udivmodhi4>
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9c af       	std	Y+60, r25	; 0x3c
    1fce:	8b af       	std	Y+59, r24	; 0x3b
	u16 i = 0;
    1fd0:	1a ae       	std	Y+58, r1	; 0x3a
    1fd2:	19 ae       	std	Y+57, r1	; 0x39
    1fd4:	1d c2       	rjmp	.+1082   	; 0x2410 <Hstepper_rotate_ACW+0x488>
	for (;i < deg;i++){

		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_HIGH);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	61 e0       	ldi	r22, 0x01	; 1
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	62 e0       	ldi	r22, 0x02	; 2
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	63 e0       	ldi	r22, 0x03	; 3
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a0 e0       	ldi	r26, 0x00	; 0
    2004:	b0 e4       	ldi	r27, 0x40	; 64
    2006:	8d ab       	std	Y+53, r24	; 0x35
    2008:	9e ab       	std	Y+54, r25	; 0x36
    200a:	af ab       	std	Y+55, r26	; 0x37
    200c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200e:	6d a9       	ldd	r22, Y+53	; 0x35
    2010:	7e a9       	ldd	r23, Y+54	; 0x36
    2012:	8f a9       	ldd	r24, Y+55	; 0x37
    2014:	98 ad       	ldd	r25, Y+56	; 0x38
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	4a ef       	ldi	r20, 0xFA	; 250
    201c:	54 e4       	ldi	r21, 0x44	; 68
    201e:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	89 ab       	std	Y+49, r24	; 0x31
    2028:	9a ab       	std	Y+50, r25	; 0x32
    202a:	ab ab       	std	Y+51, r26	; 0x33
    202c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    202e:	69 a9       	ldd	r22, Y+49	; 0x31
    2030:	7a a9       	ldd	r23, Y+50	; 0x32
    2032:	8b a9       	ldd	r24, Y+51	; 0x33
    2034:	9c a9       	ldd	r25, Y+52	; 0x34
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	5f e3       	ldi	r21, 0x3F	; 63
    203e:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2042:	88 23       	and	r24, r24
    2044:	2c f4       	brge	.+10     	; 0x2050 <Hstepper_rotate_ACW+0xc8>
		__ticks = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	98 ab       	std	Y+48, r25	; 0x30
    204c:	8f a7       	std	Y+47, r24	; 0x2f
    204e:	3f c0       	rjmp	.+126    	; 0x20ce <Hstepper_rotate_ACW+0x146>
	else if (__tmp > 65535)
    2050:	69 a9       	ldd	r22, Y+49	; 0x31
    2052:	7a a9       	ldd	r23, Y+50	; 0x32
    2054:	8b a9       	ldd	r24, Y+51	; 0x33
    2056:	9c a9       	ldd	r25, Y+52	; 0x34
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2064:	18 16       	cp	r1, r24
    2066:	4c f5       	brge	.+82     	; 0x20ba <Hstepper_rotate_ACW+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2068:	6d a9       	ldd	r22, Y+53	; 0x35
    206a:	7e a9       	ldd	r23, Y+54	; 0x36
    206c:	8f a9       	ldd	r24, Y+55	; 0x37
    206e:	98 ad       	ldd	r25, Y+56	; 0x38
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e2       	ldi	r20, 0x20	; 32
    2076:	51 e4       	ldi	r21, 0x41	; 65
    2078:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	98 ab       	std	Y+48, r25	; 0x30
    208e:	8f a7       	std	Y+47, r24	; 0x2f
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <Hstepper_rotate_ACW+0x128>
    2092:	88 ec       	ldi	r24, 0xC8	; 200
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9e a7       	std	Y+46, r25	; 0x2e
    2098:	8d a7       	std	Y+45, r24	; 0x2d
    209a:	8d a5       	ldd	r24, Y+45	; 0x2d
    209c:	9e a5       	ldd	r25, Y+46	; 0x2e
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <Hstepper_rotate_ACW+0x116>
    20a2:	9e a7       	std	Y+46, r25	; 0x2e
    20a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a8:	98 a9       	ldd	r25, Y+48	; 0x30
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	98 ab       	std	Y+48, r25	; 0x30
    20ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b2:	98 a9       	ldd	r25, Y+48	; 0x30
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	69 f7       	brne	.-38     	; 0x2092 <Hstepper_rotate_ACW+0x10a>
    20b8:	14 c0       	rjmp	.+40     	; 0x20e2 <Hstepper_rotate_ACW+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ba:	69 a9       	ldd	r22, Y+49	; 0x31
    20bc:	7a a9       	ldd	r23, Y+50	; 0x32
    20be:	8b a9       	ldd	r24, Y+51	; 0x33
    20c0:	9c a9       	ldd	r25, Y+52	; 0x34
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	98 ab       	std	Y+48, r25	; 0x30
    20cc:	8f a7       	std	Y+47, r24	; 0x2f
    20ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d0:	98 a9       	ldd	r25, Y+48	; 0x30
    20d2:	9c a7       	std	Y+44, r25	; 0x2c
    20d4:	8b a7       	std	Y+43, r24	; 0x2b
    20d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <Hstepper_rotate_ACW+0x152>
    20de:	9c a7       	std	Y+44, r25	; 0x2c
    20e0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	61 e0       	ldi	r22, 0x01	; 1
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	62 e0       	ldi	r22, 0x02	; 2
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_HIGH);
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	63 e0       	ldi	r22, 0x03	; 3
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a0 e0       	ldi	r26, 0x00	; 0
    2110:	b0 e4       	ldi	r27, 0x40	; 64
    2112:	8f a3       	std	Y+39, r24	; 0x27
    2114:	98 a7       	std	Y+40, r25	; 0x28
    2116:	a9 a7       	std	Y+41, r26	; 0x29
    2118:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211a:	6f a1       	ldd	r22, Y+39	; 0x27
    211c:	78 a5       	ldd	r23, Y+40	; 0x28
    211e:	89 a5       	ldd	r24, Y+41	; 0x29
    2120:	9a a5       	ldd	r25, Y+42	; 0x2a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a ef       	ldi	r20, 0xFA	; 250
    2128:	54 e4       	ldi	r21, 0x44	; 68
    212a:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8b a3       	std	Y+35, r24	; 0x23
    2134:	9c a3       	std	Y+36, r25	; 0x24
    2136:	ad a3       	std	Y+37, r26	; 0x25
    2138:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    213a:	6b a1       	ldd	r22, Y+35	; 0x23
    213c:	7c a1       	ldd	r23, Y+36	; 0x24
    213e:	8d a1       	ldd	r24, Y+37	; 0x25
    2140:	9e a1       	ldd	r25, Y+38	; 0x26
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e8       	ldi	r20, 0x80	; 128
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    214e:	88 23       	and	r24, r24
    2150:	2c f4       	brge	.+10     	; 0x215c <Hstepper_rotate_ACW+0x1d4>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9a a3       	std	Y+34, r25	; 0x22
    2158:	89 a3       	std	Y+33, r24	; 0x21
    215a:	3f c0       	rjmp	.+126    	; 0x21da <Hstepper_rotate_ACW+0x252>
	else if (__tmp > 65535)
    215c:	6b a1       	ldd	r22, Y+35	; 0x23
    215e:	7c a1       	ldd	r23, Y+36	; 0x24
    2160:	8d a1       	ldd	r24, Y+37	; 0x25
    2162:	9e a1       	ldd	r25, Y+38	; 0x26
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	4c f5       	brge	.+82     	; 0x21c6 <Hstepper_rotate_ACW+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	6f a1       	ldd	r22, Y+39	; 0x27
    2176:	78 a5       	ldd	r23, Y+40	; 0x28
    2178:	89 a5       	ldd	r24, Y+41	; 0x29
    217a:	9a a5       	ldd	r25, Y+42	; 0x2a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e2       	ldi	r20, 0x20	; 32
    2182:	51 e4       	ldi	r21, 0x41	; 65
    2184:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9a a3       	std	Y+34, r25	; 0x22
    219a:	89 a3       	std	Y+33, r24	; 0x21
    219c:	0f c0       	rjmp	.+30     	; 0x21bc <Hstepper_rotate_ACW+0x234>
    219e:	88 ec       	ldi	r24, 0xC8	; 200
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	98 a3       	std	Y+32, r25	; 0x20
    21a4:	8f 8f       	std	Y+31, r24	; 0x1f
    21a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21a8:	98 a1       	ldd	r25, Y+32	; 0x20
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <Hstepper_rotate_ACW+0x222>
    21ae:	98 a3       	std	Y+32, r25	; 0x20
    21b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	89 a1       	ldd	r24, Y+33	; 0x21
    21b4:	9a a1       	ldd	r25, Y+34	; 0x22
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	9a a3       	std	Y+34, r25	; 0x22
    21ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	89 a1       	ldd	r24, Y+33	; 0x21
    21be:	9a a1       	ldd	r25, Y+34	; 0x22
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	69 f7       	brne	.-38     	; 0x219e <Hstepper_rotate_ACW+0x216>
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <Hstepper_rotate_ACW+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c6:	6b a1       	ldd	r22, Y+35	; 0x23
    21c8:	7c a1       	ldd	r23, Y+36	; 0x24
    21ca:	8d a1       	ldd	r24, Y+37	; 0x25
    21cc:	9e a1       	ldd	r25, Y+38	; 0x26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9a a3       	std	Y+34, r25	; 0x22
    21d8:	89 a3       	std	Y+33, r24	; 0x21
    21da:	89 a1       	ldd	r24, Y+33	; 0x21
    21dc:	9a a1       	ldd	r25, Y+34	; 0x22
    21de:	9e 8f       	std	Y+30, r25	; 0x1e
    21e0:	8d 8f       	std	Y+29, r24	; 0x1d
    21e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <Hstepper_rotate_ACW+0x25e>
    21ea:	9e 8f       	std	Y+30, r25	; 0x1e
    21ec:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_HIGH);
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	63 e0       	ldi	r22, 0x03	; 3
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e0       	ldi	r26, 0x00	; 0
    221c:	b0 e4       	ldi	r27, 0x40	; 64
    221e:	89 8f       	std	Y+25, r24	; 0x19
    2220:	9a 8f       	std	Y+26, r25	; 0x1a
    2222:	ab 8f       	std	Y+27, r26	; 0x1b
    2224:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	69 8d       	ldd	r22, Y+25	; 0x19
    2228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8d 8b       	std	Y+21, r24	; 0x15
    2240:	9e 8b       	std	Y+22, r25	; 0x16
    2242:	af 8b       	std	Y+23, r26	; 0x17
    2244:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2246:	6d 89       	ldd	r22, Y+21	; 0x15
    2248:	7e 89       	ldd	r23, Y+22	; 0x16
    224a:	8f 89       	ldd	r24, Y+23	; 0x17
    224c:	98 8d       	ldd	r25, Y+24	; 0x18
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <Hstepper_rotate_ACW+0x2e0>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9c 8b       	std	Y+20, r25	; 0x14
    2264:	8b 8b       	std	Y+19, r24	; 0x13
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <Hstepper_rotate_ACW+0x35e>
	else if (__tmp > 65535)
    2268:	6d 89       	ldd	r22, Y+21	; 0x15
    226a:	7e 89       	ldd	r23, Y+22	; 0x16
    226c:	8f 89       	ldd	r24, Y+23	; 0x17
    226e:	98 8d       	ldd	r25, Y+24	; 0x18
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <Hstepper_rotate_ACW+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	69 8d       	ldd	r22, Y+25	; 0x19
    2282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9c 8b       	std	Y+20, r25	; 0x14
    22a6:	8b 8b       	std	Y+19, r24	; 0x13
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <Hstepper_rotate_ACW+0x340>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9a 8b       	std	Y+18, r25	; 0x12
    22b0:	89 8b       	std	Y+17, r24	; 0x11
    22b2:	89 89       	ldd	r24, Y+17	; 0x11
    22b4:	9a 89       	ldd	r25, Y+18	; 0x12
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <Hstepper_rotate_ACW+0x32e>
    22ba:	9a 8b       	std	Y+18, r25	; 0x12
    22bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8b 89       	ldd	r24, Y+19	; 0x13
    22c0:	9c 89       	ldd	r25, Y+20	; 0x14
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9c 8b       	std	Y+20, r25	; 0x14
    22c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ca:	9c 89       	ldd	r25, Y+20	; 0x14
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <Hstepper_rotate_ACW+0x322>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <Hstepper_rotate_ACW+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9c 8b       	std	Y+20, r25	; 0x14
    22e4:	8b 8b       	std	Y+19, r24	; 0x13
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	98 8b       	std	Y+16, r25	; 0x10
    22ec:	8f 87       	std	Y+15, r24	; 0x0f
    22ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f0:	98 89       	ldd	r25, Y+16	; 0x10
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <Hstepper_rotate_ACW+0x36a>
    22f6:	98 8b       	std	Y+16, r25	; 0x10
    22f8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_HIGH);
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	61 e0       	ldi	r22, 0x01	; 1
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    230e:	82 e0       	ldi	r24, 0x02	; 2
    2310:	62 e0       	ldi	r22, 0x02	; 2
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	63 e0       	ldi	r22, 0x03	; 3
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a0 e0       	ldi	r26, 0x00	; 0
    2328:	b0 e4       	ldi	r27, 0x40	; 64
    232a:	8b 87       	std	Y+11, r24	; 0x0b
    232c:	9c 87       	std	Y+12, r25	; 0x0c
    232e:	ad 87       	std	Y+13, r26	; 0x0d
    2330:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2332:	6b 85       	ldd	r22, Y+11	; 0x0b
    2334:	7c 85       	ldd	r23, Y+12	; 0x0c
    2336:	8d 85       	ldd	r24, Y+13	; 0x0d
    2338:	9e 85       	ldd	r25, Y+14	; 0x0e
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	4a ef       	ldi	r20, 0xFA	; 250
    2340:	54 e4       	ldi	r21, 0x44	; 68
    2342:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	8f 83       	std	Y+7, r24	; 0x07
    234c:	98 87       	std	Y+8, r25	; 0x08
    234e:	a9 87       	std	Y+9, r26	; 0x09
    2350:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2366:	88 23       	and	r24, r24
    2368:	2c f4       	brge	.+10     	; 0x2374 <Hstepper_rotate_ACW+0x3ec>
		__ticks = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9e 83       	std	Y+6, r25	; 0x06
    2370:	8d 83       	std	Y+5, r24	; 0x05
    2372:	3f c0       	rjmp	.+126    	; 0x23f2 <Hstepper_rotate_ACW+0x46a>
	else if (__tmp > 65535)
    2374:	6f 81       	ldd	r22, Y+7	; 0x07
    2376:	78 85       	ldd	r23, Y+8	; 0x08
    2378:	89 85       	ldd	r24, Y+9	; 0x09
    237a:	9a 85       	ldd	r25, Y+10	; 0x0a
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	57 e4       	ldi	r21, 0x47	; 71
    2384:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2388:	18 16       	cp	r1, r24
    238a:	4c f5       	brge	.+82     	; 0x23de <Hstepper_rotate_ACW+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238c:	6b 85       	ldd	r22, Y+11	; 0x0b
    238e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2390:	8d 85       	ldd	r24, Y+13	; 0x0d
    2392:	9e 85       	ldd	r25, Y+14	; 0x0e
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	51 e4       	ldi	r21, 0x41	; 65
    239c:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <Hstepper_rotate_ACW+0x44c>
    23b6:	88 ec       	ldi	r24, 0xC8	; 200
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9c 83       	std	Y+4, r25	; 0x04
    23bc:	8b 83       	std	Y+3, r24	; 0x03
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <Hstepper_rotate_ACW+0x43a>
    23c6:	9c 83       	std	Y+4, r25	; 0x04
    23c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	69 f7       	brne	.-38     	; 0x23b6 <Hstepper_rotate_ACW+0x42e>
    23dc:	14 c0       	rjmp	.+40     	; 0x2406 <Hstepper_rotate_ACW+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	9a 81       	ldd	r25, Y+2	; 0x02
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <Hstepper_rotate_ACW+0x476>
    2402:	9a 83       	std	Y+2, r25	; 0x02
    2404:	89 83       	std	Y+1, r24	; 0x01

void Hstepper_rotate_ACW (u16 deg){
	deg *= 10;
	deg /= 7 ;
	u16 i = 0;
	for (;i < deg;i++){
    2406:	89 ad       	ldd	r24, Y+57	; 0x39
    2408:	9a ad       	ldd	r25, Y+58	; 0x3a
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	9a af       	std	Y+58, r25	; 0x3a
    240e:	89 af       	std	Y+57, r24	; 0x39
    2410:	29 ad       	ldd	r18, Y+57	; 0x39
    2412:	3a ad       	ldd	r19, Y+58	; 0x3a
    2414:	8b ad       	ldd	r24, Y+59	; 0x3b
    2416:	9c ad       	ldd	r25, Y+60	; 0x3c
    2418:	28 17       	cp	r18, r24
    241a:	39 07       	cpc	r19, r25
    241c:	08 f4       	brcc	.+2      	; 0x2420 <Hstepper_rotate_ACW+0x498>
    241e:	db cd       	rjmp	.-1098   	; 0x1fd6 <Hstepper_rotate_ACW+0x4e>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
		_delay_ms(2);
	}

}
    2420:	ec 96       	adiw	r28, 0x3c	; 60
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <Hstepper_Stop>:


void Hstepper_Stop (){
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62

	MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    2444:	82 e0       	ldi	r24, 0x02	; 2
    2446:	61 e0       	ldi	r22, 0x01	; 1
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    2458:	82 e0       	ldi	r24, 0x02	; 2
    245a:	63 e0       	ldi	r22, 0x03	; 3
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <MADC_ErrorStateInit>:
#include "util/delay.h"
#include "MADC_interface.h"
#include "MADC_register.h"
#include "MADC_private.h"
#include "MADC_config.h"
Error_State_t MADC_ErrorStateInit(u8 Copy_u8VReferencetype,u8 Copy_u8Prescale, u8 Copy_u8Adjastment){
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	2a 97       	sbiw	r28, 0x0a	; 10
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	8a 83       	std	Y+2, r24	; 0x02
    247e:	6b 83       	std	Y+3, r22	; 0x03
    2480:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    2482:	19 82       	std	Y+1, r1	; 0x01
	//setting refrence volt
	switch (Copy_u8VReferencetype) {
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	3a 87       	std	Y+10, r19	; 0x0a
    248c:	29 87       	std	Y+9, r18	; 0x09
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	81 30       	cpi	r24, 0x01	; 1
    2494:	91 05       	cpc	r25, r1
    2496:	c1 f0       	breq	.+48     	; 0x24c8 <MADC_ErrorStateInit+0x60>
    2498:	29 85       	ldd	r18, Y+9	; 0x09
    249a:	3a 85       	ldd	r19, Y+10	; 0x0a
    249c:	23 30       	cpi	r18, 0x03	; 3
    249e:	31 05       	cpc	r19, r1
    24a0:	11 f1       	breq	.+68     	; 0x24e6 <MADC_ErrorStateInit+0x7e>
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	69 f5       	brne	.+90     	; 0x2504 <MADC_ErrorStateInit+0x9c>
	case ADC_AREF :
			//AREF and turned off Internal Vref
			CLR_BIT(ADMUX,ADMUX_REFS1);
    24aa:	a7 e2       	ldi	r26, 0x27	; 39
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e7 e2       	ldi	r30, 0x27	; 39
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	8f 77       	andi	r24, 0x7F	; 127
    24b6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,ADMUX_REFS0);
    24b8:	a7 e2       	ldi	r26, 0x27	; 39
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e7 e2       	ldi	r30, 0x27	; 39
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	8f 7b       	andi	r24, 0xBF	; 191
    24c4:	8c 93       	st	X, r24
    24c6:	20 c0       	rjmp	.+64     	; 0x2508 <MADC_ErrorStateInit+0xa0>
			break;
	case ADC_VREF_VCC :
			// AVCC with capacitor at AREF pin
	 		CLR_BIT(ADMUX,ADMUX_REFS1);
    24c8:	a7 e2       	ldi	r26, 0x27	; 39
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e7 e2       	ldi	r30, 0x27	; 39
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	8f 77       	andi	r24, 0x7F	; 127
    24d4:	8c 93       	st	X, r24
			SET_BIT(ADMUX,ADMUX_REFS0);
    24d6:	a7 e2       	ldi	r26, 0x27	; 39
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e7 e2       	ldi	r30, 0x27	; 39
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	80 64       	ori	r24, 0x40	; 64
    24e2:	8c 93       	st	X, r24
    24e4:	11 c0       	rjmp	.+34     	; 0x2508 <MADC_ErrorStateInit+0xa0>
			break;
	case ADC_INTERNAL_256mv :
			// Internal 2.56V Voltage Reference with external capacitor at AREF pin
			SET_BIT(ADMUX,ADMUX_REFS1);
    24e6:	a7 e2       	ldi	r26, 0x27	; 39
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e7 e2       	ldi	r30, 0x27	; 39
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	80 68       	ori	r24, 0x80	; 128
    24f2:	8c 93       	st	X, r24
			SET_BIT(ADMUX,ADMUX_REFS0);
    24f4:	a7 e2       	ldi	r26, 0x27	; 39
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e7 e2       	ldi	r30, 0x27	; 39
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	80 64       	ori	r24, 0x40	; 64
    2500:	8c 93       	st	X, r24
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <MADC_ErrorStateInit+0xa0>
			break;
	default : errorState = return_Nok;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
		switch (Copy_u8Adjastment) {
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	38 87       	std	Y+8, r19	; 0x08
    2510:	2f 83       	std	Y+7, r18	; 0x07
    2512:	8f 81       	ldd	r24, Y+7	; 0x07
    2514:	98 85       	ldd	r25, Y+8	; 0x08
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	31 f0       	breq	.+12     	; 0x2526 <MADC_ErrorStateInit+0xbe>
    251a:	2f 81       	ldd	r18, Y+7	; 0x07
    251c:	38 85       	ldd	r19, Y+8	; 0x08
    251e:	21 30       	cpi	r18, 0x01	; 1
    2520:	31 05       	cpc	r19, r1
    2522:	49 f0       	breq	.+18     	; 0x2536 <MADC_ErrorStateInit+0xce>
    2524:	10 c0       	rjmp	.+32     	; 0x2546 <MADC_ErrorStateInit+0xde>
		case ADC_RIGHT_ADJUSTMENT : 	CLR_BIT(ADMUX,ADMUX_ADLAR);	break;
    2526:	a7 e2       	ldi	r26, 0x27	; 39
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e7 e2       	ldi	r30, 0x27	; 39
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8f 7d       	andi	r24, 0xDF	; 223
    2532:	8c 93       	st	X, r24
    2534:	0a c0       	rjmp	.+20     	; 0x254a <MADC_ErrorStateInit+0xe2>
		case ADC_LEFT_ADJUSTMENT  :		SET_BIT(ADMUX,ADMUX_ADLAR);	break;
    2536:	a7 e2       	ldi	r26, 0x27	; 39
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e7 e2       	ldi	r30, 0x27	; 39
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	80 62       	ori	r24, 0x20	; 32
    2542:	8c 93       	st	X, r24
    2544:	02 c0       	rjmp	.+4      	; 0x254a <MADC_ErrorStateInit+0xe2>
		default: errorState = return_Nok;							break;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	89 83       	std	Y+1, r24	; 0x01
			ADC_PRESCALER_DIV32		5
			ADC_PRESCALER_DIV64		6
			ADC_PRESCALER_DIV128	7
		 * */
		//prescaler devetion by 32
		switch(Copy_u8Prescale){
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	28 2f       	mov	r18, r24
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	3e 83       	std	Y+6, r19	; 0x06
    2552:	2d 83       	std	Y+5, r18	; 0x05
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	84 30       	cpi	r24, 0x04	; 4
    255a:	91 05       	cpc	r25, r1
    255c:	09 f4       	brne	.+2      	; 0x2560 <MADC_ErrorStateInit+0xf8>
    255e:	6b c0       	rjmp	.+214    	; 0x2636 <MADC_ErrorStateInit+0x1ce>
    2560:	2d 81       	ldd	r18, Y+5	; 0x05
    2562:	3e 81       	ldd	r19, Y+6	; 0x06
    2564:	25 30       	cpi	r18, 0x05	; 5
    2566:	31 05       	cpc	r19, r1
    2568:	8c f4       	brge	.+34     	; 0x258c <MADC_ErrorStateInit+0x124>
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	82 30       	cpi	r24, 0x02	; 2
    2570:	91 05       	cpc	r25, r1
    2572:	a9 f1       	breq	.+106    	; 0x25de <MADC_ErrorStateInit+0x176>
    2574:	2d 81       	ldd	r18, Y+5	; 0x05
    2576:	3e 81       	ldd	r19, Y+6	; 0x06
    2578:	23 30       	cpi	r18, 0x03	; 3
    257a:	31 05       	cpc	r19, r1
    257c:	0c f0       	brlt	.+2      	; 0x2580 <MADC_ErrorStateInit+0x118>
    257e:	45 c0       	rjmp	.+138    	; 0x260a <MADC_ErrorStateInit+0x1a2>
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	91 05       	cpc	r25, r1
    2588:	a1 f0       	breq	.+40     	; 0x25b2 <MADC_ErrorStateInit+0x14a>
    258a:	ad c0       	rjmp	.+346    	; 0x26e6 <MADC_ErrorStateInit+0x27e>
    258c:	2d 81       	ldd	r18, Y+5	; 0x05
    258e:	3e 81       	ldd	r19, Y+6	; 0x06
    2590:	26 30       	cpi	r18, 0x06	; 6
    2592:	31 05       	cpc	r19, r1
    2594:	09 f4       	brne	.+2      	; 0x2598 <MADC_ErrorStateInit+0x130>
    2596:	7b c0       	rjmp	.+246    	; 0x268e <MADC_ErrorStateInit+0x226>
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	86 30       	cpi	r24, 0x06	; 6
    259e:	91 05       	cpc	r25, r1
    25a0:	0c f4       	brge	.+2      	; 0x25a4 <MADC_ErrorStateInit+0x13c>
    25a2:	5f c0       	rjmp	.+190    	; 0x2662 <MADC_ErrorStateInit+0x1fa>
    25a4:	2d 81       	ldd	r18, Y+5	; 0x05
    25a6:	3e 81       	ldd	r19, Y+6	; 0x06
    25a8:	27 30       	cpi	r18, 0x07	; 7
    25aa:	31 05       	cpc	r19, r1
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <MADC_ErrorStateInit+0x148>
    25ae:	85 c0       	rjmp	.+266    	; 0x26ba <MADC_ErrorStateInit+0x252>
    25b0:	9a c0       	rjmp	.+308    	; 0x26e6 <MADC_ErrorStateInit+0x27e>
		case ADC_PRESCALER_DIV2:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    25b2:	a6 e2       	ldi	r26, 0x26	; 38
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e6 e2       	ldi	r30, 0x26	; 38
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	81 60       	ori	r24, 0x01	; 1
    25be:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    25c0:	a6 e2       	ldi	r26, 0x26	; 38
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e6 e2       	ldi	r30, 0x26	; 38
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	8d 7f       	andi	r24, 0xFD	; 253
    25cc:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    25ce:	a6 e2       	ldi	r26, 0x26	; 38
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e6 e2       	ldi	r30, 0x26	; 38
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	8b 7f       	andi	r24, 0xFB	; 251
    25da:	8c 93       	st	X, r24
    25dc:	86 c0       	rjmp	.+268    	; 0x26ea <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV4:
			CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    25de:	a6 e2       	ldi	r26, 0x26	; 38
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e6 e2       	ldi	r30, 0x26	; 38
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	8e 7f       	andi	r24, 0xFE	; 254
    25ea:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    25ec:	a6 e2       	ldi	r26, 0x26	; 38
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e6 e2       	ldi	r30, 0x26	; 38
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	82 60       	ori	r24, 0x02	; 2
    25f8:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    25fa:	a6 e2       	ldi	r26, 0x26	; 38
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e6 e2       	ldi	r30, 0x26	; 38
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8b 7f       	andi	r24, 0xFB	; 251
    2606:	8c 93       	st	X, r24
    2608:	70 c0       	rjmp	.+224    	; 0x26ea <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV8:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    260a:	a6 e2       	ldi	r26, 0x26	; 38
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e6 e2       	ldi	r30, 0x26	; 38
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	81 60       	ori	r24, 0x01	; 1
    2616:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2618:	a6 e2       	ldi	r26, 0x26	; 38
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e6 e2       	ldi	r30, 0x26	; 38
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	82 60       	ori	r24, 0x02	; 2
    2624:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2626:	a6 e2       	ldi	r26, 0x26	; 38
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e6 e2       	ldi	r30, 0x26	; 38
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	8b 7f       	andi	r24, 0xFB	; 251
    2632:	8c 93       	st	X, r24
    2634:	5a c0       	rjmp	.+180    	; 0x26ea <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV16:
			CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2636:	a6 e2       	ldi	r26, 0x26	; 38
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e6 e2       	ldi	r30, 0x26	; 38
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	8e 7f       	andi	r24, 0xFE	; 254
    2642:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2644:	a6 e2       	ldi	r26, 0x26	; 38
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e6 e2       	ldi	r30, 0x26	; 38
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	8d 7f       	andi	r24, 0xFD	; 253
    2650:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2652:	a6 e2       	ldi	r26, 0x26	; 38
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e6 e2       	ldi	r30, 0x26	; 38
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	84 60       	ori	r24, 0x04	; 4
    265e:	8c 93       	st	X, r24
    2660:	44 c0       	rjmp	.+136    	; 0x26ea <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV32:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2662:	a6 e2       	ldi	r26, 0x26	; 38
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e6 e2       	ldi	r30, 0x26	; 38
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	81 60       	ori	r24, 0x01	; 1
    266e:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2670:	a6 e2       	ldi	r26, 0x26	; 38
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e6 e2       	ldi	r30, 0x26	; 38
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	8d 7f       	andi	r24, 0xFD	; 253
    267c:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    267e:	a6 e2       	ldi	r26, 0x26	; 38
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e6 e2       	ldi	r30, 0x26	; 38
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	84 60       	ori	r24, 0x04	; 4
    268a:	8c 93       	st	X, r24
    268c:	2e c0       	rjmp	.+92     	; 0x26ea <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV64:
			CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    268e:	a6 e2       	ldi	r26, 0x26	; 38
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e6 e2       	ldi	r30, 0x26	; 38
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	8e 7f       	andi	r24, 0xFE	; 254
    269a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    269c:	a6 e2       	ldi	r26, 0x26	; 38
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e6 e2       	ldi	r30, 0x26	; 38
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	82 60       	ori	r24, 0x02	; 2
    26a8:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    26aa:	a6 e2       	ldi	r26, 0x26	; 38
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e6 e2       	ldi	r30, 0x26	; 38
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	84 60       	ori	r24, 0x04	; 4
    26b6:	8c 93       	st	X, r24
    26b8:	18 c0       	rjmp	.+48     	; 0x26ea <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV128:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    26ba:	a6 e2       	ldi	r26, 0x26	; 38
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	e6 e2       	ldi	r30, 0x26	; 38
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	81 60       	ori	r24, 0x01	; 1
    26c6:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    26c8:	a6 e2       	ldi	r26, 0x26	; 38
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e6 e2       	ldi	r30, 0x26	; 38
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	82 60       	ori	r24, 0x02	; 2
    26d4:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    26d6:	a6 e2       	ldi	r26, 0x26	; 38
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e6 e2       	ldi	r30, 0x26	; 38
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	84 60       	ori	r24, 0x04	; 4
    26e2:	8c 93       	st	X, r24
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <MADC_ErrorStateInit+0x282>
			break;
		default: errorState = return_Nok;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	89 83       	std	Y+1, r24	; 0x01
		}

		//enable ADC
		SET_BIT(ADCSRA,ADCSRA_ADEN);
    26ea:	a6 e2       	ldi	r26, 0x26	; 38
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e6 e2       	ldi	r30, 0x26	; 38
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	80 68       	ori	r24, 0x80	; 128
    26f6:	8c 93       	st	X, r24
		return errorState;
    26f8:	89 81       	ldd	r24, Y+1	; 0x01

}
    26fa:	2a 96       	adiw	r28, 0x0a	; 10
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <MADC_voidInitDefault>:
void MADC_voidInitDefault(void){
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62

	//setting refrence volt internal
	CLR_BIT(ADMUX,ADMUX_REFS1);
    2714:	a7 e2       	ldi	r26, 0x27	; 39
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e7 e2       	ldi	r30, 0x27	; 39
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	8f 77       	andi	r24, 0x7F	; 127
    2720:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    2722:	a7 e2       	ldi	r26, 0x27	; 39
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e7 e2       	ldi	r30, 0x27	; 39
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	80 64       	ori	r24, 0x40	; 64
    272e:	8c 93       	st	X, r24

	//setting adjust right
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    2730:	a7 e2       	ldi	r26, 0x27	; 39
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e7 e2       	ldi	r30, 0x27	; 39
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	8f 7d       	andi	r24, 0xDF	; 223
    273c:	8c 93       	st	X, r24

	//prescaler devetion by 32
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    273e:	a6 e2       	ldi	r26, 0x26	; 38
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e6 e2       	ldi	r30, 0x26	; 38
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	81 60       	ori	r24, 0x01	; 1
    274a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    274c:	a6 e2       	ldi	r26, 0x26	; 38
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e6 e2       	ldi	r30, 0x26	; 38
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	8d 7f       	andi	r24, 0xFD	; 253
    2758:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    275a:	a6 e2       	ldi	r26, 0x26	; 38
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e6 e2       	ldi	r30, 0x26	; 38
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	84 60       	ori	r24, 0x04	; 4
    2766:	8c 93       	st	X, r24

	//enable ADC
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    2768:	a6 e2       	ldi	r26, 0x26	; 38
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e6 e2       	ldi	r30, 0x26	; 38
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	80 68       	ori	r24, 0x80	; 128
    2774:	8c 93       	st	X, r24

}
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <MADC_u16GetValue>:
u16 MADC_u16GetValue(u8 Copy_u8AdcChannel){
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	0f 92       	push	r0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	89 83       	std	Y+1, r24	; 0x01
	//clearing selection bits in order to choose
	ADMUX &= 0b11100000 ;
    2788:	a7 e2       	ldi	r26, 0x27	; 39
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e7 e2       	ldi	r30, 0x27	; 39
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	80 7e       	andi	r24, 0xE0	; 224
    2794:	8c 93       	st	X, r24
	// selceting chunnle
	ADMUX |= Copy_u8AdcChannel;
    2796:	a7 e2       	ldi	r26, 0x27	; 39
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e7 e2       	ldi	r30, 0x27	; 39
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	90 81       	ld	r25, Z
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	89 2b       	or	r24, r25
    27a4:	8c 93       	st	X, r24
	// ADC start convertion
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    27a6:	a6 e2       	ldi	r26, 0x26	; 38
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e6 e2       	ldi	r30, 0x26	; 38
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	80 64       	ori	r24, 0x40	; 64
    27b2:	8c 93       	st	X, r24

	// busy wait until finish
	while ((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0));
    27b4:	e6 e2       	ldi	r30, 0x26	; 38
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	82 95       	swap	r24
    27bc:	8f 70       	andi	r24, 0x0F	; 15
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	81 70       	andi	r24, 0x01	; 1
    27c4:	90 70       	andi	r25, 0x00	; 0
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	a9 f3       	breq	.-22     	; 0x27b4 <MADC_u16GetValue+0x38>
		// clear flag
		SET_BIT(ADCSRA,ADCSRA_ADIF);
    27ca:	a6 e2       	ldi	r26, 0x26	; 38
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e6 e2       	ldi	r30, 0x26	; 38
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	80 61       	ori	r24, 0x10	; 16
    27d6:	8c 93       	st	X, r24

	return ADC_DATA_REG;
    27d8:	e4 e2       	ldi	r30, 0x24	; 36
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01

}
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <MADC_s32Mapping>:

s32 MADC_s32Mapping(s32 Copy_s32MaxOut ,s32 Copy_s32MiniOut,u16 Copy_u16MaxDigitalSensorRead , u16 Copy_u16MiniDigitalSensorRead ,u16 Copy_u16DigitalSensorRead)
{
    27e8:	cf 92       	push	r12
    27ea:	df 92       	push	r13
    27ec:	ef 92       	push	r14
    27ee:	ff 92       	push	r15
    27f0:	0f 93       	push	r16
    27f2:	1f 93       	push	r17
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	62 97       	sbiw	r28, 0x12	; 18
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	6d 83       	std	Y+5, r22	; 0x05
    280a:	7e 83       	std	Y+6, r23	; 0x06
    280c:	8f 83       	std	Y+7, r24	; 0x07
    280e:	98 87       	std	Y+8, r25	; 0x08
    2810:	29 87       	std	Y+9, r18	; 0x09
    2812:	3a 87       	std	Y+10, r19	; 0x0a
    2814:	4b 87       	std	Y+11, r20	; 0x0b
    2816:	5c 87       	std	Y+12, r21	; 0x0c
    2818:	1e 87       	std	Y+14, r17	; 0x0e
    281a:	0d 87       	std	Y+13, r16	; 0x0d
    281c:	f8 8a       	std	Y+16, r15	; 0x10
    281e:	ef 86       	std	Y+15, r14	; 0x0f
    2820:	da 8a       	std	Y+18, r13	; 0x12
    2822:	c9 8a       	std	Y+17, r12	; 0x11
	s32 X;
	X =(s32) (( (f64) (  (f64) (Copy_s32MaxOut - Copy_s32MiniOut) * (f64)  ((Copy_u16DigitalSensorRead-Copy_u16MiniDigitalSensorRead) )/ (f64)( Copy_u16MaxDigitalSensorRead -Copy_u16MiniDigitalSensorRead)) + Copy_s32MiniOut) + 1);
    2824:	2d 81       	ldd	r18, Y+5	; 0x05
    2826:	3e 81       	ldd	r19, Y+6	; 0x06
    2828:	4f 81       	ldd	r20, Y+7	; 0x07
    282a:	58 85       	ldd	r21, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	ab 85       	ldd	r26, Y+11	; 0x0b
    2832:	bc 85       	ldd	r27, Y+12	; 0x0c
    2834:	79 01       	movw	r14, r18
    2836:	8a 01       	movw	r16, r20
    2838:	e8 1a       	sub	r14, r24
    283a:	f9 0a       	sbc	r15, r25
    283c:	0a 0b       	sbc	r16, r26
    283e:	1b 0b       	sbc	r17, r27
    2840:	d8 01       	movw	r26, r16
    2842:	c7 01       	movw	r24, r14
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
    284c:	7b 01       	movw	r14, r22
    284e:	8c 01       	movw	r16, r24
    2850:	29 89       	ldd	r18, Y+17	; 0x11
    2852:	3a 89       	ldd	r19, Y+18	; 0x12
    2854:	8f 85       	ldd	r24, Y+15	; 0x0f
    2856:	98 89       	ldd	r25, Y+16	; 0x10
    2858:	a9 01       	movw	r20, r18
    285a:	48 1b       	sub	r20, r24
    285c:	59 0b       	sbc	r21, r25
    285e:	ca 01       	movw	r24, r20
    2860:	cc 01       	movw	r24, r24
    2862:	a0 e0       	ldi	r26, 0x00	; 0
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 af 05 	call	0xb5e	; 0xb5e <__floatunsisf>
    286e:	9b 01       	movw	r18, r22
    2870:	ac 01       	movw	r20, r24
    2872:	c8 01       	movw	r24, r16
    2874:	b7 01       	movw	r22, r14
    2876:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	7c 01       	movw	r14, r24
    2880:	8d 01       	movw	r16, r26
    2882:	2d 85       	ldd	r18, Y+13	; 0x0d
    2884:	3e 85       	ldd	r19, Y+14	; 0x0e
    2886:	8f 85       	ldd	r24, Y+15	; 0x0f
    2888:	98 89       	ldd	r25, Y+16	; 0x10
    288a:	a9 01       	movw	r20, r18
    288c:	48 1b       	sub	r20, r24
    288e:	59 0b       	sbc	r21, r25
    2890:	ca 01       	movw	r24, r20
    2892:	cc 01       	movw	r24, r24
    2894:	a0 e0       	ldi	r26, 0x00	; 0
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__floatunsisf>
    28a0:	9b 01       	movw	r18, r22
    28a2:	ac 01       	movw	r20, r24
    28a4:	c8 01       	movw	r24, r16
    28a6:	b7 01       	movw	r22, r14
    28a8:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	7c 01       	movw	r14, r24
    28b2:	8d 01       	movw	r16, r26
    28b4:	69 85       	ldd	r22, Y+9	; 0x09
    28b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    28b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    28bc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
    28c0:	9b 01       	movw	r18, r22
    28c2:	ac 01       	movw	r20, r24
    28c4:	c8 01       	movw	r24, r16
    28c6:	b7 01       	movw	r22, r14
    28c8:	0e 94 9a 02 	call	0x534	; 0x534 <__addsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 9a 02 	call	0x534	; 0x534 <__addsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixsfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	ab 83       	std	Y+3, r26	; 0x03
    28f6:	bc 83       	std	Y+4, r27	; 0x04
	return X ;
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	9a 81       	ldd	r25, Y+2	; 0x02
    28fc:	ab 81       	ldd	r26, Y+3	; 0x03
    28fe:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	62 96       	adiw	r28, 0x12	; 18
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	ff 90       	pop	r15
    291a:	ef 90       	pop	r14
    291c:	df 90       	pop	r13
    291e:	cf 90       	pop	r12
    2920:	08 95       	ret

00002922 <Port_voidInit>:
#include "MDIO_interface.h"
#include "MDIO_registers.h"
#include "MDIO_private.h"
#include "MDIO_config.h"

void Port_voidInit(void){
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR;
    292a:	ea e3       	ldi	r30, 0x3A	; 58
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	8f ef       	ldi	r24, 0xFF	; 255
    2930:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2932:	e7 e3       	ldi	r30, 0x37	; 55
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	8f e4       	ldi	r24, 0x4F	; 79
    2938:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    293a:	e4 e3       	ldi	r30, 0x34	; 52
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	8f ef       	ldi	r24, 0xFF	; 255
    2940:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2942:	e1 e3       	ldi	r30, 0x31	; 49
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	8f ef       	ldi	r24, 0xFF	; 255
    2948:	80 83       	st	Z, r24
	PORTA = PORTA_INITAL_VAL;
    294a:	eb e3       	ldi	r30, 0x3B	; 59
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	10 82       	st	Z, r1
	PORTB = PORTB_INITAL_VAL;
    2950:	e8 e3       	ldi	r30, 0x38	; 56
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	10 82       	st	Z, r1
	PORTC = PORTC_INITAL_VAL;
    2956:	e5 e3       	ldi	r30, 0x35	; 53
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	10 82       	st	Z, r1
	PORTD = PORTD_INITAL_VAL;
    295c:	e2 e3       	ldi	r30, 0x32	; 50
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	10 82       	st	Z, r1





}
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <MDIO_ErrorS_EnablePinPullUp>:
Error_State_t MDIO_ErrorS_EnablePinPullUp( u8 Copy_u8Port , u8 Copy_u8Pin){
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	00 d0       	rcall	.+0      	; 0x296e <MDIO_ErrorS_EnablePinPullUp+0x6>
    296e:	00 d0       	rcall	.+0      	; 0x2970 <MDIO_ErrorS_EnablePinPullUp+0x8>
    2970:	0f 92       	push	r0
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	8a 83       	std	Y+2, r24	; 0x02
    2978:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    297a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin > 7){
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	88 30       	cpi	r24, 0x08	; 8
    2980:	10 f0       	brcs	.+4      	; 0x2986 <MDIO_ErrorS_EnablePinPullUp+0x1e>
		errorState = return_Nok;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	89 83       	std	Y+1, r24	; 0x01
	}

	SFIOR &= ~(1<<2);
    2986:	a0 e5       	ldi	r26, 0x50	; 80
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e0 e5       	ldi	r30, 0x50	; 80
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	8b 7f       	andi	r24, 0xFB	; 251
    2992:	8c 93       	st	X, r24
	switch (Copy_u8Port){
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	3d 83       	std	Y+5, r19	; 0x05
    299c:	2c 83       	std	Y+4, r18	; 0x04
    299e:	8c 81       	ldd	r24, Y+4	; 0x04
    29a0:	9d 81       	ldd	r25, Y+5	; 0x05
    29a2:	82 30       	cpi	r24, 0x02	; 2
    29a4:	91 05       	cpc	r25, r1
    29a6:	51 f1       	breq	.+84     	; 0x29fc <MDIO_ErrorS_EnablePinPullUp+0x94>
    29a8:	2c 81       	ldd	r18, Y+4	; 0x04
    29aa:	3d 81       	ldd	r19, Y+5	; 0x05
    29ac:	23 30       	cpi	r18, 0x03	; 3
    29ae:	31 05       	cpc	r19, r1
    29b0:	34 f4       	brge	.+12     	; 0x29be <MDIO_ErrorS_EnablePinPullUp+0x56>
    29b2:	8c 81       	ldd	r24, Y+4	; 0x04
    29b4:	9d 81       	ldd	r25, Y+5	; 0x05
    29b6:	81 30       	cpi	r24, 0x01	; 1
    29b8:	91 05       	cpc	r25, r1
    29ba:	61 f0       	breq	.+24     	; 0x29d4 <MDIO_ErrorS_EnablePinPullUp+0x6c>
    29bc:	5b c0       	rjmp	.+182    	; 0x2a74 <MDIO_ErrorS_EnablePinPullUp+0x10c>
    29be:	2c 81       	ldd	r18, Y+4	; 0x04
    29c0:	3d 81       	ldd	r19, Y+5	; 0x05
    29c2:	23 30       	cpi	r18, 0x03	; 3
    29c4:	31 05       	cpc	r19, r1
    29c6:	71 f1       	breq	.+92     	; 0x2a24 <MDIO_ErrorS_EnablePinPullUp+0xbc>
    29c8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ca:	9d 81       	ldd	r25, Y+5	; 0x05
    29cc:	84 30       	cpi	r24, 0x04	; 4
    29ce:	91 05       	cpc	r25, r1
    29d0:	e9 f1       	breq	.+122    	; 0x2a4c <MDIO_ErrorS_EnablePinPullUp+0xe4>
    29d2:	50 c0       	rjmp	.+160    	; 0x2a74 <MDIO_ErrorS_EnablePinPullUp+0x10c>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    29d4:	ab e3       	ldi	r26, 0x3B	; 59
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	eb e3       	ldi	r30, 0x3B	; 59
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	48 2f       	mov	r20, r24
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	02 2e       	mov	r0, r18
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <MDIO_ErrorS_EnablePinPullUp+0x8a>
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	0a 94       	dec	r0
    29f4:	e2 f7       	brpl	.-8      	; 0x29ee <MDIO_ErrorS_EnablePinPullUp+0x86>
    29f6:	84 2b       	or	r24, r20
    29f8:	8c 93       	st	X, r24
    29fa:	3e c0       	rjmp	.+124    	; 0x2a78 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    29fc:	a8 e3       	ldi	r26, 0x38	; 56
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e8 e3       	ldi	r30, 0x38	; 56
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	48 2f       	mov	r20, r24
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	02 2e       	mov	r0, r18
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <MDIO_ErrorS_EnablePinPullUp+0xb2>
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	0a 94       	dec	r0
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <MDIO_ErrorS_EnablePinPullUp+0xae>
    2a1e:	84 2b       	or	r24, r20
    2a20:	8c 93       	st	X, r24
    2a22:	2a c0       	rjmp	.+84     	; 0x2a78 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    2a24:	a5 e3       	ldi	r26, 0x35	; 53
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e5 e3       	ldi	r30, 0x35	; 53
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	48 2f       	mov	r20, r24
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	02 2e       	mov	r0, r18
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <MDIO_ErrorS_EnablePinPullUp+0xda>
    2a3e:	88 0f       	add	r24, r24
    2a40:	99 1f       	adc	r25, r25
    2a42:	0a 94       	dec	r0
    2a44:	e2 f7       	brpl	.-8      	; 0x2a3e <MDIO_ErrorS_EnablePinPullUp+0xd6>
    2a46:	84 2b       	or	r24, r20
    2a48:	8c 93       	st	X, r24
    2a4a:	16 c0       	rjmp	.+44     	; 0x2a78 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    2a4c:	a2 e3       	ldi	r26, 0x32	; 50
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e2 e3       	ldi	r30, 0x32	; 50
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	48 2f       	mov	r20, r24
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	02 2e       	mov	r0, r18
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <MDIO_ErrorS_EnablePinPullUp+0x102>
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	0a 94       	dec	r0
    2a6c:	e2 f7       	brpl	.-8      	; 0x2a66 <MDIO_ErrorS_EnablePinPullUp+0xfe>
    2a6e:	84 2b       	or	r24, r20
    2a70:	8c 93       	st	X, r24
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <MDIO_ErrorS_EnablePinPullUp+0x110>
					default: errorState = return_Nok; break;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	89 83       	std	Y+1, r24	; 0x01
				}
	return errorState;
    2a78:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	27 97       	sbiw	r28, 0x07	; 7
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	89 83       	std	Y+1, r24	; 0x01
    2aa0:	6a 83       	std	Y+2, r22	; 0x02
    2aa2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Mode == DIO_INPUT){
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	88 23       	and	r24, r24
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <MDIO_voidSetPinDirection+0x22>
    2aaa:	75 c0       	rjmp	.+234    	; 0x2b96 <MDIO_voidSetPinDirection+0x10c>
			switch (Copy_u8Port){
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	3f 83       	std	Y+7, r19	; 0x07
    2ab4:	2e 83       	std	Y+6, r18	; 0x06
    2ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aba:	82 30       	cpi	r24, 0x02	; 2
    2abc:	91 05       	cpc	r25, r1
    2abe:	61 f1       	breq	.+88     	; 0x2b18 <MDIO_voidSetPinDirection+0x8e>
    2ac0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ac2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ac4:	23 30       	cpi	r18, 0x03	; 3
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	34 f4       	brge	.+12     	; 0x2ad6 <MDIO_voidSetPinDirection+0x4c>
    2aca:	8e 81       	ldd	r24, Y+6	; 0x06
    2acc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ace:	81 30       	cpi	r24, 0x01	; 1
    2ad0:	91 05       	cpc	r25, r1
    2ad2:	69 f0       	breq	.+26     	; 0x2aee <MDIO_voidSetPinDirection+0x64>
    2ad4:	d3 c0       	rjmp	.+422    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
    2ad6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ad8:	3f 81       	ldd	r19, Y+7	; 0x07
    2ada:	23 30       	cpi	r18, 0x03	; 3
    2adc:	31 05       	cpc	r19, r1
    2ade:	89 f1       	breq	.+98     	; 0x2b42 <MDIO_voidSetPinDirection+0xb8>
    2ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae4:	84 30       	cpi	r24, 0x04	; 4
    2ae6:	91 05       	cpc	r25, r1
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <MDIO_voidSetPinDirection+0x62>
    2aea:	40 c0       	rjmp	.+128    	; 0x2b6c <MDIO_voidSetPinDirection+0xe2>
    2aec:	c7 c0       	rjmp	.+398    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin);break;
    2aee:	aa e3       	ldi	r26, 0x3A	; 58
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	ea e3       	ldi	r30, 0x3A	; 58
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	48 2f       	mov	r20, r24
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	28 2f       	mov	r18, r24
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	02 2e       	mov	r0, r18
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <MDIO_voidSetPinDirection+0x82>
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	0a 94       	dec	r0
    2b0e:	e2 f7       	brpl	.-8      	; 0x2b08 <MDIO_voidSetPinDirection+0x7e>
    2b10:	80 95       	com	r24
    2b12:	84 23       	and	r24, r20
    2b14:	8c 93       	st	X, r24
    2b16:	b2 c0       	rjmp	.+356    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
    2b18:	a7 e3       	ldi	r26, 0x37	; 55
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e7 e3       	ldi	r30, 0x37	; 55
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	48 2f       	mov	r20, r24
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	02 2e       	mov	r0, r18
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <MDIO_voidSetPinDirection+0xac>
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	0a 94       	dec	r0
    2b38:	e2 f7       	brpl	.-8      	; 0x2b32 <MDIO_voidSetPinDirection+0xa8>
    2b3a:	80 95       	com	r24
    2b3c:	84 23       	and	r24, r20
    2b3e:	8c 93       	st	X, r24
    2b40:	9d c0       	rjmp	.+314    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
    2b42:	a4 e3       	ldi	r26, 0x34	; 52
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e4 e3       	ldi	r30, 0x34	; 52
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	48 2f       	mov	r20, r24
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	02 2e       	mov	r0, r18
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <MDIO_voidSetPinDirection+0xd6>
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	0a 94       	dec	r0
    2b62:	e2 f7       	brpl	.-8      	; 0x2b5c <MDIO_voidSetPinDirection+0xd2>
    2b64:	80 95       	com	r24
    2b66:	84 23       	and	r24, r20
    2b68:	8c 93       	st	X, r24
    2b6a:	88 c0       	rjmp	.+272    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
    2b6c:	a1 e3       	ldi	r26, 0x31	; 49
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e1 e3       	ldi	r30, 0x31	; 49
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	48 2f       	mov	r20, r24
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	02 2e       	mov	r0, r18
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <MDIO_voidSetPinDirection+0x100>
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	0a 94       	dec	r0
    2b8c:	e2 f7       	brpl	.-8      	; 0x2b86 <MDIO_voidSetPinDirection+0xfc>
    2b8e:	80 95       	com	r24
    2b90:	84 23       	and	r24, r20
    2b92:	8c 93       	st	X, r24
    2b94:	73 c0       	rjmp	.+230    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
				default: break;
			}

	}
	else if(Copy_U8Mode == DIO_OUTPUT){
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	81 30       	cpi	r24, 0x01	; 1
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <MDIO_voidSetPinDirection+0x114>
    2b9c:	6f c0       	rjmp	.+222    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
			switch (Copy_u8Port){
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	3d 83       	std	Y+5, r19	; 0x05
    2ba6:	2c 83       	std	Y+4, r18	; 0x04
    2ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    2baa:	9d 81       	ldd	r25, Y+5	; 0x05
    2bac:	82 30       	cpi	r24, 0x02	; 2
    2bae:	91 05       	cpc	r25, r1
    2bb0:	51 f1       	breq	.+84     	; 0x2c06 <MDIO_voidSetPinDirection+0x17c>
    2bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb6:	23 30       	cpi	r18, 0x03	; 3
    2bb8:	31 05       	cpc	r19, r1
    2bba:	34 f4       	brge	.+12     	; 0x2bc8 <MDIO_voidSetPinDirection+0x13e>
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	61 f0       	breq	.+24     	; 0x2bde <MDIO_voidSetPinDirection+0x154>
    2bc6:	5a c0       	rjmp	.+180    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
    2bc8:	2c 81       	ldd	r18, Y+4	; 0x04
    2bca:	3d 81       	ldd	r19, Y+5	; 0x05
    2bcc:	23 30       	cpi	r18, 0x03	; 3
    2bce:	31 05       	cpc	r19, r1
    2bd0:	71 f1       	breq	.+92     	; 0x2c2e <MDIO_voidSetPinDirection+0x1a4>
    2bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd6:	84 30       	cpi	r24, 0x04	; 4
    2bd8:	91 05       	cpc	r25, r1
    2bda:	e9 f1       	breq	.+122    	; 0x2c56 <MDIO_voidSetPinDirection+0x1cc>
    2bdc:	4f c0       	rjmp	.+158    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin);break;
    2bde:	aa e3       	ldi	r26, 0x3A	; 58
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	ea e3       	ldi	r30, 0x3A	; 58
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	48 2f       	mov	r20, r24
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	02 2e       	mov	r0, r18
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <MDIO_voidSetPinDirection+0x172>
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	0a 94       	dec	r0
    2bfe:	e2 f7       	brpl	.-8      	; 0x2bf8 <MDIO_voidSetPinDirection+0x16e>
    2c00:	84 2b       	or	r24, r20
    2c02:	8c 93       	st	X, r24
    2c04:	3b c0       	rjmp	.+118    	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
    2c06:	a7 e3       	ldi	r26, 0x37	; 55
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e7 e3       	ldi	r30, 0x37	; 55
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	48 2f       	mov	r20, r24
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	02 2e       	mov	r0, r18
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <MDIO_voidSetPinDirection+0x19a>
    2c20:	88 0f       	add	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	0a 94       	dec	r0
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <MDIO_voidSetPinDirection+0x196>
    2c28:	84 2b       	or	r24, r20
    2c2a:	8c 93       	st	X, r24
    2c2c:	27 c0       	rjmp	.+78     	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
    2c2e:	a4 e3       	ldi	r26, 0x34	; 52
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e4 e3       	ldi	r30, 0x34	; 52
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	48 2f       	mov	r20, r24
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	28 2f       	mov	r18, r24
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	02 2e       	mov	r0, r18
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <MDIO_voidSetPinDirection+0x1c2>
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	0a 94       	dec	r0
    2c4e:	e2 f7       	brpl	.-8      	; 0x2c48 <MDIO_voidSetPinDirection+0x1be>
    2c50:	84 2b       	or	r24, r20
    2c52:	8c 93       	st	X, r24
    2c54:	13 c0       	rjmp	.+38     	; 0x2c7c <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
    2c56:	a1 e3       	ldi	r26, 0x31	; 49
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e1 e3       	ldi	r30, 0x31	; 49
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	48 2f       	mov	r20, r24
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	02 2e       	mov	r0, r18
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <MDIO_voidSetPinDirection+0x1ea>
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	0a 94       	dec	r0
    2c76:	e2 f7       	brpl	.-8      	; 0x2c70 <MDIO_voidSetPinDirection+0x1e6>
    2c78:	84 2b       	or	r24, r20
    2c7a:	8c 93       	st	X, r24
				default: break;
			}
	}

}
    2c7c:	27 96       	adiw	r28, 0x07	; 7
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <MDIO_ErrorS_SetPinValue>:
Error_State_t MDIO_ErrorS_SetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	28 97       	sbiw	r28, 0x08	; 8
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	8a 83       	std	Y+2, r24	; 0x02
    2ca4:	6b 83       	std	Y+3, r22	; 0x03
    2ca6:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    2ca8:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	88 30       	cpi	r24, 0x08	; 8
    2cae:	10 f0       	brcs	.+4      	; 0x2cb4 <MDIO_ErrorS_SetPinValue+0x26>
		errorState = return_Nok;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	89 83       	std	Y+1, r24	; 0x01
	}

	if(Copy_U8Mode == DIO_LOW){
    2cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb6:	88 23       	and	r24, r24
    2cb8:	09 f0       	breq	.+2      	; 0x2cbc <MDIO_ErrorS_SetPinValue+0x2e>
    2cba:	78 c0       	rjmp	.+240    	; 0x2dac <MDIO_ErrorS_SetPinValue+0x11e>
				switch (Copy_u8Port){
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	38 87       	std	Y+8, r19	; 0x08
    2cc4:	2f 83       	std	Y+7, r18	; 0x07
    2cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc8:	98 85       	ldd	r25, Y+8	; 0x08
    2cca:	82 30       	cpi	r24, 0x02	; 2
    2ccc:	91 05       	cpc	r25, r1
    2cce:	61 f1       	breq	.+88     	; 0x2d28 <MDIO_ErrorS_SetPinValue+0x9a>
    2cd0:	2f 81       	ldd	r18, Y+7	; 0x07
    2cd2:	38 85       	ldd	r19, Y+8	; 0x08
    2cd4:	23 30       	cpi	r18, 0x03	; 3
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	34 f4       	brge	.+12     	; 0x2ce6 <MDIO_ErrorS_SetPinValue+0x58>
    2cda:	8f 81       	ldd	r24, Y+7	; 0x07
    2cdc:	98 85       	ldd	r25, Y+8	; 0x08
    2cde:	81 30       	cpi	r24, 0x01	; 1
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	69 f0       	breq	.+26     	; 0x2cfe <MDIO_ErrorS_SetPinValue+0x70>
    2ce4:	60 c0       	rjmp	.+192    	; 0x2da6 <MDIO_ErrorS_SetPinValue+0x118>
    2ce6:	2f 81       	ldd	r18, Y+7	; 0x07
    2ce8:	38 85       	ldd	r19, Y+8	; 0x08
    2cea:	23 30       	cpi	r18, 0x03	; 3
    2cec:	31 05       	cpc	r19, r1
    2cee:	89 f1       	breq	.+98     	; 0x2d52 <MDIO_ErrorS_SetPinValue+0xc4>
    2cf0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cf2:	98 85       	ldd	r25, Y+8	; 0x08
    2cf4:	84 30       	cpi	r24, 0x04	; 4
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <MDIO_ErrorS_SetPinValue+0x6e>
    2cfa:	40 c0       	rjmp	.+128    	; 0x2d7c <MDIO_ErrorS_SetPinValue+0xee>
    2cfc:	54 c0       	rjmp	.+168    	; 0x2da6 <MDIO_ErrorS_SetPinValue+0x118>
					case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin);break;
    2cfe:	ab e3       	ldi	r26, 0x3B	; 59
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	eb e3       	ldi	r30, 0x3B	; 59
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	48 2f       	mov	r20, r24
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	02 2e       	mov	r0, r18
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <MDIO_ErrorS_SetPinValue+0x8e>
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	0a 94       	dec	r0
    2d1e:	e2 f7       	brpl	.-8      	; 0x2d18 <MDIO_ErrorS_SetPinValue+0x8a>
    2d20:	80 95       	com	r24
    2d22:	84 23       	and	r24, r20
    2d24:	8c 93       	st	X, r24
    2d26:	b8 c0       	rjmp	.+368    	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
    2d28:	a8 e3       	ldi	r26, 0x38	; 56
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e8 e3       	ldi	r30, 0x38	; 56
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	48 2f       	mov	r20, r24
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	02 2e       	mov	r0, r18
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <MDIO_ErrorS_SetPinValue+0xb8>
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	0a 94       	dec	r0
    2d48:	e2 f7       	brpl	.-8      	; 0x2d42 <MDIO_ErrorS_SetPinValue+0xb4>
    2d4a:	80 95       	com	r24
    2d4c:	84 23       	and	r24, r20
    2d4e:	8c 93       	st	X, r24
    2d50:	a3 c0       	rjmp	.+326    	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
    2d52:	a5 e3       	ldi	r26, 0x35	; 53
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e5 e3       	ldi	r30, 0x35	; 53
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	48 2f       	mov	r20, r24
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	28 2f       	mov	r18, r24
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	02 2e       	mov	r0, r18
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <MDIO_ErrorS_SetPinValue+0xe2>
    2d6c:	88 0f       	add	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	0a 94       	dec	r0
    2d72:	e2 f7       	brpl	.-8      	; 0x2d6c <MDIO_ErrorS_SetPinValue+0xde>
    2d74:	80 95       	com	r24
    2d76:	84 23       	and	r24, r20
    2d78:	8c 93       	st	X, r24
    2d7a:	8e c0       	rjmp	.+284    	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
    2d7c:	a2 e3       	ldi	r26, 0x32	; 50
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e2 e3       	ldi	r30, 0x32	; 50
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	48 2f       	mov	r20, r24
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	02 2e       	mov	r0, r18
    2d94:	02 c0       	rjmp	.+4      	; 0x2d9a <MDIO_ErrorS_SetPinValue+0x10c>
    2d96:	88 0f       	add	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	0a 94       	dec	r0
    2d9c:	e2 f7       	brpl	.-8      	; 0x2d96 <MDIO_ErrorS_SetPinValue+0x108>
    2d9e:	80 95       	com	r24
    2da0:	84 23       	and	r24, r20
    2da2:	8c 93       	st	X, r24
    2da4:	79 c0       	rjmp	.+242    	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
					default: errorState = return_Nok; break;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	76 c0       	rjmp	.+236    	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
				}

		}
		else if(Copy_U8Mode == DIO_HIGH){
    2dac:	8c 81       	ldd	r24, Y+4	; 0x04
    2dae:	81 30       	cpi	r24, 0x01	; 1
    2db0:	09 f0       	breq	.+2      	; 0x2db4 <MDIO_ErrorS_SetPinValue+0x126>
    2db2:	72 c0       	rjmp	.+228    	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
				switch (Copy_u8Port){
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	3e 83       	std	Y+6, r19	; 0x06
    2dbc:	2d 83       	std	Y+5, r18	; 0x05
    2dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc2:	82 30       	cpi	r24, 0x02	; 2
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	51 f1       	breq	.+84     	; 0x2e1c <MDIO_ErrorS_SetPinValue+0x18e>
    2dc8:	2d 81       	ldd	r18, Y+5	; 0x05
    2dca:	3e 81       	ldd	r19, Y+6	; 0x06
    2dcc:	23 30       	cpi	r18, 0x03	; 3
    2dce:	31 05       	cpc	r19, r1
    2dd0:	34 f4       	brge	.+12     	; 0x2dde <MDIO_ErrorS_SetPinValue+0x150>
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	91 05       	cpc	r25, r1
    2dda:	61 f0       	breq	.+24     	; 0x2df4 <MDIO_ErrorS_SetPinValue+0x166>
    2ddc:	5b c0       	rjmp	.+182    	; 0x2e94 <MDIO_ErrorS_SetPinValue+0x206>
    2dde:	2d 81       	ldd	r18, Y+5	; 0x05
    2de0:	3e 81       	ldd	r19, Y+6	; 0x06
    2de2:	23 30       	cpi	r18, 0x03	; 3
    2de4:	31 05       	cpc	r19, r1
    2de6:	71 f1       	breq	.+92     	; 0x2e44 <MDIO_ErrorS_SetPinValue+0x1b6>
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	84 30       	cpi	r24, 0x04	; 4
    2dee:	91 05       	cpc	r25, r1
    2df0:	e9 f1       	breq	.+122    	; 0x2e6c <MDIO_ErrorS_SetPinValue+0x1de>
    2df2:	50 c0       	rjmp	.+160    	; 0x2e94 <MDIO_ErrorS_SetPinValue+0x206>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    2df4:	ab e3       	ldi	r26, 0x3B	; 59
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	eb e3       	ldi	r30, 0x3B	; 59
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	48 2f       	mov	r20, r24
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	02 2e       	mov	r0, r18
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <MDIO_ErrorS_SetPinValue+0x184>
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	0a 94       	dec	r0
    2e14:	e2 f7       	brpl	.-8      	; 0x2e0e <MDIO_ErrorS_SetPinValue+0x180>
    2e16:	84 2b       	or	r24, r20
    2e18:	8c 93       	st	X, r24
    2e1a:	3e c0       	rjmp	.+124    	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    2e1c:	a8 e3       	ldi	r26, 0x38	; 56
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e8 e3       	ldi	r30, 0x38	; 56
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	48 2f       	mov	r20, r24
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	28 2f       	mov	r18, r24
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	02 2e       	mov	r0, r18
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <MDIO_ErrorS_SetPinValue+0x1ac>
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	0a 94       	dec	r0
    2e3c:	e2 f7       	brpl	.-8      	; 0x2e36 <MDIO_ErrorS_SetPinValue+0x1a8>
    2e3e:	84 2b       	or	r24, r20
    2e40:	8c 93       	st	X, r24
    2e42:	2a c0       	rjmp	.+84     	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    2e44:	a5 e3       	ldi	r26, 0x35	; 53
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	e5 e3       	ldi	r30, 0x35	; 53
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	48 2f       	mov	r20, r24
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	02 2e       	mov	r0, r18
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <MDIO_ErrorS_SetPinValue+0x1d4>
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	0a 94       	dec	r0
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <MDIO_ErrorS_SetPinValue+0x1d0>
    2e66:	84 2b       	or	r24, r20
    2e68:	8c 93       	st	X, r24
    2e6a:	16 c0       	rjmp	.+44     	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    2e6c:	a2 e3       	ldi	r26, 0x32	; 50
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e2 e3       	ldi	r30, 0x32	; 50
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	48 2f       	mov	r20, r24
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	02 2e       	mov	r0, r18
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <MDIO_ErrorS_SetPinValue+0x1fc>
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	0a 94       	dec	r0
    2e8c:	e2 f7       	brpl	.-8      	; 0x2e86 <MDIO_ErrorS_SetPinValue+0x1f8>
    2e8e:	84 2b       	or	r24, r20
    2e90:	8c 93       	st	X, r24
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <MDIO_ErrorS_SetPinValue+0x20a>
					default:errorState = return_Nok; break;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	89 83       	std	Y+1, r24	; 0x01
				}
		}
	return errorState;
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e9a:	28 96       	adiw	r28, 0x08	; 8
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <MDIO_ErrorS_GetPinValue>:

Error_State_t MDIO_ErrorS_GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8* P_u8Value ){
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	27 97       	sbiw	r28, 0x07	; 7
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	8a 83       	std	Y+2, r24	; 0x02
    2ec2:	6b 83       	std	Y+3, r22	; 0x03
    2ec4:	5d 83       	std	Y+5, r21	; 0x05
    2ec6:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    2ec8:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	88 30       	cpi	r24, 0x08	; 8
    2ece:	10 f0       	brcs	.+4      	; 0x2ed4 <MDIO_ErrorS_GetPinValue+0x28>
			errorState = return_Nok;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	89 83       	std	Y+1, r24	; 0x01
		}

	switch (Copy_u8Port){
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	3f 83       	std	Y+7, r19	; 0x07
    2edc:	2e 83       	std	Y+6, r18	; 0x06
    2ede:	4e 81       	ldd	r20, Y+6	; 0x06
    2ee0:	5f 81       	ldd	r21, Y+7	; 0x07
    2ee2:	42 30       	cpi	r20, 0x02	; 2
    2ee4:	51 05       	cpc	r21, r1
    2ee6:	59 f1       	breq	.+86     	; 0x2f3e <MDIO_ErrorS_GetPinValue+0x92>
    2ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eea:	9f 81       	ldd	r25, Y+7	; 0x07
    2eec:	83 30       	cpi	r24, 0x03	; 3
    2eee:	91 05       	cpc	r25, r1
    2ef0:	34 f4       	brge	.+12     	; 0x2efe <MDIO_ErrorS_GetPinValue+0x52>
    2ef2:	2e 81       	ldd	r18, Y+6	; 0x06
    2ef4:	3f 81       	ldd	r19, Y+7	; 0x07
    2ef6:	21 30       	cpi	r18, 0x01	; 1
    2ef8:	31 05       	cpc	r19, r1
    2efa:	69 f0       	breq	.+26     	; 0x2f16 <MDIO_ErrorS_GetPinValue+0x6a>
    2efc:	5c c0       	rjmp	.+184    	; 0x2fb6 <MDIO_ErrorS_GetPinValue+0x10a>
    2efe:	4e 81       	ldd	r20, Y+6	; 0x06
    2f00:	5f 81       	ldd	r21, Y+7	; 0x07
    2f02:	43 30       	cpi	r20, 0x03	; 3
    2f04:	51 05       	cpc	r21, r1
    2f06:	79 f1       	breq	.+94     	; 0x2f66 <MDIO_ErrorS_GetPinValue+0xba>
    2f08:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f0c:	84 30       	cpi	r24, 0x04	; 4
    2f0e:	91 05       	cpc	r25, r1
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <MDIO_ErrorS_GetPinValue+0x68>
    2f12:	3d c0       	rjmp	.+122    	; 0x2f8e <MDIO_ErrorS_GetPinValue+0xe2>
    2f14:	50 c0       	rjmp	.+160    	; 0x2fb6 <MDIO_ErrorS_GetPinValue+0x10a>
						case DIO_PORTA : *P_u8Value = GET_BIT(PINA,Copy_u8Pin);break;
    2f16:	e9 e3       	ldi	r30, 0x39	; 57
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	88 2f       	mov	r24, r24
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	a9 01       	movw	r20, r18
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <MDIO_ErrorS_GetPinValue+0x82>
    2f2a:	55 95       	asr	r21
    2f2c:	47 95       	ror	r20
    2f2e:	8a 95       	dec	r24
    2f30:	e2 f7       	brpl	.-8      	; 0x2f2a <MDIO_ErrorS_GetPinValue+0x7e>
    2f32:	ca 01       	movw	r24, r20
    2f34:	81 70       	andi	r24, 0x01	; 1
    2f36:	ec 81       	ldd	r30, Y+4	; 0x04
    2f38:	fd 81       	ldd	r31, Y+5	; 0x05
    2f3a:	80 83       	st	Z, r24
    2f3c:	3e c0       	rjmp	.+124    	; 0x2fba <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTB : *P_u8Value = GET_BIT(PINB,Copy_u8Pin);break;
    2f3e:	e6 e3       	ldi	r30, 0x36	; 54
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	88 2f       	mov	r24, r24
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	a9 01       	movw	r20, r18
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <MDIO_ErrorS_GetPinValue+0xaa>
    2f52:	55 95       	asr	r21
    2f54:	47 95       	ror	r20
    2f56:	8a 95       	dec	r24
    2f58:	e2 f7       	brpl	.-8      	; 0x2f52 <MDIO_ErrorS_GetPinValue+0xa6>
    2f5a:	ca 01       	movw	r24, r20
    2f5c:	81 70       	andi	r24, 0x01	; 1
    2f5e:	ec 81       	ldd	r30, Y+4	; 0x04
    2f60:	fd 81       	ldd	r31, Y+5	; 0x05
    2f62:	80 83       	st	Z, r24
    2f64:	2a c0       	rjmp	.+84     	; 0x2fba <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTC : *P_u8Value = GET_BIT(PINC,Copy_u8Pin);break;
    2f66:	e3 e3       	ldi	r30, 0x33	; 51
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	88 2f       	mov	r24, r24
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	a9 01       	movw	r20, r18
    2f78:	02 c0       	rjmp	.+4      	; 0x2f7e <MDIO_ErrorS_GetPinValue+0xd2>
    2f7a:	55 95       	asr	r21
    2f7c:	47 95       	ror	r20
    2f7e:	8a 95       	dec	r24
    2f80:	e2 f7       	brpl	.-8      	; 0x2f7a <MDIO_ErrorS_GetPinValue+0xce>
    2f82:	ca 01       	movw	r24, r20
    2f84:	81 70       	andi	r24, 0x01	; 1
    2f86:	ec 81       	ldd	r30, Y+4	; 0x04
    2f88:	fd 81       	ldd	r31, Y+5	; 0x05
    2f8a:	80 83       	st	Z, r24
    2f8c:	16 c0       	rjmp	.+44     	; 0x2fba <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTD : *P_u8Value = GET_BIT(PIND,Copy_u8Pin);break;
    2f8e:	e0 e3       	ldi	r30, 0x30	; 48
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	28 2f       	mov	r18, r24
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	88 2f       	mov	r24, r24
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a9 01       	movw	r20, r18
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <MDIO_ErrorS_GetPinValue+0xfa>
    2fa2:	55 95       	asr	r21
    2fa4:	47 95       	ror	r20
    2fa6:	8a 95       	dec	r24
    2fa8:	e2 f7       	brpl	.-8      	; 0x2fa2 <MDIO_ErrorS_GetPinValue+0xf6>
    2faa:	ca 01       	movw	r24, r20
    2fac:	81 70       	andi	r24, 0x01	; 1
    2fae:	ec 81       	ldd	r30, Y+4	; 0x04
    2fb0:	fd 81       	ldd	r31, Y+5	; 0x05
    2fb2:	80 83       	st	Z, r24
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <MDIO_ErrorS_GetPinValue+0x10e>
						default: errorState = return_Nok; break;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	89 83       	std	Y+1, r24	; 0x01
					}
	return errorState;
    2fba:	89 81       	ldd	r24, Y+1	; 0x01

}
    2fbc:	27 96       	adiw	r28, 0x07	; 7
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	08 95       	ret

00002fce <MDIO_ErrorS_SetPortValue>:

Error_State_t MDIO_ErrorS_SetPortValue( u8 Copy_u8Port , u8  Copy_U8Value ){
    2fce:	df 93       	push	r29
    2fd0:	cf 93       	push	r28
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <MDIO_ErrorS_SetPortValue+0x6>
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <MDIO_ErrorS_SetPortValue+0x8>
    2fd6:	0f 92       	push	r0
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	8a 83       	std	Y+2, r24	; 0x02
    2fde:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    2fe0:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	3d 83       	std	Y+5, r19	; 0x05
    2fea:	2c 83       	std	Y+4, r18	; 0x04
    2fec:	8c 81       	ldd	r24, Y+4	; 0x04
    2fee:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff0:	82 30       	cpi	r24, 0x02	; 2
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	d9 f0       	breq	.+54     	; 0x302c <MDIO_ErrorS_SetPortValue+0x5e>
    2ff6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ff8:	3d 81       	ldd	r19, Y+5	; 0x05
    2ffa:	23 30       	cpi	r18, 0x03	; 3
    2ffc:	31 05       	cpc	r19, r1
    2ffe:	34 f4       	brge	.+12     	; 0x300c <MDIO_ErrorS_SetPortValue+0x3e>
    3000:	8c 81       	ldd	r24, Y+4	; 0x04
    3002:	9d 81       	ldd	r25, Y+5	; 0x05
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	91 05       	cpc	r25, r1
    3008:	61 f0       	breq	.+24     	; 0x3022 <MDIO_ErrorS_SetPortValue+0x54>
    300a:	1f c0       	rjmp	.+62     	; 0x304a <MDIO_ErrorS_SetPortValue+0x7c>
    300c:	2c 81       	ldd	r18, Y+4	; 0x04
    300e:	3d 81       	ldd	r19, Y+5	; 0x05
    3010:	23 30       	cpi	r18, 0x03	; 3
    3012:	31 05       	cpc	r19, r1
    3014:	81 f0       	breq	.+32     	; 0x3036 <MDIO_ErrorS_SetPortValue+0x68>
    3016:	8c 81       	ldd	r24, Y+4	; 0x04
    3018:	9d 81       	ldd	r25, Y+5	; 0x05
    301a:	84 30       	cpi	r24, 0x04	; 4
    301c:	91 05       	cpc	r25, r1
    301e:	81 f0       	breq	.+32     	; 0x3040 <MDIO_ErrorS_SetPortValue+0x72>
    3020:	14 c0       	rjmp	.+40     	; 0x304a <MDIO_ErrorS_SetPortValue+0x7c>
		case DIO_PORTA : PORTA = Copy_U8Value ;break;
    3022:	eb e3       	ldi	r30, 0x3B	; 59
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	80 83       	st	Z, r24
    302a:	11 c0       	rjmp	.+34     	; 0x304e <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTB : PORTB = Copy_U8Value ;break;
    302c:	e8 e3       	ldi	r30, 0x38	; 56
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	80 83       	st	Z, r24
    3034:	0c c0       	rjmp	.+24     	; 0x304e <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTC : PORTC = Copy_U8Value ;break;
    3036:	e5 e3       	ldi	r30, 0x35	; 53
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	80 83       	st	Z, r24
    303e:	07 c0       	rjmp	.+14     	; 0x304e <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTD : PORTD = Copy_U8Value ;break;
    3040:	e2 e3       	ldi	r30, 0x32	; 50
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	80 83       	st	Z, r24
    3048:	02 c0       	rjmp	.+4      	; 0x304e <MDIO_ErrorS_SetPortValue+0x80>
		default:errorState = return_Nok; break;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	89 83       	std	Y+1, r24	; 0x01
	}

		return errorState;
    304e:	89 81       	ldd	r24, Y+1	; 0x01


}
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <MDIO_ErrorS_GetPortValue>:
Error_State_t MDIO_ErrorS_GetPortValue( u8 Copy_u8Port , u8* P_u8Value ){
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	00 d0       	rcall	.+0      	; 0x3066 <MDIO_ErrorS_GetPortValue+0x6>
    3066:	00 d0       	rcall	.+0      	; 0x3068 <MDIO_ErrorS_GetPortValue+0x8>
    3068:	00 d0       	rcall	.+0      	; 0x306a <MDIO_ErrorS_GetPortValue+0xa>
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	8a 83       	std	Y+2, r24	; 0x02
    3070:	7c 83       	std	Y+4, r23	; 0x04
    3072:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    3074:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	3e 83       	std	Y+6, r19	; 0x06
    307e:	2d 83       	std	Y+5, r18	; 0x05
    3080:	8d 81       	ldd	r24, Y+5	; 0x05
    3082:	9e 81       	ldd	r25, Y+6	; 0x06
    3084:	82 30       	cpi	r24, 0x02	; 2
    3086:	91 05       	cpc	r25, r1
    3088:	e9 f0       	breq	.+58     	; 0x30c4 <MDIO_ErrorS_GetPortValue+0x64>
    308a:	2d 81       	ldd	r18, Y+5	; 0x05
    308c:	3e 81       	ldd	r19, Y+6	; 0x06
    308e:	23 30       	cpi	r18, 0x03	; 3
    3090:	31 05       	cpc	r19, r1
    3092:	34 f4       	brge	.+12     	; 0x30a0 <MDIO_ErrorS_GetPortValue+0x40>
    3094:	8d 81       	ldd	r24, Y+5	; 0x05
    3096:	9e 81       	ldd	r25, Y+6	; 0x06
    3098:	81 30       	cpi	r24, 0x01	; 1
    309a:	91 05       	cpc	r25, r1
    309c:	61 f0       	breq	.+24     	; 0x30b6 <MDIO_ErrorS_GetPortValue+0x56>
    309e:	27 c0       	rjmp	.+78     	; 0x30ee <MDIO_ErrorS_GetPortValue+0x8e>
    30a0:	2d 81       	ldd	r18, Y+5	; 0x05
    30a2:	3e 81       	ldd	r19, Y+6	; 0x06
    30a4:	23 30       	cpi	r18, 0x03	; 3
    30a6:	31 05       	cpc	r19, r1
    30a8:	a1 f0       	breq	.+40     	; 0x30d2 <MDIO_ErrorS_GetPortValue+0x72>
    30aa:	8d 81       	ldd	r24, Y+5	; 0x05
    30ac:	9e 81       	ldd	r25, Y+6	; 0x06
    30ae:	84 30       	cpi	r24, 0x04	; 4
    30b0:	91 05       	cpc	r25, r1
    30b2:	b1 f0       	breq	.+44     	; 0x30e0 <MDIO_ErrorS_GetPortValue+0x80>
    30b4:	1c c0       	rjmp	.+56     	; 0x30ee <MDIO_ErrorS_GetPortValue+0x8e>
		case DIO_PORTA : *P_u8Value = PINA ;break;
    30b6:	e9 e3       	ldi	r30, 0x39	; 57
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	eb 81       	ldd	r30, Y+3	; 0x03
    30be:	fc 81       	ldd	r31, Y+4	; 0x04
    30c0:	80 83       	st	Z, r24
    30c2:	17 c0       	rjmp	.+46     	; 0x30f2 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTB : *P_u8Value = PINB ;break;
    30c4:	e6 e3       	ldi	r30, 0x36	; 54
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	eb 81       	ldd	r30, Y+3	; 0x03
    30cc:	fc 81       	ldd	r31, Y+4	; 0x04
    30ce:	80 83       	st	Z, r24
    30d0:	10 c0       	rjmp	.+32     	; 0x30f2 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTC : *P_u8Value = PINC ;break;
    30d2:	e3 e3       	ldi	r30, 0x33	; 51
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	eb 81       	ldd	r30, Y+3	; 0x03
    30da:	fc 81       	ldd	r31, Y+4	; 0x04
    30dc:	80 83       	st	Z, r24
    30de:	09 c0       	rjmp	.+18     	; 0x30f2 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTD : *P_u8Value = PIND ;break;
    30e0:	e0 e3       	ldi	r30, 0x30	; 48
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	eb 81       	ldd	r30, Y+3	; 0x03
    30e8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ea:	80 83       	st	Z, r24
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <MDIO_ErrorS_GetPortValue+0x92>
		default: errorState = return_Nok; break;
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorState;
    30f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    30f4:	26 96       	adiw	r28, 0x06	; 6
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <MDIO_ErrorS_TogPinValue>:

Error_State_t MDIO_ErrorS_TogPinValue( u8 Copy_u8Port , u8 Copy_u8Pin ){
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	00 d0       	rcall	.+0      	; 0x310c <MDIO_ErrorS_TogPinValue+0x6>
    310c:	00 d0       	rcall	.+0      	; 0x310e <MDIO_ErrorS_TogPinValue+0x8>
    310e:	0f 92       	push	r0
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	8a 83       	std	Y+2, r24	; 0x02
    3116:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    3118:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Port){
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	28 2f       	mov	r18, r24
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	3d 83       	std	Y+5, r19	; 0x05
    3122:	2c 83       	std	Y+4, r18	; 0x04
    3124:	8c 81       	ldd	r24, Y+4	; 0x04
    3126:	9d 81       	ldd	r25, Y+5	; 0x05
    3128:	82 30       	cpi	r24, 0x02	; 2
    312a:	91 05       	cpc	r25, r1
    312c:	51 f1       	breq	.+84     	; 0x3182 <MDIO_ErrorS_TogPinValue+0x7c>
    312e:	2c 81       	ldd	r18, Y+4	; 0x04
    3130:	3d 81       	ldd	r19, Y+5	; 0x05
    3132:	23 30       	cpi	r18, 0x03	; 3
    3134:	31 05       	cpc	r19, r1
    3136:	34 f4       	brge	.+12     	; 0x3144 <MDIO_ErrorS_TogPinValue+0x3e>
    3138:	8c 81       	ldd	r24, Y+4	; 0x04
    313a:	9d 81       	ldd	r25, Y+5	; 0x05
    313c:	81 30       	cpi	r24, 0x01	; 1
    313e:	91 05       	cpc	r25, r1
    3140:	61 f0       	breq	.+24     	; 0x315a <MDIO_ErrorS_TogPinValue+0x54>
    3142:	5b c0       	rjmp	.+182    	; 0x31fa <MDIO_ErrorS_TogPinValue+0xf4>
    3144:	2c 81       	ldd	r18, Y+4	; 0x04
    3146:	3d 81       	ldd	r19, Y+5	; 0x05
    3148:	23 30       	cpi	r18, 0x03	; 3
    314a:	31 05       	cpc	r19, r1
    314c:	71 f1       	breq	.+92     	; 0x31aa <MDIO_ErrorS_TogPinValue+0xa4>
    314e:	8c 81       	ldd	r24, Y+4	; 0x04
    3150:	9d 81       	ldd	r25, Y+5	; 0x05
    3152:	84 30       	cpi	r24, 0x04	; 4
    3154:	91 05       	cpc	r25, r1
    3156:	e9 f1       	breq	.+122    	; 0x31d2 <MDIO_ErrorS_TogPinValue+0xcc>
    3158:	50 c0       	rjmp	.+160    	; 0x31fa <MDIO_ErrorS_TogPinValue+0xf4>
			case DIO_PORTA :  TOGGLE_BIT(PORTA,Copy_u8Pin) ; break;
    315a:	ab e3       	ldi	r26, 0x3B	; 59
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	eb e3       	ldi	r30, 0x3B	; 59
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	48 2f       	mov	r20, r24
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	28 2f       	mov	r18, r24
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	02 2e       	mov	r0, r18
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <MDIO_ErrorS_TogPinValue+0x72>
    3174:	88 0f       	add	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	0a 94       	dec	r0
    317a:	e2 f7       	brpl	.-8      	; 0x3174 <MDIO_ErrorS_TogPinValue+0x6e>
    317c:	84 27       	eor	r24, r20
    317e:	8c 93       	st	X, r24
    3180:	3e c0       	rjmp	.+124    	; 0x31fe <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTB :  TOGGLE_BIT(PORTB,Copy_u8Pin) ;break;
    3182:	a8 e3       	ldi	r26, 0x38	; 56
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	e8 e3       	ldi	r30, 0x38	; 56
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	80 81       	ld	r24, Z
    318c:	48 2f       	mov	r20, r24
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	28 2f       	mov	r18, r24
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	02 2e       	mov	r0, r18
    319a:	02 c0       	rjmp	.+4      	; 0x31a0 <MDIO_ErrorS_TogPinValue+0x9a>
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	0a 94       	dec	r0
    31a2:	e2 f7       	brpl	.-8      	; 0x319c <MDIO_ErrorS_TogPinValue+0x96>
    31a4:	84 27       	eor	r24, r20
    31a6:	8c 93       	st	X, r24
    31a8:	2a c0       	rjmp	.+84     	; 0x31fe <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTC :  TOGGLE_BIT(PORTC,Copy_u8Pin) ;break;
    31aa:	a5 e3       	ldi	r26, 0x35	; 53
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e5 e3       	ldi	r30, 0x35	; 53
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	48 2f       	mov	r20, r24
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	02 2e       	mov	r0, r18
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <MDIO_ErrorS_TogPinValue+0xc2>
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	0a 94       	dec	r0
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <MDIO_ErrorS_TogPinValue+0xbe>
    31cc:	84 27       	eor	r24, r20
    31ce:	8c 93       	st	X, r24
    31d0:	16 c0       	rjmp	.+44     	; 0x31fe <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTD :  TOGGLE_BIT(PORTD,Copy_u8Pin) ;break;
    31d2:	a2 e3       	ldi	r26, 0x32	; 50
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e2 e3       	ldi	r30, 0x32	; 50
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	48 2f       	mov	r20, r24
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	02 2e       	mov	r0, r18
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <MDIO_ErrorS_TogPinValue+0xea>
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	0a 94       	dec	r0
    31f2:	e2 f7       	brpl	.-8      	; 0x31ec <MDIO_ErrorS_TogPinValue+0xe6>
    31f4:	84 27       	eor	r24, r20
    31f6:	8c 93       	st	X, r24
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <MDIO_ErrorS_TogPinValue+0xf8>
			default: errorState = return_Nok; break;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	89 83       	std	Y+1, r24	; 0x01
		}
		return errorState;
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <MGIE_voidEnable>:
#include "BIT_MATH.h"

#include "MGIE_interface.h"
#include "MGIE_register.h"

void MGIE_voidEnable(void){
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( SREG ,SREG_I);
    3218:	af e5       	ldi	r26, 0x5F	; 95
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	ef e5       	ldi	r30, 0x5F	; 95
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	80 68       	ori	r24, 0x80	; 128
    3224:	8c 93       	st	X, r24
}
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <MGIE_voidDisable>:
void MGIE_voidDisable(void){
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( SREG ,SREG_I);
    3234:	af e5       	ldi	r26, 0x5F	; 95
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	ef e5       	ldi	r30, 0x5F	; 95
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	8f 77       	andi	r24, 0x7F	; 127
    3240:	8c 93       	st	X, r24

}
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <MSPI_voidInit>:

#include "MSPI_registers.h"
#include "MSPI_interface.h"
#include "MSPI_private.h"
#include "MSPI_config.h"
void MSPI_voidInit(){
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
#else
#warning "invalid input"
#endif

#elif SPI_MASTER_OR_SLAVE == SPI_SLAVE
	CLR_BIT(SPCR,SPCR_MSTR);
    3250:	ad e2       	ldi	r26, 0x2D	; 45
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	ed e2       	ldi	r30, 0x2D	; 45
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	8f 7e       	andi	r24, 0xEF	; 239
    325c:	8c 93       	st	X, r24
#endif

	/* select data order  */
#if SPI_DATA_ORDER	== SPI_LSB_FIRST
	/* select data order : least significant */
	SET_BIT(SPCR,SPCR_DORD);
    325e:	ad e2       	ldi	r26, 0x2D	; 45
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	ed e2       	ldi	r30, 0x2D	; 45
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	80 62       	ori	r24, 0x20	; 32
    326a:	8c 93       	st	X, r24
#endif

	/* choosispcrng clk polarity */
#if SPI_CLK_POLARITY	== SPI_RISING_FIRST
	/* choosispcrng clk polarity as: leading edge is rising */
	CLR_BIT(SPCR,SPCR_CPOL);
    326c:	ad e2       	ldi	r26, 0x2D	; 45
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	ed e2       	ldi	r30, 0x2D	; 45
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	87 7f       	andi	r24, 0xF7	; 247
    3278:	8c 93       	st	X, r24
#endif

	/* seceting clock phase setup:write, samole:read */
#if SPI_CLK_PHASE == SPI_WRITE_FIRST
	/* seceting clock phase as: leading edge is setup "Write" */
	SET_BIT(SPCR,SPCR_CPHA);
    327a:	ad e2       	ldi	r26, 0x2D	; 45
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	ed e2       	ldi	r30, 0x2D	; 45
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	84 60       	ori	r24, 0x04	; 4
    3286:	8c 93       	st	X, r24
#else
#warning "invalid input"
#endif
#if SPI_INTERRUPT	 == SPI_EABLE_INTERRUPT
	/* enable spi interrupt */
	SET_BIT(SPCR,SPCR_SPIE);
    3288:	ad e2       	ldi	r26, 0x2D	; 45
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	ed e2       	ldi	r30, 0x2D	; 45
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	80 68       	ori	r24, 0x80	; 128
    3294:	8c 93       	st	X, r24
#elif SPI_INTERRUPT == SPI_DISABLE_INTERRUPT
#else
#warning
#endif
	/* enable spi */
	SET_BIT(SPCR,SPCR_SPE);
    3296:	ad e2       	ldi	r26, 0x2D	; 45
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	ed e2       	ldi	r30, 0x2D	; 45
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	80 64       	ori	r24, 0x40	; 64
    32a2:	8c 93       	st	X, r24

}
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	08 95       	ret

000032aa <MSPI_u8TransciveByte>:
u8 MSPI_u8TransciveByte(u8 Copy_u8Data){
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	0f 92       	push	r0
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    32b6:	ef e2       	ldi	r30, 0x2F	; 47
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	80 83       	st	Z, r24
	/*read SPSR_SPIF then read SPDR*/
	while(GET_BIT(SPSR,SPSR_SPIF)==0);
    32be:	ee e2       	ldi	r30, 0x2E	; 46
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	88 23       	and	r24, r24
    32c6:	dc f7       	brge	.-10     	; 0x32be <MSPI_u8TransciveByte+0x14>

	SET_BIT(SPSR,SPSR_SPIF);
    32c8:	ae e2       	ldi	r26, 0x2E	; 46
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	ee e2       	ldi	r30, 0x2E	; 46
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	80 68       	ori	r24, 0x80	; 128
    32d4:	8c 93       	st	X, r24
	return SPDR;
    32d6:	ef e2       	ldi	r30, 0x2F	; 47
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
}
    32dc:	0f 90       	pop	r0
    32de:	cf 91       	pop	r28
    32e0:	df 91       	pop	r29
    32e2:	08 95       	ret

000032e4 <MSPI_u8GetSPDR>:
u8 MSPI_u8GetSPDR(){
    32e4:	df 93       	push	r29
    32e6:	cf 93       	push	r28
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    32ec:	ef e2       	ldi	r30, 0x2F	; 47
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
}
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <setCallBackSPI>:


void (*callBackSPI) (void);
void setCallBackSPI(void (*fp)(void)){
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	00 d0       	rcall	.+0      	; 0x32fe <setCallBackSPI+0x6>
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	89 83       	std	Y+1, r24	; 0x01
	callBackSPI = fp;
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	9a 81       	ldd	r25, Y+2	; 0x02
    330a:	90 93 77 01 	sts	0x0177, r25
    330e:	80 93 76 01 	sts	0x0176, r24
}
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <__vector_12>:
void __vector_12(void) __attribute__((signal));
void __vector_12(void) {
    331c:	1f 92       	push	r1
    331e:	0f 92       	push	r0
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	0f 92       	push	r0
    3324:	11 24       	eor	r1, r1
    3326:	2f 93       	push	r18
    3328:	3f 93       	push	r19
    332a:	4f 93       	push	r20
    332c:	5f 93       	push	r21
    332e:	6f 93       	push	r22
    3330:	7f 93       	push	r23
    3332:	8f 93       	push	r24
    3334:	9f 93       	push	r25
    3336:	af 93       	push	r26
    3338:	bf 93       	push	r27
    333a:	ef 93       	push	r30
    333c:	ff 93       	push	r31
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
	callBackSPI();
    3346:	e0 91 76 01 	lds	r30, 0x0176
    334a:	f0 91 77 01 	lds	r31, 0x0177
    334e:	09 95       	icall
}
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	ff 91       	pop	r31
    3356:	ef 91       	pop	r30
    3358:	bf 91       	pop	r27
    335a:	af 91       	pop	r26
    335c:	9f 91       	pop	r25
    335e:	8f 91       	pop	r24
    3360:	7f 91       	pop	r23
    3362:	6f 91       	pop	r22
    3364:	5f 91       	pop	r21
    3366:	4f 91       	pop	r20
    3368:	3f 91       	pop	r19
    336a:	2f 91       	pop	r18
    336c:	0f 90       	pop	r0
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	0f 90       	pop	r0
    3372:	1f 90       	pop	r1
    3374:	18 95       	reti

00003376 <MTIMER0_voidInit>:
#include "MTIMER_regesters.h"
#include "MTimer_config.h"
#include "MTIMER_private.h"


void MTIMER0_voidInit(void){
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == TIMER0_NORMAL

	/*selecting  wave generation mode as normal mode */
	CLR_BIT(TCCR0,TCCR0_WGM00);
    337e:	a3 e5       	ldi	r26, 0x53	; 83
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	e3 e5       	ldi	r30, 0x53	; 83
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	8f 7b       	andi	r24, 0xBF	; 191
    338a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
    338c:	a3 e5       	ldi	r26, 0x53	; 83
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e3 e5       	ldi	r30, 0x53	; 83
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	87 7f       	andi	r24, 0xF7	; 247
    3398:	8c 93       	st	X, r24
	/* enable timer 0 interrupt SIE */
	SET_BIT(TIMSK,TIMSK_TOIE0);
    339a:	a9 e5       	ldi	r26, 0x59	; 89
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	e9 e5       	ldi	r30, 0x59	; 89
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	80 81       	ld	r24, Z
    33a4:	81 60       	ori	r24, 0x01	; 1
    33a6:	8c 93       	st	X, r24
	/* setting preload value */
	TCNT0 = PRELOAD_VALUE;
    33a8:	e2 e5       	ldi	r30, 0x52	; 82
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	86 e0       	ldi	r24, 0x06	; 6
    33ae:	80 83       	st	Z, r24
	CLR_BIT(TCCR0,TCCR0_COM00);
	SET_BIT(TCCR0,TCCR0_COM01);
#endif

	/* selecting timer 0 prescaler as dev by 8*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    33b0:	a3 e5       	ldi	r26, 0x53	; 83
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	e3 e5       	ldi	r30, 0x53	; 83
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	8e 7f       	andi	r24, 0xFE	; 254
    33bc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    33be:	a3 e5       	ldi	r26, 0x53	; 83
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	e3 e5       	ldi	r30, 0x53	; 83
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	82 60       	ori	r24, 0x02	; 2
    33ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    33cc:	a3 e5       	ldi	r26, 0x53	; 83
    33ce:	b0 e0       	ldi	r27, 0x00	; 0
    33d0:	e3 e5       	ldi	r30, 0x53	; 83
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	80 81       	ld	r24, Z
    33d6:	8b 7f       	andi	r24, 0xFB	; 251
    33d8:	8c 93       	st	X, r24

}
    33da:	cf 91       	pop	r28
    33dc:	df 91       	pop	r29
    33de:	08 95       	ret

000033e0 <MTIMER0_voidDisable>:
void MTIMER0_voidDisable(void){
    33e0:	df 93       	push	r29
    33e2:	cf 93       	push	r28
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
	/*No clock source */
	CLR_BIT(TCCR0,TCCR0_CS00);
    33e8:	a3 e5       	ldi	r26, 0x53	; 83
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	e3 e5       	ldi	r30, 0x53	; 83
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	80 81       	ld	r24, Z
    33f2:	8e 7f       	andi	r24, 0xFE	; 254
    33f4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    33f6:	a3 e5       	ldi	r26, 0x53	; 83
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	e3 e5       	ldi	r30, 0x53	; 83
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	8d 7f       	andi	r24, 0xFD	; 253
    3402:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    3404:	a3 e5       	ldi	r26, 0x53	; 83
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	e3 e5       	ldi	r30, 0x53	; 83
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	80 81       	ld	r24, Z
    340e:	8b 7f       	andi	r24, 0xFB	; 251
    3410:	8c 93       	st	X, r24

}
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	08 95       	ret

00003418 <MTIMER0_voidSetPreload>:
void MTIMER0_voidSetPreload(u8 Copy_u8Preload){
    3418:	df 93       	push	r29
    341a:	cf 93       	push	r28
    341c:	0f 92       	push	r0
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
    3424:	e2 e5       	ldi	r30, 0x52	; 82
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	80 83       	st	Z, r24

}
    342c:	0f 90       	pop	r0
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <MTIMER0_voidSetDutyCycle>:
void MTIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle){
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	0f 92       	push	r0
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle;
    3440:	ec e5       	ldi	r30, 0x5C	; 92
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	80 83       	st	Z, r24
}
    3448:	0f 90       	pop	r0
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <setCallBackTimer0>:

void (*callBackTimer0) (void);
void setCallBackTimer0(void (*fp)(void)){
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	00 d0       	rcall	.+0      	; 0x3456 <setCallBackTimer0+0x6>
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
	callBackTimer0 = fp;
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	90 93 79 01 	sts	0x0179, r25
    3466:	80 93 78 01 	sts	0x0178, r24
}
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void) {
    3474:	1f 92       	push	r1
    3476:	0f 92       	push	r0
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	0f 92       	push	r0
    347c:	11 24       	eor	r1, r1
    347e:	2f 93       	push	r18
    3480:	3f 93       	push	r19
    3482:	4f 93       	push	r20
    3484:	5f 93       	push	r21
    3486:	6f 93       	push	r22
    3488:	7f 93       	push	r23
    348a:	8f 93       	push	r24
    348c:	9f 93       	push	r25
    348e:	af 93       	push	r26
    3490:	bf 93       	push	r27
    3492:	ef 93       	push	r30
    3494:	ff 93       	push	r31
    3496:	df 93       	push	r29
    3498:	cf 93       	push	r28
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
	callBackTimer0();
    349e:	e0 91 78 01 	lds	r30, 0x0178
    34a2:	f0 91 79 01 	lds	r31, 0x0179
    34a6:	09 95       	icall
}
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	ff 91       	pop	r31
    34ae:	ef 91       	pop	r30
    34b0:	bf 91       	pop	r27
    34b2:	af 91       	pop	r26
    34b4:	9f 91       	pop	r25
    34b6:	8f 91       	pop	r24
    34b8:	7f 91       	pop	r23
    34ba:	6f 91       	pop	r22
    34bc:	5f 91       	pop	r21
    34be:	4f 91       	pop	r20
    34c0:	3f 91       	pop	r19
    34c2:	2f 91       	pop	r18
    34c4:	0f 90       	pop	r0
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	0f 90       	pop	r0
    34ca:	1f 90       	pop	r1
    34cc:	18 95       	reti

000034ce <MTIMER1_voidInit>:

void MTIMER1_voidInit( Timer1Modes_t Copy_Timer1_Mode , Top_t Copy_Timer1TopMode , Prescaler_t Copy_enuPrescalerValue ){
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	29 97       	sbiw	r28, 0x09	; 9
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	89 83       	std	Y+1, r24	; 0x01
    34e4:	6a 83       	std	Y+2, r22	; 0x02
    34e6:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_Timer1_Mode) {
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	39 87       	std	Y+9, r19	; 0x09
    34f0:	28 87       	std	Y+8, r18	; 0x08
    34f2:	88 85       	ldd	r24, Y+8	; 0x08
    34f4:	99 85       	ldd	r25, Y+9	; 0x09
    34f6:	82 30       	cpi	r24, 0x02	; 2
    34f8:	91 05       	cpc	r25, r1
    34fa:	09 f4       	brne	.+2      	; 0x34fe <MTIMER1_voidInit+0x30>
    34fc:	5c c0       	rjmp	.+184    	; 0x35b6 <MTIMER1_voidInit+0xe8>
    34fe:	28 85       	ldd	r18, Y+8	; 0x08
    3500:	39 85       	ldd	r19, Y+9	; 0x09
    3502:	23 30       	cpi	r18, 0x03	; 3
    3504:	31 05       	cpc	r19, r1
    3506:	54 f4       	brge	.+20     	; 0x351c <MTIMER1_voidInit+0x4e>
    3508:	88 85       	ldd	r24, Y+8	; 0x08
    350a:	99 85       	ldd	r25, Y+9	; 0x09
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	c9 f0       	breq	.+50     	; 0x3542 <MTIMER1_voidInit+0x74>
    3510:	28 85       	ldd	r18, Y+8	; 0x08
    3512:	39 85       	ldd	r19, Y+9	; 0x09
    3514:	21 30       	cpi	r18, 0x01	; 1
    3516:	31 05       	cpc	r19, r1
    3518:	89 f1       	breq	.+98     	; 0x357c <MTIMER1_voidInit+0xae>
    351a:	c0 c0       	rjmp	.+384    	; 0x369c <MTIMER1_voidInit+0x1ce>
    351c:	88 85       	ldd	r24, Y+8	; 0x08
    351e:	99 85       	ldd	r25, Y+9	; 0x09
    3520:	84 30       	cpi	r24, 0x04	; 4
    3522:	91 05       	cpc	r25, r1
    3524:	09 f4       	brne	.+2      	; 0x3528 <MTIMER1_voidInit+0x5a>
    3526:	81 c0       	rjmp	.+258    	; 0x362a <MTIMER1_voidInit+0x15c>
    3528:	28 85       	ldd	r18, Y+8	; 0x08
    352a:	39 85       	ldd	r19, Y+9	; 0x09
    352c:	24 30       	cpi	r18, 0x04	; 4
    352e:	31 05       	cpc	r19, r1
    3530:	0c f4       	brge	.+2      	; 0x3534 <MTIMER1_voidInit+0x66>
    3532:	5e c0       	rjmp	.+188    	; 0x35f0 <MTIMER1_voidInit+0x122>
    3534:	88 85       	ldd	r24, Y+8	; 0x08
    3536:	99 85       	ldd	r25, Y+9	; 0x09
    3538:	85 30       	cpi	r24, 0x05	; 5
    353a:	91 05       	cpc	r25, r1
    353c:	09 f4       	brne	.+2      	; 0x3540 <MTIMER1_voidInit+0x72>
    353e:	92 c0       	rjmp	.+292    	; 0x3664 <MTIMER1_voidInit+0x196>
    3540:	ad c0       	rjmp	.+346    	; 0x369c <MTIMER1_voidInit+0x1ce>
	case NORMAL_MODE : {
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3542:	af e4       	ldi	r26, 0x4F	; 79
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	ef e4       	ldi	r30, 0x4F	; 79
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
    354c:	8f 7b       	andi	r24, 0xBF	; 191
    354e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3550:	af e4       	ldi	r26, 0x4F	; 79
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	ef e4       	ldi	r30, 0x4F	; 79
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	8f 7e       	andi	r24, 0xEF	; 239
    355c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    355e:	af e4       	ldi	r26, 0x4F	; 79
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	ef e4       	ldi	r30, 0x4F	; 79
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	8f 77       	andi	r24, 0x7F	; 127
    356a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    356c:	af e4       	ldi	r26, 0x4F	; 79
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	ef e4       	ldi	r30, 0x4F	; 79
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	8f 7d       	andi	r24, 0xDF	; 223
    3578:	8c 93       	st	X, r24
    357a:	90 c0       	rjmp	.+288    	; 0x369c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case CTC_TOGGLE : {
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    357c:	af e4       	ldi	r26, 0x4F	; 79
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	ef e4       	ldi	r30, 0x4F	; 79
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 81       	ld	r24, Z
    3586:	80 64       	ori	r24, 0x40	; 64
    3588:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    358a:	af e4       	ldi	r26, 0x4F	; 79
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	ef e4       	ldi	r30, 0x4F	; 79
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	80 61       	ori	r24, 0x10	; 16
    3596:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3598:	af e4       	ldi	r26, 0x4F	; 79
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	ef e4       	ldi	r30, 0x4F	; 79
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	8f 77       	andi	r24, 0x7F	; 127
    35a4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    35a6:	af e4       	ldi	r26, 0x4F	; 79
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	ef e4       	ldi	r30, 0x4F	; 79
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 81       	ld	r24, Z
    35b0:	8f 7d       	andi	r24, 0xDF	; 223
    35b2:	8c 93       	st	X, r24
    35b4:	73 c0       	rjmp	.+230    	; 0x369c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case CTC_SET : {
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    35b6:	af e4       	ldi	r26, 0x4F	; 79
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	ef e4       	ldi	r30, 0x4F	; 79
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	80 64       	ori	r24, 0x40	; 64
    35c2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    35c4:	af e4       	ldi	r26, 0x4F	; 79
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	ef e4       	ldi	r30, 0x4F	; 79
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	80 61       	ori	r24, 0x10	; 16
    35d0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    35d2:	af e4       	ldi	r26, 0x4F	; 79
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	ef e4       	ldi	r30, 0x4F	; 79
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	80 68       	ori	r24, 0x80	; 128
    35de:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    35e0:	af e4       	ldi	r26, 0x4F	; 79
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	ef e4       	ldi	r30, 0x4F	; 79
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	80 62       	ori	r24, 0x20	; 32
    35ec:	8c 93       	st	X, r24
    35ee:	56 c0       	rjmp	.+172    	; 0x369c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case CTC_CLR : {
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    35f0:	af e4       	ldi	r26, 0x4F	; 79
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	ef e4       	ldi	r30, 0x4F	; 79
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	8f 7b       	andi	r24, 0xBF	; 191
    35fc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    35fe:	af e4       	ldi	r26, 0x4F	; 79
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	ef e4       	ldi	r30, 0x4F	; 79
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	8f 7e       	andi	r24, 0xEF	; 239
    360a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    360c:	af e4       	ldi	r26, 0x4F	; 79
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	ef e4       	ldi	r30, 0x4F	; 79
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 81       	ld	r24, Z
    3616:	80 68       	ori	r24, 0x80	; 128
    3618:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    361a:	af e4       	ldi	r26, 0x4F	; 79
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	ef e4       	ldi	r30, 0x4F	; 79
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	80 81       	ld	r24, Z
    3624:	80 62       	ori	r24, 0x20	; 32
    3626:	8c 93       	st	X, r24
    3628:	39 c0       	rjmp	.+114    	; 0x369c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case FAST_PWM_NON_INVERTING : {
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    362a:	af e4       	ldi	r26, 0x4F	; 79
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	ef e4       	ldi	r30, 0x4F	; 79
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	8f 7b       	andi	r24, 0xBF	; 191
    3636:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3638:	af e4       	ldi	r26, 0x4F	; 79
    363a:	b0 e0       	ldi	r27, 0x00	; 0
    363c:	ef e4       	ldi	r30, 0x4F	; 79
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	80 81       	ld	r24, Z
    3642:	8f 7e       	andi	r24, 0xEF	; 239
    3644:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3646:	af e4       	ldi	r26, 0x4F	; 79
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	ef e4       	ldi	r30, 0x4F	; 79
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	80 81       	ld	r24, Z
    3650:	80 68       	ori	r24, 0x80	; 128
    3652:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3654:	af e4       	ldi	r26, 0x4F	; 79
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	ef e4       	ldi	r30, 0x4F	; 79
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	80 62       	ori	r24, 0x20	; 32
    3660:	8c 93       	st	X, r24
    3662:	1c c0       	rjmp	.+56     	; 0x369c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case FAST_PWM_INVERTING : {
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3664:	af e4       	ldi	r26, 0x4F	; 79
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	ef e4       	ldi	r30, 0x4F	; 79
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 81       	ld	r24, Z
    366e:	80 64       	ori	r24, 0x40	; 64
    3670:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3672:	af e4       	ldi	r26, 0x4F	; 79
    3674:	b0 e0       	ldi	r27, 0x00	; 0
    3676:	ef e4       	ldi	r30, 0x4F	; 79
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	80 61       	ori	r24, 0x10	; 16
    367e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3680:	af e4       	ldi	r26, 0x4F	; 79
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	ef e4       	ldi	r30, 0x4F	; 79
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	80 68       	ori	r24, 0x80	; 128
    368c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    368e:	af e4       	ldi	r26, 0x4F	; 79
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	ef e4       	ldi	r30, 0x4F	; 79
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	80 62       	ori	r24, 0x20	; 32
    369a:	8c 93       	st	X, r24
	}

	default: break;
	}

	switch(Copy_Timer1TopMode) {
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
    369e:	28 2f       	mov	r18, r24
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	3f 83       	std	Y+7, r19	; 0x07
    36a4:	2e 83       	std	Y+6, r18	; 0x06
    36a6:	8e 81       	ldd	r24, Y+6	; 0x06
    36a8:	9f 81       	ldd	r25, Y+7	; 0x07
    36aa:	82 30       	cpi	r24, 0x02	; 2
    36ac:	91 05       	cpc	r25, r1
    36ae:	09 f4       	brne	.+2      	; 0x36b2 <MTIMER1_voidInit+0x1e4>
    36b0:	56 c0       	rjmp	.+172    	; 0x375e <MTIMER1_voidInit+0x290>
    36b2:	2e 81       	ldd	r18, Y+6	; 0x06
    36b4:	3f 81       	ldd	r19, Y+7	; 0x07
    36b6:	23 30       	cpi	r18, 0x03	; 3
    36b8:	31 05       	cpc	r19, r1
    36ba:	54 f4       	brge	.+20     	; 0x36d0 <MTIMER1_voidInit+0x202>
    36bc:	8e 81       	ldd	r24, Y+6	; 0x06
    36be:	9f 81       	ldd	r25, Y+7	; 0x07
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	81 f1       	breq	.+96     	; 0x3724 <MTIMER1_voidInit+0x256>
    36c4:	2e 81       	ldd	r18, Y+6	; 0x06
    36c6:	3f 81       	ldd	r19, Y+7	; 0x07
    36c8:	21 30       	cpi	r18, 0x01	; 1
    36ca:	31 05       	cpc	r19, r1
    36cc:	71 f0       	breq	.+28     	; 0x36ea <MTIMER1_voidInit+0x21c>
    36ce:	9d c0       	rjmp	.+314    	; 0x380a <MTIMER1_voidInit+0x33c>
    36d0:	8e 81       	ldd	r24, Y+6	; 0x06
    36d2:	9f 81       	ldd	r25, Y+7	; 0x07
    36d4:	83 30       	cpi	r24, 0x03	; 3
    36d6:	91 05       	cpc	r25, r1
    36d8:	09 f4       	brne	.+2      	; 0x36dc <MTIMER1_voidInit+0x20e>
    36da:	5e c0       	rjmp	.+188    	; 0x3798 <MTIMER1_voidInit+0x2ca>
    36dc:	2e 81       	ldd	r18, Y+6	; 0x06
    36de:	3f 81       	ldd	r19, Y+7	; 0x07
    36e0:	24 30       	cpi	r18, 0x04	; 4
    36e2:	31 05       	cpc	r19, r1
    36e4:	09 f4       	brne	.+2      	; 0x36e8 <MTIMER1_voidInit+0x21a>
    36e6:	75 c0       	rjmp	.+234    	; 0x37d2 <MTIMER1_voidInit+0x304>
    36e8:	90 c0       	rjmp	.+288    	; 0x380a <MTIMER1_voidInit+0x33c>
	case TOP_CTC_ICR1 : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    36ea:	af e4       	ldi	r26, 0x4F	; 79
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	ef e4       	ldi	r30, 0x4F	; 79
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	8e 7f       	andi	r24, 0xFE	; 254
    36f6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    36f8:	af e4       	ldi	r26, 0x4F	; 79
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	ef e4       	ldi	r30, 0x4F	; 79
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	8d 7f       	andi	r24, 0xFD	; 253
    3704:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3706:	ae e4       	ldi	r26, 0x4E	; 78
    3708:	b0 e0       	ldi	r27, 0x00	; 0
    370a:	ee e4       	ldi	r30, 0x4E	; 78
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	80 81       	ld	r24, Z
    3710:	88 60       	ori	r24, 0x08	; 8
    3712:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3714:	ae e4       	ldi	r26, 0x4E	; 78
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	ee e4       	ldi	r30, 0x4E	; 78
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	80 81       	ld	r24, Z
    371e:	80 61       	ori	r24, 0x10	; 16
    3720:	8c 93       	st	X, r24
    3722:	73 c0       	rjmp	.+230    	; 0x380a <MTIMER1_voidInit+0x33c>
		break;
	}
	case TOP_CTC_OCR1A : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3724:	af e4       	ldi	r26, 0x4F	; 79
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	ef e4       	ldi	r30, 0x4F	; 79
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	8e 7f       	andi	r24, 0xFE	; 254
    3730:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3732:	af e4       	ldi	r26, 0x4F	; 79
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	ef e4       	ldi	r30, 0x4F	; 79
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	80 81       	ld	r24, Z
    373c:	8d 7f       	andi	r24, 0xFD	; 253
    373e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3740:	ae e4       	ldi	r26, 0x4E	; 78
    3742:	b0 e0       	ldi	r27, 0x00	; 0
    3744:	ee e4       	ldi	r30, 0x4E	; 78
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	80 81       	ld	r24, Z
    374a:	88 60       	ori	r24, 0x08	; 8
    374c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    374e:	ae e4       	ldi	r26, 0x4E	; 78
    3750:	b0 e0       	ldi	r27, 0x00	; 0
    3752:	ee e4       	ldi	r30, 0x4E	; 78
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	80 81       	ld	r24, Z
    3758:	8f 7e       	andi	r24, 0xEF	; 239
    375a:	8c 93       	st	X, r24
    375c:	56 c0       	rjmp	.+172    	; 0x380a <MTIMER1_voidInit+0x33c>
		break;
	}
	case TOP_FPWM_ICR1 : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    375e:	af e4       	ldi	r26, 0x4F	; 79
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	ef e4       	ldi	r30, 0x4F	; 79
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	80 81       	ld	r24, Z
    3768:	8e 7f       	andi	r24, 0xFE	; 254
    376a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    376c:	af e4       	ldi	r26, 0x4F	; 79
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	ef e4       	ldi	r30, 0x4F	; 79
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	82 60       	ori	r24, 0x02	; 2
    3778:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    377a:	ae e4       	ldi	r26, 0x4E	; 78
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	ee e4       	ldi	r30, 0x4E	; 78
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	80 81       	ld	r24, Z
    3784:	88 60       	ori	r24, 0x08	; 8
    3786:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3788:	ae e4       	ldi	r26, 0x4E	; 78
    378a:	b0 e0       	ldi	r27, 0x00	; 0
    378c:	ee e4       	ldi	r30, 0x4E	; 78
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	80 81       	ld	r24, Z
    3792:	80 61       	ori	r24, 0x10	; 16
    3794:	8c 93       	st	X, r24
    3796:	39 c0       	rjmp	.+114    	; 0x380a <MTIMER1_voidInit+0x33c>
		break;
	}
	case TOP_FPWM_OCR1A : {
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    3798:	af e4       	ldi	r26, 0x4F	; 79
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	ef e4       	ldi	r30, 0x4F	; 79
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	80 81       	ld	r24, Z
    37a2:	81 60       	ori	r24, 0x01	; 1
    37a4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    37a6:	af e4       	ldi	r26, 0x4F	; 79
    37a8:	b0 e0       	ldi	r27, 0x00	; 0
    37aa:	ef e4       	ldi	r30, 0x4F	; 79
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	80 81       	ld	r24, Z
    37b0:	82 60       	ori	r24, 0x02	; 2
    37b2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    37b4:	ae e4       	ldi	r26, 0x4E	; 78
    37b6:	b0 e0       	ldi	r27, 0x00	; 0
    37b8:	ee e4       	ldi	r30, 0x4E	; 78
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 81       	ld	r24, Z
    37be:	88 60       	ori	r24, 0x08	; 8
    37c0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    37c2:	ae e4       	ldi	r26, 0x4E	; 78
    37c4:	b0 e0       	ldi	r27, 0x00	; 0
    37c6:	ee e4       	ldi	r30, 0x4E	; 78
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	80 81       	ld	r24, Z
    37cc:	80 61       	ori	r24, 0x10	; 16
    37ce:	8c 93       	st	X, r24
    37d0:	1c c0       	rjmp	.+56     	; 0x380a <MTIMER1_voidInit+0x33c>
		break;
	}
	case TOP_NORMAL_0XFF : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    37d2:	af e4       	ldi	r26, 0x4F	; 79
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	ef e4       	ldi	r30, 0x4F	; 79
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	8e 7f       	andi	r24, 0xFE	; 254
    37de:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    37e0:	af e4       	ldi	r26, 0x4F	; 79
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	ef e4       	ldi	r30, 0x4F	; 79
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	8d 7f       	andi	r24, 0xFD	; 253
    37ec:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    37ee:	ae e4       	ldi	r26, 0x4E	; 78
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	ee e4       	ldi	r30, 0x4E	; 78
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	80 81       	ld	r24, Z
    37f8:	87 7f       	andi	r24, 0xF7	; 247
    37fa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    37fc:	ae e4       	ldi	r26, 0x4E	; 78
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	ee e4       	ldi	r30, 0x4E	; 78
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	8f 7e       	andi	r24, 0xEF	; 239
    3808:	8c 93       	st	X, r24
	//
	//
	default: break;
	}

	switch (Copy_enuPrescalerValue){
    380a:	8b 81       	ldd	r24, Y+3	; 0x03
    380c:	28 2f       	mov	r18, r24
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	3d 83       	std	Y+5, r19	; 0x05
    3812:	2c 83       	std	Y+4, r18	; 0x04
    3814:	8c 81       	ldd	r24, Y+4	; 0x04
    3816:	9d 81       	ldd	r25, Y+5	; 0x05
    3818:	81 30       	cpi	r24, 0x01	; 1
    381a:	91 05       	cpc	r25, r1
    381c:	01 f1       	breq	.+64     	; 0x385e <MTIMER1_voidInit+0x390>
    381e:	2c 81       	ldd	r18, Y+4	; 0x04
    3820:	3d 81       	ldd	r19, Y+5	; 0x05
    3822:	22 30       	cpi	r18, 0x02	; 2
    3824:	31 05       	cpc	r19, r1
    3826:	89 f1       	breq	.+98     	; 0x388a <MTIMER1_voidInit+0x3bc>
    3828:	8c 81       	ldd	r24, Y+4	; 0x04
    382a:	9d 81       	ldd	r25, Y+5	; 0x05
    382c:	00 97       	sbiw	r24, 0x00	; 0
    382e:	09 f0       	breq	.+2      	; 0x3832 <MTIMER1_voidInit+0x364>
    3830:	41 c0       	rjmp	.+130    	; 0x38b4 <MTIMER1_voidInit+0x3e6>
	case DIV_8: {
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    3832:	ae e4       	ldi	r26, 0x4E	; 78
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	ee e4       	ldi	r30, 0x4E	; 78
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	80 81       	ld	r24, Z
    383c:	8e 7f       	andi	r24, 0xFE	; 254
    383e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    3840:	ae e4       	ldi	r26, 0x4E	; 78
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	ee e4       	ldi	r30, 0x4E	; 78
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	82 60       	ori	r24, 0x02	; 2
    384c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    384e:	ae e4       	ldi	r26, 0x4E	; 78
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	ee e4       	ldi	r30, 0x4E	; 78
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 81       	ld	r24, Z
    3858:	8b 7f       	andi	r24, 0xFB	; 251
    385a:	8c 93       	st	X, r24
    385c:	2b c0       	rjmp	.+86     	; 0x38b4 <MTIMER1_voidInit+0x3e6>
		break;
	}
	case DIV_64: {
		SET_BIT(TCCR1B,TCCR1B_CS10);
    385e:	ae e4       	ldi	r26, 0x4E	; 78
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	ee e4       	ldi	r30, 0x4E	; 78
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	80 81       	ld	r24, Z
    3868:	81 60       	ori	r24, 0x01	; 1
    386a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    386c:	ae e4       	ldi	r26, 0x4E	; 78
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	ee e4       	ldi	r30, 0x4E	; 78
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	82 60       	ori	r24, 0x02	; 2
    3878:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    387a:	ae e4       	ldi	r26, 0x4E	; 78
    387c:	b0 e0       	ldi	r27, 0x00	; 0
    387e:	ee e4       	ldi	r30, 0x4E	; 78
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	80 81       	ld	r24, Z
    3884:	8b 7f       	andi	r24, 0xFB	; 251
    3886:	8c 93       	st	X, r24
    3888:	15 c0       	rjmp	.+42     	; 0x38b4 <MTIMER1_voidInit+0x3e6>
		break;
	}
	case DIV_256: {
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    388a:	ae e4       	ldi	r26, 0x4E	; 78
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	ee e4       	ldi	r30, 0x4E	; 78
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	8e 7f       	andi	r24, 0xFE	; 254
    3896:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    3898:	ae e4       	ldi	r26, 0x4E	; 78
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	ee e4       	ldi	r30, 0x4E	; 78
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
    38a2:	8d 7f       	andi	r24, 0xFD	; 253
    38a4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);
    38a6:	ae e4       	ldi	r26, 0x4E	; 78
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	ee e4       	ldi	r30, 0x4E	; 78
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	84 60       	ori	r24, 0x04	; 4
    38b2:	8c 93       	st	X, r24
	//
	//
	default: break;
	}

}
    38b4:	29 96       	adiw	r28, 0x09	; 9
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <MTIMER1_voidSetTopValue>:
void MTIMER1_voidSetTopValue(u16 Copy_u16TopValue , Top_t Copy_Timer1TopMode){
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <MTIMER1_voidSetTopValue+0x6>
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <MTIMER1_voidSetTopValue+0x8>
    38ce:	0f 92       	push	r0
    38d0:	cd b7       	in	r28, 0x3d	; 61
    38d2:	de b7       	in	r29, 0x3e	; 62
    38d4:	9a 83       	std	Y+2, r25	; 0x02
    38d6:	89 83       	std	Y+1, r24	; 0x01
    38d8:	6b 83       	std	Y+3, r22	; 0x03
	switch (Copy_Timer1TopMode) {
    38da:	8b 81       	ldd	r24, Y+3	; 0x03
    38dc:	28 2f       	mov	r18, r24
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	3d 83       	std	Y+5, r19	; 0x05
    38e2:	2c 83       	std	Y+4, r18	; 0x04
    38e4:	8c 81       	ldd	r24, Y+4	; 0x04
    38e6:	9d 81       	ldd	r25, Y+5	; 0x05
    38e8:	82 30       	cpi	r24, 0x02	; 2
    38ea:	91 05       	cpc	r25, r1
    38ec:	31 f0       	breq	.+12     	; 0x38fa <MTIMER1_voidSetTopValue+0x34>
    38ee:	2c 81       	ldd	r18, Y+4	; 0x04
    38f0:	3d 81       	ldd	r19, Y+5	; 0x05
    38f2:	23 30       	cpi	r18, 0x03	; 3
    38f4:	31 05       	cpc	r19, r1
    38f6:	41 f0       	breq	.+16     	; 0x3908 <MTIMER1_voidSetTopValue+0x42>
    38f8:	0d c0       	rjmp	.+26     	; 0x3914 <MTIMER1_voidSetTopValue+0x4e>
	case TOP_FPWM_ICR1 : ICR1 = Copy_u16TopValue; break;
    38fa:	e6 e4       	ldi	r30, 0x46	; 70
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
    3900:	9a 81       	ldd	r25, Y+2	; 0x02
    3902:	91 83       	std	Z+1, r25	; 0x01
    3904:	80 83       	st	Z, r24
    3906:	06 c0       	rjmp	.+12     	; 0x3914 <MTIMER1_voidSetTopValue+0x4e>
	case TOP_FPWM_OCR1A: OCR1A = Copy_u16TopValue; break;
    3908:	ea e4       	ldi	r30, 0x4A	; 74
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	9a 81       	ldd	r25, Y+2	; 0x02
    3910:	91 83       	std	Z+1, r25	; 0x01
    3912:	80 83       	st	Z, r24
	default: break;
	}

}
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	cf 91       	pop	r28
    3920:	df 91       	pop	r29
    3922:	08 95       	ret

00003924 <MTIMER1_voidSetDutyCycle>:
void MTIMER1_voidSetDutyCycle(u16 Copy_u16DutyCycleValue){
    3924:	df 93       	push	r29
    3926:	cf 93       	push	r28
    3928:	00 d0       	rcall	.+0      	; 0x392a <MTIMER1_voidSetDutyCycle+0x6>
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	9a 83       	std	Y+2, r25	; 0x02
    3930:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16DutyCycleValue;
    3932:	ea e4       	ldi	r30, 0x4A	; 74
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	89 81       	ldd	r24, Y+1	; 0x01
    3938:	9a 81       	ldd	r25, Y+2	; 0x02
    393a:	91 83       	std	Z+1, r25	; 0x01
    393c:	80 83       	st	Z, r24
}
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	08 95       	ret

00003948 <MTIMER1_voidEdgeSelect>:
void MTIMER1_voidEdgeSelect(Edge_t Copy_EdgeSelect){
    3948:	df 93       	push	r29
    394a:	cf 93       	push	r28
    394c:	00 d0       	rcall	.+0      	; 0x394e <MTIMER1_voidEdgeSelect+0x6>
    394e:	0f 92       	push	r0
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_EdgeSelect){
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	28 2f       	mov	r18, r24
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	3b 83       	std	Y+3, r19	; 0x03
    395e:	2a 83       	std	Y+2, r18	; 0x02
    3960:	8a 81       	ldd	r24, Y+2	; 0x02
    3962:	9b 81       	ldd	r25, Y+3	; 0x03
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	31 f0       	breq	.+12     	; 0x3974 <MTIMER1_voidEdgeSelect+0x2c>
    3968:	2a 81       	ldd	r18, Y+2	; 0x02
    396a:	3b 81       	ldd	r19, Y+3	; 0x03
    396c:	21 30       	cpi	r18, 0x01	; 1
    396e:	31 05       	cpc	r19, r1
    3970:	49 f0       	breq	.+18     	; 0x3984 <MTIMER1_voidEdgeSelect+0x3c>
    3972:	0f c0       	rjmp	.+30     	; 0x3992 <MTIMER1_voidEdgeSelect+0x4a>
	case RIFSING_EDGE : SET_BIT(TCCR1B, TCCR1B_ICES1); break;
    3974:	ae e4       	ldi	r26, 0x4E	; 78
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	ee e4       	ldi	r30, 0x4E	; 78
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	80 64       	ori	r24, 0x40	; 64
    3980:	8c 93       	st	X, r24
    3982:	07 c0       	rjmp	.+14     	; 0x3992 <MTIMER1_voidEdgeSelect+0x4a>
	case FALLING_EDGE : CLR_BIT(TCCR1B, TCCR1B_ICES1); break;
    3984:	ae e4       	ldi	r26, 0x4E	; 78
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	ee e4       	ldi	r30, 0x4E	; 78
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	8f 7b       	andi	r24, 0xBF	; 191
    3990:	8c 93       	st	X, r24

	}
}
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	cf 91       	pop	r28
    399a:	df 91       	pop	r29
    399c:	08 95       	ret

0000399e <MTIMER_voidEnableInterrupt>:

void MTIMER_voidEnableInterrupt(void){
    399e:	df 93       	push	r29
    39a0:	cf 93       	push	r28
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    39a6:	a9 e5       	ldi	r26, 0x59	; 89
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	e9 e5       	ldi	r30, 0x59	; 89
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	80 62       	ori	r24, 0x20	; 32
    39b2:	8c 93       	st	X, r24
}
    39b4:	cf 91       	pop	r28
    39b6:	df 91       	pop	r29
    39b8:	08 95       	ret

000039ba <compareString>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"

#include "comonFunctions.h"

u8 compareString(u8* s1 , u8* s2,u8 size){
    39ba:	df 93       	push	r29
    39bc:	cf 93       	push	r28
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	27 97       	sbiw	r28, 0x07	; 7
    39c4:	0f b6       	in	r0, 0x3f	; 63
    39c6:	f8 94       	cli
    39c8:	de bf       	out	0x3e, r29	; 62
    39ca:	0f be       	out	0x3f, r0	; 63
    39cc:	cd bf       	out	0x3d, r28	; 61
    39ce:	9c 83       	std	Y+4, r25	; 0x04
    39d0:	8b 83       	std	Y+3, r24	; 0x03
    39d2:	7e 83       	std	Y+6, r23	; 0x06
    39d4:	6d 83       	std	Y+5, r22	; 0x05
    39d6:	4f 83       	std	Y+7, r20	; 0x07
	u8 result = 1;
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for (i = 0 ; i < size ; i++){
    39dc:	19 82       	std	Y+1, r1	; 0x01
    39de:	18 c0       	rjmp	.+48     	; 0x3a10 <compareString+0x56>
		if (s1[i] == s2[i]){
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	28 2f       	mov	r18, r24
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	8b 81       	ldd	r24, Y+3	; 0x03
    39e8:	9c 81       	ldd	r25, Y+4	; 0x04
    39ea:	fc 01       	movw	r30, r24
    39ec:	e2 0f       	add	r30, r18
    39ee:	f3 1f       	adc	r31, r19
    39f0:	40 81       	ld	r20, Z
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	28 2f       	mov	r18, r24
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	8d 81       	ldd	r24, Y+5	; 0x05
    39fa:	9e 81       	ldd	r25, Y+6	; 0x06
    39fc:	fc 01       	movw	r30, r24
    39fe:	e2 0f       	add	r30, r18
    3a00:	f3 1f       	adc	r31, r19
    3a02:	80 81       	ld	r24, Z
    3a04:	48 17       	cp	r20, r24
    3a06:	09 f0       	breq	.+2      	; 0x3a0a <compareString+0x50>

		}
		else {
			result = 0;
    3a08:	1a 82       	std	Y+2, r1	; 0x02
#include "comonFunctions.h"

u8 compareString(u8* s1 , u8* s2,u8 size){
	u8 result = 1;
	u8 i;
	for (i = 0 ; i < size ; i++){
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	8f 5f       	subi	r24, 0xFF	; 255
    3a0e:	89 83       	std	Y+1, r24	; 0x01
    3a10:	99 81       	ldd	r25, Y+1	; 0x01
    3a12:	8f 81       	ldd	r24, Y+7	; 0x07
    3a14:	98 17       	cp	r25, r24
    3a16:	20 f3       	brcs	.-56     	; 0x39e0 <compareString+0x26>
		else {
			result = 0;
		}

	}
	return result;
    3a18:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a1a:	27 96       	adiw	r28, 0x07	; 7
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	cf 91       	pop	r28
    3a28:	df 91       	pop	r29
    3a2a:	08 95       	ret

00003a2c <main>:
#include "smart_home.h"
extern u8 temprature;
u8 spiRecivedData = NO_DATA;
u8 flag			  = 0 ;

int main (){
    3a2c:	df 93       	push	r29
    3a2e:	cf 93       	push	r28
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
	initUsedPrefralsBeforeSPI();
    3a34:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <initUsedPrefralsBeforeSPI>

	while (spiRecivedData!= SLAVE_START);
    3a38:	80 91 68 01 	lds	r24, 0x0168
    3a3c:	83 3a       	cpi	r24, 0xA3	; 163
    3a3e:	e1 f7       	brne	.-8      	; 0x3a38 <main+0xc>

	initUsedPrefralsAfterSPI();
    3a40:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <initUsedPrefralsAfterSPI>

	while(1){

		if ( spiRecivedData > 2 && spiRecivedData < 150){
    3a44:	80 91 68 01 	lds	r24, 0x0168
    3a48:	83 30       	cpi	r24, 0x03	; 3
    3a4a:	70 f0       	brcs	.+28     	; 0x3a68 <main+0x3c>
    3a4c:	80 91 68 01 	lds	r24, 0x0168
    3a50:	86 39       	cpi	r24, 0x96	; 150
    3a52:	50 f4       	brcc	.+20     	; 0x3a68 <main+0x3c>
			temprature = spiRecivedData%100;
    3a54:	80 91 68 01 	lds	r24, 0x0168
    3a58:	94 e6       	ldi	r25, 0x64	; 100
    3a5a:	69 2f       	mov	r22, r25
    3a5c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__udivmodqi4>
    3a60:	89 2f       	mov	r24, r25
    3a62:	80 93 69 01 	sts	0x0169, r24
    3a66:	ee cf       	rjmp	.-36     	; 0x3a44 <main+0x18>

		}

		else if (spiRecivedData == FAN_ON_TEMP){
    3a68:	80 91 68 01 	lds	r24, 0x0168
    3a6c:	87 39       	cpi	r24, 0x97	; 151
    3a6e:	19 f4       	brne	.+6      	; 0x3a76 <main+0x4a>
			turnOnFan();
    3a70:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <turnOnFan>
    3a74:	e7 cf       	rjmp	.-50     	; 0x3a44 <main+0x18>
		}
		else if (spiRecivedData == FAN_ON_BLUETOOTH){
    3a76:	80 91 68 01 	lds	r24, 0x0168
    3a7a:	89 39       	cpi	r24, 0x99	; 153
    3a7c:	19 f4       	brne	.+6      	; 0x3a84 <main+0x58>
			turnOnFan();
    3a7e:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <turnOnFan>
    3a82:	e0 cf       	rjmp	.-64     	; 0x3a44 <main+0x18>
		}
		else if (spiRecivedData == FAN_OFF_TEMP){
    3a84:	80 91 68 01 	lds	r24, 0x0168
    3a88:	88 39       	cpi	r24, 0x98	; 152
    3a8a:	19 f4       	brne	.+6      	; 0x3a92 <main+0x66>
			turnOffFan();
    3a8c:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <turnOffFan>
    3a90:	d9 cf       	rjmp	.-78     	; 0x3a44 <main+0x18>
		}
		else if (spiRecivedData == FAN_OFF_BLUETOOTH){
    3a92:	80 91 68 01 	lds	r24, 0x0168
    3a96:	8a 39       	cpi	r24, 0x9A	; 154
    3a98:	19 f4       	brne	.+6      	; 0x3aa0 <main+0x74>
			turnOnFan();
    3a9a:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <turnOnFan>
    3a9e:	d2 cf       	rjmp	.-92     	; 0x3a44 <main+0x18>
		}

		else if (spiRecivedData == DOOR_ON_BLUETOOTH){
    3aa0:	80 91 68 01 	lds	r24, 0x0168
    3aa4:	8f 39       	cpi	r24, 0x9F	; 159
    3aa6:	31 f4       	brne	.+12     	; 0x3ab4 <main+0x88>
			open_Home_Door();
    3aa8:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <open_Home_Door>
			spiRecivedData = NO_DATA;
    3aac:	84 ea       	ldi	r24, 0xA4	; 164
    3aae:	80 93 68 01 	sts	0x0168, r24
    3ab2:	c8 cf       	rjmp	.-112    	; 0x3a44 <main+0x18>
		}
		else if (spiRecivedData == DOOR_OFF_BLUETOOTH){
    3ab4:	80 91 68 01 	lds	r24, 0x0168
    3ab8:	80 3a       	cpi	r24, 0xA0	; 160
    3aba:	31 f4       	brne	.+12     	; 0x3ac8 <main+0x9c>
			close_Home_Door();
    3abc:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <close_Home_Door>
			spiRecivedData = NO_DATA;
    3ac0:	84 ea       	ldi	r24, 0xA4	; 164
    3ac2:	80 93 68 01 	sts	0x0168, r24
    3ac6:	be cf       	rjmp	.-132    	; 0x3a44 <main+0x18>
		}

		else if (spiRecivedData == GHARASH_ON_BLUETOOTH){
    3ac8:	80 91 68 01 	lds	r24, 0x0168
    3acc:	81 3a       	cpi	r24, 0xA1	; 161
    3ace:	31 f4       	brne	.+12     	; 0x3adc <main+0xb0>
			openGaragDoor();
    3ad0:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <openGaragDoor>
			spiRecivedData = NO_DATA;
    3ad4:	84 ea       	ldi	r24, 0xA4	; 164
    3ad6:	80 93 68 01 	sts	0x0168, r24
    3ada:	b4 cf       	rjmp	.-152    	; 0x3a44 <main+0x18>
		}
		else if (spiRecivedData == GHARASH_OFF_BLUETOOTH){
    3adc:	80 91 68 01 	lds	r24, 0x0168
    3ae0:	82 3a       	cpi	r24, 0xA2	; 162
    3ae2:	31 f4       	brne	.+12     	; 0x3af0 <main+0xc4>
			closeGaragDoor();
    3ae4:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <closeGaragDoor>
			spiRecivedData = NO_DATA;
    3ae8:	84 ea       	ldi	r24, 0xA4	; 164
    3aea:	80 93 68 01 	sts	0x0168, r24
    3aee:	aa cf       	rjmp	.-172    	; 0x3a44 <main+0x18>
		}

		else if (spiRecivedData == LIGHT_ON_LUX){
    3af0:	80 91 68 01 	lds	r24, 0x0168
    3af4:	8b 39       	cpi	r24, 0x9B	; 155
    3af6:	31 f4       	brne	.+12     	; 0x3b04 <main+0xd8>
			on_All_LEDS();
    3af8:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <on_All_LEDS>
			spiRecivedData = NO_DATA;
    3afc:	84 ea       	ldi	r24, 0xA4	; 164
    3afe:	80 93 68 01 	sts	0x0168, r24
    3b02:	a0 cf       	rjmp	.-192    	; 0x3a44 <main+0x18>
		}
		else if (spiRecivedData == LIGHT_OFF_LUX){
    3b04:	80 91 68 01 	lds	r24, 0x0168
    3b08:	8c 39       	cpi	r24, 0x9C	; 156
    3b0a:	31 f4       	brne	.+12     	; 0x3b18 <main+0xec>
			off_All_LEDS();
    3b0c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <off_All_LEDS>
			spiRecivedData = NO_DATA;
    3b10:	84 ea       	ldi	r24, 0xA4	; 164
    3b12:	80 93 68 01 	sts	0x0168, r24
    3b16:	96 cf       	rjmp	.-212    	; 0x3a44 <main+0x18>
		}
		else if (spiRecivedData == LIGHT_ON_BLUETOOTH){
    3b18:	80 91 68 01 	lds	r24, 0x0168
    3b1c:	8d 39       	cpi	r24, 0x9D	; 157
    3b1e:	31 f4       	brne	.+12     	; 0x3b2c <main+0x100>
			on_All_LEDS();
    3b20:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <on_All_LEDS>
			spiRecivedData = NO_DATA;
    3b24:	84 ea       	ldi	r24, 0xA4	; 164
    3b26:	80 93 68 01 	sts	0x0168, r24
    3b2a:	8c cf       	rjmp	.-232    	; 0x3a44 <main+0x18>
		}
		else if (spiRecivedData == LIGHT_OFF_BLUETOOTH){
    3b2c:	80 91 68 01 	lds	r24, 0x0168
    3b30:	8e 39       	cpi	r24, 0x9E	; 158
    3b32:	09 f0       	breq	.+2      	; 0x3b36 <main+0x10a>
    3b34:	87 cf       	rjmp	.-242    	; 0x3a44 <main+0x18>
			off_All_LEDS();
    3b36:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <off_All_LEDS>
			spiRecivedData = NO_DATA;
    3b3a:	84 ea       	ldi	r24, 0xA4	; 164
    3b3c:	80 93 68 01 	sts	0x0168, r24
    3b40:	81 cf       	rjmp	.-254    	; 0x3a44 <main+0x18>

00003b42 <displaySeg1Num>:

extern u8 spiRecivedData;
u8 temprature 		= 63;
u8 counter 			= 0;

void displaySeg1Num(){
    3b42:	df 93       	push	r29
    3b44:	cf 93       	push	r28
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
	H7SEG_voidWrite((temprature%10),DIO_PORTC);
    3b4a:	80 91 69 01 	lds	r24, 0x0169
    3b4e:	9a e0       	ldi	r25, 0x0A	; 10
    3b50:	69 2f       	mov	r22, r25
    3b52:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__udivmodqi4>
    3b56:	89 2f       	mov	r24, r25
    3b58:	63 e0       	ldi	r22, 0x03	; 3
    3b5a:	0e 94 9c 08 	call	0x1138	; 0x1138 <H7SEG_voidWrite>
	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);
    3b5e:	84 e0       	ldi	r24, 0x04	; 4
    3b60:	63 e0       	ldi	r22, 0x03	; 3
    3b62:	40 e0       	ldi	r20, 0x00	; 0
    3b64:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN2,DIO_HIGH);
    3b68:	84 e0       	ldi	r24, 0x04	; 4
    3b6a:	62 e0       	ldi	r22, 0x02	; 2
    3b6c:	41 e0       	ldi	r20, 0x01	; 1
    3b6e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
}
    3b72:	cf 91       	pop	r28
    3b74:	df 91       	pop	r29
    3b76:	08 95       	ret

00003b78 <displaySeg2Num>:
void displaySeg2Num(){
    3b78:	df 93       	push	r29
    3b7a:	cf 93       	push	r28
    3b7c:	cd b7       	in	r28, 0x3d	; 61
    3b7e:	de b7       	in	r29, 0x3e	; 62
	H7SEG_voidWrite((temprature/10),DIO_PORTC);
    3b80:	80 91 69 01 	lds	r24, 0x0169
    3b84:	9a e0       	ldi	r25, 0x0A	; 10
    3b86:	69 2f       	mov	r22, r25
    3b88:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__udivmodqi4>
    3b8c:	63 e0       	ldi	r22, 0x03	; 3
    3b8e:	0e 94 9c 08 	call	0x1138	; 0x1138 <H7SEG_voidWrite>
	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    3b92:	84 e0       	ldi	r24, 0x04	; 4
    3b94:	63 e0       	ldi	r22, 0x03	; 3
    3b96:	41 e0       	ldi	r20, 0x01	; 1
    3b98:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN2,DIO_LOW);
    3b9c:	84 e0       	ldi	r24, 0x04	; 4
    3b9e:	62 e0       	ldi	r22, 0x02	; 2
    3ba0:	40 e0       	ldi	r20, 0x00	; 0
    3ba2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
}
    3ba6:	cf 91       	pop	r28
    3ba8:	df 91       	pop	r29
    3baa:	08 95       	ret

00003bac <ISR_TIMER0>:

void ISR_TIMER0(void){
    3bac:	df 93       	push	r29
    3bae:	cf 93       	push	r28
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
	counter ++;
    3bb4:	80 91 75 01 	lds	r24, 0x0175
    3bb8:	8f 5f       	subi	r24, 0xFF	; 255
    3bba:	80 93 75 01 	sts	0x0175, r24

	if (counter == 50){
    3bbe:	80 91 75 01 	lds	r24, 0x0175
    3bc2:	82 33       	cpi	r24, 0x32	; 50
    3bc4:	19 f4       	brne	.+6      	; 0x3bcc <ISR_TIMER0+0x20>

			displaySeg1Num();
    3bc6:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <displaySeg1Num>
    3bca:	08 c0       	rjmp	.+16     	; 0x3bdc <ISR_TIMER0+0x30>
		}
	else if (counter == 100){
    3bcc:	80 91 75 01 	lds	r24, 0x0175
    3bd0:	84 36       	cpi	r24, 0x64	; 100
    3bd2:	21 f4       	brne	.+8      	; 0x3bdc <ISR_TIMER0+0x30>
			counter = 0;
    3bd4:	10 92 75 01 	sts	0x0175, r1
			displaySeg2Num();
    3bd8:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <displaySeg2Num>
		}
}
    3bdc:	cf 91       	pop	r28
    3bde:	df 91       	pop	r29
    3be0:	08 95       	ret

00003be2 <ISR_SPI>:

void ISR_SPI(void){
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	cd b7       	in	r28, 0x3d	; 61
    3be8:	de b7       	in	r29, 0x3e	; 62
	spiRecivedData = MSPI_u8GetSPDR();
    3bea:	0e 94 72 19 	call	0x32e4	; 0x32e4 <MSPI_u8GetSPDR>
    3bee:	80 93 68 01 	sts	0x0168, r24
}
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	08 95       	ret

00003bf8 <initUsedPrefralsBeforeSPI>:

void initUsedPrefralsBeforeSPI(){
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
	Port_voidInit();
    3c00:	0e 94 91 14 	call	0x2922	; 0x2922 <Port_voidInit>

	MGIE_voidEnable();
    3c04:	0e 94 08 19 	call	0x3210	; 0x3210 <MGIE_voidEnable>
	MSPI_voidInit();
    3c08:	0e 94 24 19 	call	0x3248	; 0x3248 <MSPI_voidInit>
	setCallBackSPI(ISR_SPI);
    3c0c:	81 ef       	ldi	r24, 0xF1	; 241
    3c0e:	9d e1       	ldi	r25, 0x1D	; 29
    3c10:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <setCallBackSPI>
}
    3c14:	cf 91       	pop	r28
    3c16:	df 91       	pop	r29
    3c18:	08 95       	ret

00003c1a <initUsedPrefralsAfterSPI>:

void initUsedPrefralsAfterSPI(){
    3c1a:	df 93       	push	r29
    3c1c:	cf 93       	push	r28
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62

	MTIMER0_voidInit();
    3c22:	0e 94 bb 19 	call	0x3376	; 0x3376 <MTIMER0_voidInit>
	setCallBackTimer0(ISR_TIMER0);
    3c26:	86 ed       	ldi	r24, 0xD6	; 214
    3c28:	9d e1       	ldi	r25, 0x1D	; 29
    3c2a:	0e 94 28 1a 	call	0x3450	; 0x3450 <setCallBackTimer0>

	MTIMER1_voidInit(FAST_PWM_NON_INVERTING,TOP_FPWM_ICR1,DIV_8);
    3c2e:	84 e0       	ldi	r24, 0x04	; 4
    3c30:	62 e0       	ldi	r22, 0x02	; 2
    3c32:	40 e0       	ldi	r20, 0x00	; 0
    3c34:	0e 94 67 1a 	call	0x34ce	; 0x34ce <MTIMER1_voidInit>
	MTIMER1_voidSetTopValue(20000,TOP_FPWM_ICR1);
    3c38:	80 e2       	ldi	r24, 0x20	; 32
    3c3a:	9e e4       	ldi	r25, 0x4E	; 78
    3c3c:	62 e0       	ldi	r22, 0x02	; 2
    3c3e:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <MTIMER1_voidSetTopValue>
}
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	08 95       	ret

00003c48 <open_Home_Door>:
void open_Home_Door(){
    3c48:	df 93       	push	r29
    3c4a:	cf 93       	push	r28
    3c4c:	cd b7       	in	r28, 0x3d	; 61
    3c4e:	de b7       	in	r29, 0x3e	; 62
	HServo_voidSetAngle(180);
    3c50:	64 eb       	ldi	r22, 0xB4	; 180
    3c52:	70 e0       	ldi	r23, 0x00	; 0
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <HServo_voidSetAngle>

}
    3c5c:	cf 91       	pop	r28
    3c5e:	df 91       	pop	r29
    3c60:	08 95       	ret

00003c62 <close_Home_Door>:
void close_Home_Door(){
    3c62:	df 93       	push	r29
    3c64:	cf 93       	push	r28
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
	HServo_voidSetAngle(0);
    3c6a:	60 e0       	ldi	r22, 0x00	; 0
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <HServo_voidSetAngle>

}
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	08 95       	ret

00003c7c <on_All_LEDS>:


void on_All_LEDS(){
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
	HLED_ErrorState_LEDOn(HLED_PORTA_P0);
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	0e 94 1f 09 	call	0x123e	; 0x123e <HLED_ErrorState_LEDOn>
	HLED_ErrorState_LEDOn(HLED_PORTA_P1);
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	0e 94 1f 09 	call	0x123e	; 0x123e <HLED_ErrorState_LEDOn>
	HLED_ErrorState_LEDOn(HLED_PORTA_P2);
    3c90:	83 e0       	ldi	r24, 0x03	; 3
    3c92:	0e 94 1f 09 	call	0x123e	; 0x123e <HLED_ErrorState_LEDOn>
	HLED_ErrorState_LEDOn(HLED_PORTA_P3);
    3c96:	84 e0       	ldi	r24, 0x04	; 4
    3c98:	0e 94 1f 09 	call	0x123e	; 0x123e <HLED_ErrorState_LEDOn>
	HLED_ErrorState_LEDOn(HLED_PORTA_P4);
    3c9c:	85 e0       	ldi	r24, 0x05	; 5
    3c9e:	0e 94 1f 09 	call	0x123e	; 0x123e <HLED_ErrorState_LEDOn>
	HLED_ErrorState_LEDOn(HLED_PORTA_P5);
    3ca2:	86 e0       	ldi	r24, 0x06	; 6
    3ca4:	0e 94 1f 09 	call	0x123e	; 0x123e <HLED_ErrorState_LEDOn>
	HLED_ErrorState_LEDOn(HLED_PORTA_P6);
    3ca8:	87 e0       	ldi	r24, 0x07	; 7
    3caa:	0e 94 1f 09 	call	0x123e	; 0x123e <HLED_ErrorState_LEDOn>
	HLED_ErrorState_LEDOn(HLED_PORTA_P7);
    3cae:	88 e0       	ldi	r24, 0x08	; 8
    3cb0:	0e 94 1f 09 	call	0x123e	; 0x123e <HLED_ErrorState_LEDOn>
}
    3cb4:	cf 91       	pop	r28
    3cb6:	df 91       	pop	r29
    3cb8:	08 95       	ret

00003cba <off_All_LEDS>:

void off_All_LEDS(){
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	cd b7       	in	r28, 0x3d	; 61
    3cc0:	de b7       	in	r29, 0x3e	; 62
	HLED_ErrorState_LEDOff(HLED_PORTA_P0);
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	0e 94 be 0a 	call	0x157c	; 0x157c <HLED_ErrorState_LEDOff>
	HLED_ErrorState_LEDOff(HLED_PORTA_P1);
    3cc8:	82 e0       	ldi	r24, 0x02	; 2
    3cca:	0e 94 be 0a 	call	0x157c	; 0x157c <HLED_ErrorState_LEDOff>
	HLED_ErrorState_LEDOff(HLED_PORTA_P2);
    3cce:	83 e0       	ldi	r24, 0x03	; 3
    3cd0:	0e 94 be 0a 	call	0x157c	; 0x157c <HLED_ErrorState_LEDOff>
	HLED_ErrorState_LEDOff(HLED_PORTA_P3);
    3cd4:	84 e0       	ldi	r24, 0x04	; 4
    3cd6:	0e 94 be 0a 	call	0x157c	; 0x157c <HLED_ErrorState_LEDOff>
	HLED_ErrorState_LEDOff(HLED_PORTA_P4);
    3cda:	85 e0       	ldi	r24, 0x05	; 5
    3cdc:	0e 94 be 0a 	call	0x157c	; 0x157c <HLED_ErrorState_LEDOff>
	HLED_ErrorState_LEDOff(HLED_PORTA_P5);
    3ce0:	86 e0       	ldi	r24, 0x06	; 6
    3ce2:	0e 94 be 0a 	call	0x157c	; 0x157c <HLED_ErrorState_LEDOff>
	HLED_ErrorState_LEDOff(HLED_PORTA_P6);
    3ce6:	87 e0       	ldi	r24, 0x07	; 7
    3ce8:	0e 94 be 0a 	call	0x157c	; 0x157c <HLED_ErrorState_LEDOff>
	HLED_ErrorState_LEDOff(HLED_PORTA_P7);
    3cec:	88 e0       	ldi	r24, 0x08	; 8
    3cee:	0e 94 be 0a 	call	0x157c	; 0x157c <HLED_ErrorState_LEDOff>
}
    3cf2:	cf 91       	pop	r28
    3cf4:	df 91       	pop	r29
    3cf6:	08 95       	ret

00003cf8 <openGaragDoor>:


void openGaragDoor(){
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
	Hstepper_rotate_CW(270);
    3d00:	8e e0       	ldi	r24, 0x0E	; 14
    3d02:	91 e0       	ldi	r25, 0x01	; 1
    3d04:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <Hstepper_rotate_CW>
	Hstepper_Stop();
    3d08:	0e 94 19 12 	call	0x2432	; 0x2432 <Hstepper_Stop>
}
    3d0c:	cf 91       	pop	r28
    3d0e:	df 91       	pop	r29
    3d10:	08 95       	ret

00003d12 <closeGaragDoor>:
void closeGaragDoor(){
    3d12:	df 93       	push	r29
    3d14:	cf 93       	push	r28
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
	Hstepper_rotate_ACW(270);
    3d1a:	8e e0       	ldi	r24, 0x0E	; 14
    3d1c:	91 e0       	ldi	r25, 0x01	; 1
    3d1e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <Hstepper_rotate_ACW>
	Hstepper_Stop();
    3d22:	0e 94 19 12 	call	0x2432	; 0x2432 <Hstepper_Stop>
}
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	08 95       	ret

00003d2c <turnOnFan>:

void turnOnFan(){
    3d2c:	df 93       	push	r29
    3d2e:	cf 93       	push	r28
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN0,DIO_HIGH);
    3d34:	84 e0       	ldi	r24, 0x04	; 4
    3d36:	60 e0       	ldi	r22, 0x00	; 0
    3d38:	41 e0       	ldi	r20, 0x01	; 1
    3d3a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
}
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <turnOffFan>:

void turnOffFan(){
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
	MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN0,DIO_LOW);
    3d4c:	84 e0       	ldi	r24, 0x04	; 4
    3d4e:	60 e0       	ldi	r22, 0x00	; 0
    3d50:	40 e0       	ldi	r20, 0x00	; 0
    3d52:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <MDIO_ErrorS_SetPinValue>
}
    3d56:	cf 91       	pop	r28
    3d58:	df 91       	pop	r29
    3d5a:	08 95       	ret

00003d5c <__mulsi3>:
    3d5c:	62 9f       	mul	r22, r18
    3d5e:	d0 01       	movw	r26, r0
    3d60:	73 9f       	mul	r23, r19
    3d62:	f0 01       	movw	r30, r0
    3d64:	82 9f       	mul	r24, r18
    3d66:	e0 0d       	add	r30, r0
    3d68:	f1 1d       	adc	r31, r1
    3d6a:	64 9f       	mul	r22, r20
    3d6c:	e0 0d       	add	r30, r0
    3d6e:	f1 1d       	adc	r31, r1
    3d70:	92 9f       	mul	r25, r18
    3d72:	f0 0d       	add	r31, r0
    3d74:	83 9f       	mul	r24, r19
    3d76:	f0 0d       	add	r31, r0
    3d78:	74 9f       	mul	r23, r20
    3d7a:	f0 0d       	add	r31, r0
    3d7c:	65 9f       	mul	r22, r21
    3d7e:	f0 0d       	add	r31, r0
    3d80:	99 27       	eor	r25, r25
    3d82:	72 9f       	mul	r23, r18
    3d84:	b0 0d       	add	r27, r0
    3d86:	e1 1d       	adc	r30, r1
    3d88:	f9 1f       	adc	r31, r25
    3d8a:	63 9f       	mul	r22, r19
    3d8c:	b0 0d       	add	r27, r0
    3d8e:	e1 1d       	adc	r30, r1
    3d90:	f9 1f       	adc	r31, r25
    3d92:	bd 01       	movw	r22, r26
    3d94:	cf 01       	movw	r24, r30
    3d96:	11 24       	eor	r1, r1
    3d98:	08 95       	ret

00003d9a <__udivmodqi4>:
    3d9a:	99 1b       	sub	r25, r25
    3d9c:	79 e0       	ldi	r23, 0x09	; 9
    3d9e:	04 c0       	rjmp	.+8      	; 0x3da8 <__udivmodqi4_ep>

00003da0 <__udivmodqi4_loop>:
    3da0:	99 1f       	adc	r25, r25
    3da2:	96 17       	cp	r25, r22
    3da4:	08 f0       	brcs	.+2      	; 0x3da8 <__udivmodqi4_ep>
    3da6:	96 1b       	sub	r25, r22

00003da8 <__udivmodqi4_ep>:
    3da8:	88 1f       	adc	r24, r24
    3daa:	7a 95       	dec	r23
    3dac:	c9 f7       	brne	.-14     	; 0x3da0 <__udivmodqi4_loop>
    3dae:	80 95       	com	r24
    3db0:	08 95       	ret

00003db2 <__udivmodhi4>:
    3db2:	aa 1b       	sub	r26, r26
    3db4:	bb 1b       	sub	r27, r27
    3db6:	51 e1       	ldi	r21, 0x11	; 17
    3db8:	07 c0       	rjmp	.+14     	; 0x3dc8 <__udivmodhi4_ep>

00003dba <__udivmodhi4_loop>:
    3dba:	aa 1f       	adc	r26, r26
    3dbc:	bb 1f       	adc	r27, r27
    3dbe:	a6 17       	cp	r26, r22
    3dc0:	b7 07       	cpc	r27, r23
    3dc2:	10 f0       	brcs	.+4      	; 0x3dc8 <__udivmodhi4_ep>
    3dc4:	a6 1b       	sub	r26, r22
    3dc6:	b7 0b       	sbc	r27, r23

00003dc8 <__udivmodhi4_ep>:
    3dc8:	88 1f       	adc	r24, r24
    3dca:	99 1f       	adc	r25, r25
    3dcc:	5a 95       	dec	r21
    3dce:	a9 f7       	brne	.-22     	; 0x3dba <__udivmodhi4_loop>
    3dd0:	80 95       	com	r24
    3dd2:	90 95       	com	r25
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	cd 01       	movw	r24, r26
    3dd8:	08 95       	ret

00003dda <__prologue_saves__>:
    3dda:	2f 92       	push	r2
    3ddc:	3f 92       	push	r3
    3dde:	4f 92       	push	r4
    3de0:	5f 92       	push	r5
    3de2:	6f 92       	push	r6
    3de4:	7f 92       	push	r7
    3de6:	8f 92       	push	r8
    3de8:	9f 92       	push	r9
    3dea:	af 92       	push	r10
    3dec:	bf 92       	push	r11
    3dee:	cf 92       	push	r12
    3df0:	df 92       	push	r13
    3df2:	ef 92       	push	r14
    3df4:	ff 92       	push	r15
    3df6:	0f 93       	push	r16
    3df8:	1f 93       	push	r17
    3dfa:	cf 93       	push	r28
    3dfc:	df 93       	push	r29
    3dfe:	cd b7       	in	r28, 0x3d	; 61
    3e00:	de b7       	in	r29, 0x3e	; 62
    3e02:	ca 1b       	sub	r28, r26
    3e04:	db 0b       	sbc	r29, r27
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
    3e10:	09 94       	ijmp

00003e12 <__epilogue_restores__>:
    3e12:	2a 88       	ldd	r2, Y+18	; 0x12
    3e14:	39 88       	ldd	r3, Y+17	; 0x11
    3e16:	48 88       	ldd	r4, Y+16	; 0x10
    3e18:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e20:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e22:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e24:	b9 84       	ldd	r11, Y+9	; 0x09
    3e26:	c8 84       	ldd	r12, Y+8	; 0x08
    3e28:	df 80       	ldd	r13, Y+7	; 0x07
    3e2a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e2c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e2e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e30:	1b 81       	ldd	r17, Y+3	; 0x03
    3e32:	aa 81       	ldd	r26, Y+2	; 0x02
    3e34:	b9 81       	ldd	r27, Y+1	; 0x01
    3e36:	ce 0f       	add	r28, r30
    3e38:	d1 1d       	adc	r29, r1
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	ed 01       	movw	r28, r26
    3e46:	08 95       	ret

00003e48 <_exit>:
    3e48:	f8 94       	cli

00003e4a <__stop_program>:
    3e4a:	ff cf       	rjmp	.-2      	; 0x3e4a <__stop_program>
